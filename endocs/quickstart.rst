:orphan:

.. _quickstart:

.. currentmodule:: discord

Быстрый старт
==========

Эта страница введет вас в библиотеку. Она предполагает, что вы установили библиотеку.
Если вы не установили, посмотрите раздел :ref:`installing`.

Базовый бот
-------------

Давайте сделаем бота, который будет отвечать на определенное сообщение и показывать вам его.

Это выглядит как-то так:

.. note::

    Этот пример использует содержимое сообщений, поэтому требует привилегии :attr:`Intents.message_content`.

.. code-block:: python3

    import discord

    intents = discord.Intents.default()
    intents.message_content = True

    client = discord.Client(intents=intents)

    @client.event
    async def on_ready():
        print(f'We have logged in as {client.user}')

    @client.event
    async def on_message(message):
        if message.author == client.user:
            return

        if message.content.startswith('$hello'):
            await message.channel.send('Привет!')

    client.run('токен сюда')

Давайте назовем этот файл ``example_bot.py``. Убедитесь, что она назван не ``discord.py``. Такое название
конфликтует с библиотекой.

Здесь будет много всего, поэтому пойдем по шагам.

1. Первая линия просто импортирует библиотеку, если это вызвало ошибку `ModuleNotFoundError` или `ImportError`,
   то тогда перейдите к разделу :ref:`installing` для правильной установки.
2. Далее, мы создаем экземпляр класса :class:`Client`. Этот клиент является нашей связью с Discord.

3. Мы используем декоратор :meth:`Client.event` для зарегистрировать событие. Эта библиотека имеет много событий.
   Поскольку эта библиотека является асинхронной, мы выполняем действия в стиле "обратного вызова".

   Отклик - это то, что вызывается при том, что что-то происходит. В нашем случае,
   событие :func:`on_ready` вызывается когда бот закончил входить и настраиваться,
   а событие :func:`on_message` вызывается когда бот получил сообщение.
   
4. Поскольку событие :func:`on_message` срабатывает для *каждого* полученного сообщения, мы должны убедиться, что
   убедиться, что мы игнорируем сообщения от самих себя. Для этого мы проверяем, совпадает ли :attr:`Message.author`
   совпадает с :attr:`Client.user`.

5. После этого мы проверяем: начинается ля :class:`Message.content` с ``'$hello'``. Если это так,
   тогда мы отсылаем сообщение в этот канал со строкой ``'Привет!'``. Это простое способ обработки команд,
    которые могут быть потом автоматизированы с помощью фреймворка :doc:`./ext/commands/index`.

6. Finally, we run the bot with our login token. If you need help getting your token or creating a bot,
   look in the :ref:`discord-intro` section.
6. Наконец, мы запустили бота с нашим токеном. Если вам нужна будет помощь при получении токена или создании бота,
   загляните в раздел :ref:`discord-intro`.


Мы создали бота, теперь нам нужно его *запустить*. К счастью, это просто, потому что это просто
скрипт Python, и мы может его напрямую запустить.

На Windows:

.. code-block:: shell

    $ py -3 example_bot.py

На других системах:

.. code-block:: shell

    $ python3 example_bot.py

Теперь вы можете поиграться со своим ботом.

Базовый бот со слэш командой
---------------------------------

В продолжение давате создадим бота, который будет регистрировать простую слэш команду!

Это будет выглядеть как-то так:

.. code-block:: python3

    import discord

    bot = discord.Bot()

    @bot.event
    async def on_ready():
        print(f"We have logged in as {bot.user}")

    @bot.slash_command(guild_ids=[your, guild_ids, here])
    async def hello(ctx):
        await ctx.respond("Привет!")

    bot.run("Ваш токен сюда")


Давайте разберем различия между этим, и предыдущим примером по шагам:

1. Первая строка не изменилась.

2. Далее, мы создаем экземпляр класса :class:`.Bot`. Это различно от класса :class:`.Client`, так как
   он поддерживает создание слэш команд и другие возможности, а наследует все возможности класса :class:`.Client`.

3. Затем мы используем :meth:`.Bot.slash_command` - декоратор, чтобы зарегистрировать новую слэш команду.
   ``guild_ids`` - это список сервером, где эта команда будет активна.
   Если мы его пропустим, то команда будет доступна на всех серверах, и его регистрация может занять до часа.

4. Затем мы вызываем ответ на слэш команду в виде текстового ответа. Пожалуйста, обратите внимание,
   что все слэш команды должны иметь хотя бы один ответ, иначе они не будут успешно выполнены.

5. Наконец, мы запускаем бота с нашим токеном.


Поздравляем! Вы создали первого бота, который использует слэш команды!
