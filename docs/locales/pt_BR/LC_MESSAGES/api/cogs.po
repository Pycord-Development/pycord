msgid ""
msgstr ""
"Project-Id-Version: Pycord Documentation\\n"
"POT-Creation-Date: 2024-05-23 07:30-0000\\n"
"PO-Revision-Date: 2024-05-23 07:30-0000\\n"
"Last-Translator: \\n"
"Language-Team: none\\n"
"MIME-Version: 1.0\\n"
"Content-Type: text/plain; charset=UTF-8\\n"
"Content-Transfer-Encoding: 8bit\\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\\n"
"X-Generator: Crowdin\\n"

msgid "Cogs"
msgstr "Cogs"

msgid "The base class that all cogs must inherit from."
msgstr "A classe base da qual todas as cogs devem herdar."

msgid "A cog is a collection of commands, listeners, and optional state to help group commands together. More information on them can be found on the :ref:`ext_commands_cogs` page."
msgstr "Uma cog é uma coleção de comandos, listeners e optional states para ajudar a agrupar comandos. Mais informações sobre elas podem ser encontradas na página 'ext_commands_cogs' do :ref:."

msgid "When inheriting from this class, the options shown in :class:`CogMeta` are equally valid here."
msgstr "Quando herdamos desta classe, as opções mostradas na :class:`CogMeta` são igualmente válidas aqui."

msgid "Returns"
msgstr "Retorna"

msgid "A :class:`list` of :class:`.ApplicationCommand`\\s that are defined inside this cog.  .. note::      This does not include subcommands."
msgstr "A :class:`list` of :class:`.ApplicationCommand`\\s that are defined inside this cog.  .. note::      This does not include subcommands."

msgid "A :class:`list` of :class:`.ApplicationCommand`\\s that are defined inside this cog."
msgstr "A :class:`list` of :class:`.ApplicationCommand`\\s that are defined inside this cog."

msgid "This does not include subcommands."
msgstr "Isso não inclui subcomandos."

msgid "Return type"
msgstr "Tipo de retorno"

msgid "List[:class:`.ApplicationCommand`]"
msgstr "List[:class:`.ApplicationCommand`]"

msgid "Returns the cog's specified name, not the class name."
msgstr "Retorna o nome especificado da cog, não o nome da classe."

msgid "Returns the cog's description, typically the cleaned docstring."
msgstr "Retorna a descrição do cog, normalmente a docstring limpa."

msgid "An iterator that recursively walks through this cog's commands and subcommands."
msgstr "An iterator that recursively walks through this cog's commands and subcommands."

msgid "Yields"
msgstr "Yields"

msgid "Union[:class:`.Command`, :class:`.Group`] -- A command or group from the cog."
msgstr "Union[:class:`.Command`, :class:`.Group`] -- A command or group from the cog."

msgid "Returns a :class:`list` of (name, function) listener pairs that are defined in this cog."
msgstr "Returns a :class:`list` of (name, function) listener pairs that are defined in this cog."

msgid "The listeners defined in this cog."
msgstr "Os listeners definidos nesta cog."

msgid "List[Tuple[:class:`str`, :ref:`coroutine <coroutine>`]]"
msgstr "List[Tuple[:class:`str`, :ref:`coroutine <coroutine>`]]"

msgid "A decorator that marks a function as a listener."
msgstr "Um decorador que marca uma função como um listener."

msgid "This is the cog equivalent of :meth:`.Bot.listen`."
msgstr "This is the cog equivalent of :meth:`.Bot.listen`."

msgid "Parameters"
msgstr "Parâmetros"

msgid "The name of the event being listened to. If not provided, it defaults to the function's name."
msgstr "O nome do evento que está sendo executado. Se não for fornecido, o padrão é o nome da função."

msgid "If this listener should only be called once after each cog load. Defaults to false."
msgstr "If this listener should only be called once after each cog load. Defaults to false."

msgid "Raises"
msgstr "Gera"

msgid "The function is not a coroutine function or a string was not passed as     the name."
msgstr "A função não é uma coroutine function ou uma “string” não foi passada como o nome."

msgid ":sphinx_autodoc_typehints_type:`\\:py\\:data\\:\\`\\~typing.Callable\\`\\\\ \\\\\\[\\\\\\[\\:py\\:class\\:\\`\\~typing.TypeVar\\`\\\\ \\\\\\(\\`\\`FuncT\\`\\`\\, bound\\= \\:py\\:data\\:\\`\\~typing.Callable\\`\\\\ \\\\\\[\\:py\\:data\\:\\`...\\<Ellipsis\\>\\`\\, \\:py\\:data\\:\\`\\~typing.Any\\`\\]\\)\\]\\, \\:py\\:class\\:\\`\\~typing.TypeVar\\`\\\\ \\\\\\(\\`\\`FuncT\\`\\`\\, bound\\= \\:py\\:data\\:\\`\\~typing.Callable\\`\\\\ \\\\\\[\\:py\\:data\\:\\`...\\<Ellipsis\\>\\`\\, \\:py\\:data\\:\\`\\~typing.Any\\`\\]\\)\\]`"
msgstr ":sphinx_autodoc_typehints_type:`\\:py\\:data\\:\\`\\~typing.Callable\\`\\\\ \\\\\\[\\\\\\[\\:py\\:class\\:\\`\\~typing.TypeVar\\`\\\\ \\\\\\(\\`\\`FuncT\\`\\`\\, bound\\= \\:py\\:data\\:\\`\\~typing.Callable\\`\\\\ \\\\\\[\\:py\\:data\\:\\`...\\<Ellipsis\\>\\`\\, \\:py\\:data\\:\\`\\~typing.Any\\`\\]\\)\\]\\, \\:py\\:class\\:\\`\\~typing.TypeVar\\`\\\\ \\\\\\(\\`\\`FuncT\\`\\`\\, bound\\= \\:py\\:data\\:\\`\\~typing.Callable\\`\\\\ \\\\\\[\\:py\\:data\\:\\`...\\<Ellipsis\\>\\`\\, \\:py\\:data\\:\\`\\~typing.Any\\`\\]\\)\\]`"

msgid "Checks whether the cog has an error handler. :rtype: :sphinx_autodoc_typehints_type:`\\:py\\:class\\:\\`bool\\``"
msgstr "Checks whether the cog has an error handler. :rtype: :sphinx_autodoc_typehints_type:`\\:py\\:class\\:\\`bool\\``"

msgid "A special method that is called when the cog gets removed."
msgstr "Um método especial chamado quando a cog é removida."

msgid "This function **cannot** be a coroutine. It must be a regular function."
msgstr "This function **cannot** be a coroutine. It must be a regular function."

msgid "Subclasses must replace this if they want special unloading behaviour."
msgstr "Subclasses must replace this if they want special unloading behaviour."

msgid ":sphinx_autodoc_typehints_type:`\\:py\\:obj\\:\\`None\\``"
msgstr ":sphinx_autodoc_typehints_type:`\\:py\\:obj\\:\\`None\\``"

msgid "A special method that registers as a :meth:`.Bot.check_once` check."
msgstr "A special method that registers as a :meth:`.Bot.check_once` check."

msgid "This function **can** be a coroutine and must take a sole parameter, ``ctx``, to represent the :class:`.Context` or :class:`.ApplicationContext`."
msgstr "This function **can** be a coroutine and must take a sole parameter, ``ctx``, to represent the :class:`.Context` or :class:`.ApplicationContext`."

msgid "The invocation context."
msgstr "O contexto de chamada."

msgid ":sphinx_autodoc_typehints_type:`\\:py\\:class\\:\\`bool\\``"
msgstr ":sphinx_autodoc_typehints_type:`\\:py\\:class\\:\\`bool\\``"

msgid "A special method that registers as a :meth:`.Bot.check` check."
msgstr "A special method that registers as a :meth:`.Bot.check` check."

msgid "A special method that registers as a :func:`~discord.ext.commands.check` for every command and subcommand in this cog."
msgstr "A special method that registers as a :func:`~discord.ext.commands.check` for every command and subcommand in this cog."

msgid "A special method that is called whenever an error is dispatched inside this cog."
msgstr "A special method that is called whenever an error is dispatched inside this cog."

msgid "This is similar to :func:`.on_command_error` except only applying to the commands inside this cog."
msgstr "This is similar to :func:`.on_command_error` except only applying to the commands inside this cog."

msgid "This **must** be a coroutine."
msgstr "Isto **deve** ser uma coroutine."

msgid "The invocation context where the error happened."
msgstr "The invocation context where the error happened."

msgid "The error that happened."
msgstr "O erro que ocorreu."

msgid "A special method that acts as a cog local pre-invoke hook."
msgstr "A special method that acts as a cog local pre-invoke hook."

msgid "This is similar to :meth:`.ApplicationCommand.before_invoke`."
msgstr "This is similar to :meth:`.ApplicationCommand.before_invoke`."

msgid "A special method that acts as a cog local post-invoke hook."
msgstr "A special method that acts as a cog local post-invoke hook."

msgid "This is similar to :meth:`.ApplicationCommand.after_invoke`."
msgstr "This is similar to :meth:`.ApplicationCommand.after_invoke`."

msgid "A metaclass for defining a cog."
msgstr "Uma metaclasse para definir uma cog."

msgid "Note that you should probably not use this directly. It is exposed purely for documentation purposes along with making custom metaclasses to intermix with other metaclasses such as the :class:`abc.ABCMeta` metaclass."
msgstr "Note que você provavelmente não deve usar isso diretamente. Ele é exposto apenas para fins de documentação juntamente com a criação de metaclasses personalizadas para misturar com outras metaclasses, como a metaclasse :class:`abc.ABCMeta`."

msgid "For example, to create an abstract cog mixin class, the following would be done."
msgstr "For example, to create an abstract cog mixin class, the following would be done."

msgid "When passing an attribute of a metaclass that is documented below, note that you must pass it as a keyword-only argument to the class creation like the following example:"
msgstr "When passing an attribute of a metaclass that is documented below, note that you must pass it as a keyword-only argument to the class creation like the following example:"

msgid "The cog name. By default, it is the name of the class with no modification."
msgstr "O nome da cog. Por padrão, é o nome da classe sem modificações."

msgid "type"
msgstr "tipo"

msgid ":class:`str`"
msgstr ":class:`str`"

msgid "The cog description. By default, it is the cleaned docstring of the class."
msgstr "A descrição da cog. Por padrão, é a docstring limpa da classe."

msgid "A list of attributes to apply to every command inside this cog. The dictionary is passed into the :class:`Command` options at ``__init__``. If you specify attributes inside the command attribute in the class, it will override the one specified inside this attribute. For example:"
msgstr "A list of attributes to apply to every command inside this cog. The dictionary is passed into the :class:`Command` options at ``__init__``. If you specify attributes inside the command attribute in the class, it will override the one specified inside this attribute. For example:"

msgid ":class:`dict`"
msgstr ":class:`dict`"

msgid "A shortcut to :attr:`.command_attrs`, what ``guild_ids`` should all application commands have in the cog. You can override this by setting ``guild_ids`` per command."
msgstr "A shortcut to :attr:`.command_attrs`, what ``guild_ids`` should all application commands have in the cog. You can override this by setting ``guild_ids`` per command."

msgid "Optional[List[:class:`int`]]"
msgstr "Optional[List[:class:`int`]]"

