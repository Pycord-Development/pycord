msgid ""
msgstr ""
"Project-Id-Version: Pycord Documentation\\n"
"POT-Creation-Date: 2024-05-23 07:30-0000\\n"
"PO-Revision-Date: 2024-05-23 07:30-0000\\n"
"Last-Translator: \\n"
"Language-Team: none\\n"
"MIME-Version: 1.0\\n"
"Content-Type: text/plain; charset=UTF-8\\n"
"Content-Transfer-Encoding: 8bit\\n"
"Plural-Forms: nplurals=2; plural=(n > 1);\\n"
"X-Generator: Crowdin\\n"

msgid "API Reference"
msgstr "API Reference"

msgid "The following section outlines the API of Pycord's prefixed command extension module."
msgstr "The following section outlines the API of Pycord's prefixed command extension module."

msgid "Using prefixed commands in guilds requires :attr:`Intents.message_content` to be enabled."
msgstr "Using prefixed commands in guilds requires :attr:`Intents.message_content` to be enabled."

msgid "Bots"
msgstr "Bots"

msgid "Bot"
msgstr "Bot"

msgid "Represents a discord bot."
msgstr "Represents a discord bot."

msgid "This class is a subclass of :class:`discord.Bot` and as a result anything that you can do with a :class:`discord.Bot` you can do with this bot."
msgstr "This class is a subclass of :class:`discord.Bot` and as a result anything that you can do with a :class:`discord.Bot` you can do with this bot."

msgid "This class also subclasses :class:`.GroupMixin` to provide the functionality to manage commands."
msgstr "This class also subclasses :class:`.GroupMixin` to provide the functionality to manage commands."

msgid "Using prefixed commands requires :attr:`discord.Intents.message_content` to be enabled."
msgstr "Using prefixed commands requires :attr:`discord.Intents.message_content` to be enabled."

msgid "The command prefix is what the message content must contain initially to have a command invoked. This prefix could either be a string to indicate what the prefix should be, or a callable that takes in the bot as its first parameter and :class:`discord.Message` as its second parameter and returns the prefix. This is to facilitate \"dynamic\" command prefixes. This callable can be either a regular function or a coroutine."
msgstr "The command prefix is what the message content must contain initially to have a command invoked. This prefix could either be a string to indicate what the prefix should be, or a callable that takes in the bot as its first parameter and :class:`discord.Message` as its second parameter and returns the prefix. This is to facilitate \"dynamic\" command prefixes. This callable can be either a regular function or a coroutine."

msgid "An empty string as the prefix always matches, enabling prefix-less command invocation. While this may be useful in DMs it should be avoided in servers, as it's likely to cause performance issues and unintended command invocations."
msgstr "An empty string as the prefix always matches, enabling prefix-less command invocation. While this may be useful in DMs it should be avoided in servers, as it's likely to cause performance issues and unintended command invocations."

msgid "The command prefix could also be an iterable of strings indicating that multiple checks for the prefix should be used and the first one to match will be the invocation prefix. You can get this prefix via :attr:`.Context.prefix`. To avoid confusion empty iterables are not allowed."
msgstr "The command prefix could also be an iterable of strings indicating that multiple checks for the prefix should be used and the first one to match will be the invocation prefix. You can get this prefix via :attr:`.Context.prefix`. To avoid confusion empty iterables are not allowed."

msgid "When passing multiple prefixes be careful to not pass a prefix that matches a longer prefix occurring later in the sequence.  For example, if the command prefix is ``('!', '!?')``  the ``'!?'`` prefix will never be matched to any message as the previous one matches messages starting with ``!?``. This is especially important when passing an empty string, it should always be last as no prefix after it will be matched."
msgstr "When passing multiple prefixes be careful to not pass a prefix that matches a longer prefix occurring later in the sequence.  For example, if the command prefix is ``('!', '!?')``  the ``'!?'`` prefix will never be matched to any message as the previous one matches messages starting with ``!?``. This is especially important when passing an empty string, it should always be last as no prefix after it will be matched."

msgid "Whether the commands should be case-insensitive. Defaults to ``False``. This attribute does not carry over to groups. You must set it to every group if you require group commands to be case-insensitive as well."
msgstr "Whether the commands should be case-insensitive. Defaults to ``False``. This attribute does not carry over to groups. You must set it to every group if you require group commands to be case-insensitive as well."

msgid "type"
msgstr "type"

msgid ":class:`bool`"
msgstr ":class:`bool`"

msgid "The help command implementation to use. This can be dynamically set at runtime. To remove the help command pass ``None``. For more information on implementing a help command, see :ref:`ext_commands_help_command`."
msgstr "The help command implementation to use. This can be dynamically set at runtime. To remove the help command pass ``None``. For more information on implementing a help command, see :ref:`ext_commands_help_command`."

msgid "Optional[:class:`.HelpCommand`]"
msgstr "Optional[:class:`.HelpCommand`]"

msgid "Whether to strip whitespace characters after encountering the command prefix. This allows for ``!   hello`` and ``!hello`` to both work if the ``command_prefix`` is set to ``!``. Defaults to ``False``."
msgstr "Whether to strip whitespace characters after encountering the command prefix. This allows for ``!   hello`` and ``!hello`` to both work if the ``command_prefix`` is set to ``!``. Defaults to ``False``."

msgid "Parameters"
msgstr "Parameters"

msgid "A decorator that registers a coroutine as a post-invoke hook. A post-invoke hook is called directly after the command is called. This makes it a useful function to clean-up database connections or any type of clean up required. This post-invoke hook takes a sole parameter, a :class:`.Context`."
msgstr "A decorator that registers a coroutine as a post-invoke hook. A post-invoke hook is called directly after the command is called. This makes it a useful function to clean-up database connections or any type of clean up required. This post-invoke hook takes a sole parameter, a :class:`.Context`."

msgid "Similar to :meth:`~.Bot.before_invoke`\\, this is not called unless checks and argument parsing procedures succeed. This hook is, however, **always** called regardless of the internal command callback raising an error (i.e. :exc:`.CommandInvokeError`\\). This makes it ideal for clean-up scenarios."
msgstr "Similar to :meth:`~.Bot.before_invoke`\\, this is not called unless checks and argument parsing procedures succeed. This hook is, however, **always** called regardless of the internal command callback raising an error (i.e. :exc:`.CommandInvokeError`\\). This makes it ideal for clean-up scenarios."

msgid "The coroutine to register as the post-invoke hook."
msgstr "The coroutine to register as the post-invoke hook."

msgid "Raises"
msgstr "Raises"

msgid "The coroutine passed is not actually a coroutine."
msgstr "The coroutine passed is not actually a coroutine."

msgid "A decorator that registers a coroutine as a pre-invoke hook. A pre-invoke hook is called directly before the command is called. This makes it a useful function to set up database connections or any type of set up required. This pre-invoke hook takes a sole parameter, a :class:`.Context`."
msgstr "A decorator that registers a coroutine as a pre-invoke hook. A pre-invoke hook is called directly before the command is called. This makes it a useful function to set up database connections or any type of set up required. This pre-invoke hook takes a sole parameter, a :class:`.Context`."

msgid "The :meth:`~.Bot.before_invoke` and :meth:`~.Bot.after_invoke` hooks are only called if all checks and argument parsing procedures pass without error. If any check or argument parsing procedures fail then the hooks are not called."
msgstr "The :meth:`~.Bot.before_invoke` and :meth:`~.Bot.after_invoke` hooks are only called if all checks and argument parsing procedures pass without error. If any check or argument parsing procedures fail then the hooks are not called."

msgid "The coroutine to register as the pre-invoke hook."
msgstr "The coroutine to register as the pre-invoke hook."

msgid "A decorator that adds a global check to the bot. A global check is similar to a :func:`.check` that is applied on a per-command basis except it is run before any command checks have been verified and applies to every command the bot has."
msgstr "A decorator that adds a global check to the bot. A global check is similar to a :func:`.check` that is applied on a per-command basis except it is run before any command checks have been verified and applies to every command the bot has."

msgid "This function can either be a regular function or a coroutine. Similar to a command :func:`.check`, this takes a single parameter of type :class:`.Context` and can only raise exceptions inherited from :exc:`.ApplicationCommandError`."
msgstr "This function can either be a regular function or a coroutine. Similar to a command :func:`.check`, this takes a single parameter of type :class:`.Context` and can only raise exceptions inherited from :exc:`.ApplicationCommandError`."

msgid "Example"
msgstr "Example"

msgid "A decorator that adds a \"call once\" global check to the bot. Unlike regular global checks, this one is called only once per :meth:`.Bot.invoke` call. Regular global checks are called whenever a command is called or :meth:`.Command.can_run` is called. This type of check bypasses that and ensures that it's called only once, even inside the default help command."
msgstr "A decorator that adds a \"call once\" global check to the bot. Unlike regular global checks, this one is called only once per :meth:`.Bot.invoke` call. Regular global checks are called whenever a command is called or :meth:`.Command.can_run` is called. This type of check bypasses that and ensures that it's called only once, even inside the default help command."

msgid "When using this function the :class:`.Context` sent to a group subcommand may only parse the parent command and not the subcommands due to it being invoked once per :meth:`.Bot.invoke` call."
msgstr "When using this function the :class:`.Context` sent to a group subcommand may only parse the parent command and not the subcommands due to it being invoked once per :meth:`.Bot.invoke` call."

msgid "A shortcut decorator that invokes :func:`.command` and adds it to the internal command list via :meth:`~.GroupMixin.add_command`."
msgstr "A shortcut decorator that invokes :func:`.command` and adds it to the internal command list via :meth:`~.GroupMixin.add_command`."

msgid "Returns"
msgstr "Returns"

msgid "A decorator that converts the provided method into a Command, adds it to the bot, then returns it."
msgstr "A decorator that converts the provided method into a Command, adds it to the bot, then returns it."

msgid "Return type"
msgstr "Return type"

msgid "Callable[..., :class:`Command`]"
msgstr "Callable[..., :class:`Command`]"

msgid "A decorator that registers an event to listen to."
msgstr "A decorator that registers an event to listen to."

msgid "You can find more info about the events on the :ref:`documentation below <discord-api-events>`."
msgstr "You can find more info about the events on the :ref:`documentation below <discord-api-events>`."

msgid "The events must be a :ref:`coroutine <coroutine>`, if not, :exc:`TypeError` is raised."
msgstr "The events must be a :ref:`coroutine <coroutine>`, if not, :exc:`TypeError` is raised."

msgid "This replaces any default handlers. Developers are encouraged to use :py:meth:`~discord.Client.listen` for adding additional handlers instead of :py:meth:`~discord.Client.event` unless default method replacement is intended."
msgstr "This replaces any default handlers. Developers are encouraged to use :py:meth:`~discord.Client.listen` for adding additional handlers instead of :py:meth:`~discord.Client.event` unless default method replacement is intended."

msgid ":sphinx_autodoc_typehints_type:`\\:py\\:class\\:\\`\\~typing.TypeVar\\`\\\\ \\\\\\(\\`\\`Coro\\`\\`\\, bound\\= \\:py\\:data\\:\\`\\~typing.Callable\\`\\\\ \\\\\\[\\:py\\:data\\:\\`...\\<Ellipsis\\>\\`\\, \\:py\\:class\\:\\`\\~typing.Coroutine\\`\\\\ \\\\\\[\\:py\\:data\\:\\`\\~typing.Any\\`\\, \\:py\\:data\\:\\`\\~typing.Any\\`\\, \\:py\\:data\\:\\`\\~typing.Any\\`\\]\\]\\)`"
msgstr ":sphinx_autodoc_typehints_type:`\\:py\\:class\\:\\`\\~typing.TypeVar\\`\\\\ \\\\\\(\\`\\`Coro\\`\\`\\, bound\\= \\:py\\:data\\:\\`\\~typing.Callable\\`\\\\ \\\\\\[\\:py\\:data\\:\\`...\\<Ellipsis\\>\\`\\, \\:py\\:class\\:\\`\\~typing.Coroutine\\`\\\\ \\\\\\[\\:py\\:data\\:\\`\\~typing.Any\\`\\, \\:py\\:data\\:\\`\\~typing.Any\\`\\, \\:py\\:data\\:\\`\\~typing.Any\\`\\]\\]\\)`"

msgid "A shortcut decorator that invokes :func:`.group` and adds it to the internal command list via :meth:`~.GroupMixin.add_command`."
msgstr "A shortcut decorator that invokes :func:`.group` and adds it to the internal command list via :meth:`~.GroupMixin.add_command`."

msgid "A decorator that converts the provided method into a Group, adds it to the bot, then returns it."
msgstr "A decorator that converts the provided method into a Group, adds it to the bot, then returns it."

msgid "Callable[..., :class:`Group`]"
msgstr "Callable[..., :class:`Group`]"

msgid "A decorator that registers another function as an external event listener. Basically this allows you to listen to multiple events from different places e.g. such as :func:`.on_ready`"
msgstr "A decorator that registers another function as an external event listener. Basically this allows you to listen to multiple events from different places e.g. such as :func:`.on_ready`"

msgid "The functions being listened to must be a :ref:`coroutine <coroutine>`."
msgstr "The functions being listened to must be a :ref:`coroutine <coroutine>`."

msgid "The function being listened to is not a coroutine."
msgstr "The function being listened to is not a coroutine."

msgid "The ``name`` (event name) does not start with 'on_'"
msgstr "The ``name`` (event name) does not start with 'on_'"

msgid "Would print one and two in an unspecified order."
msgstr "Would print one and two in an unspecified order."

msgid ":sphinx_autodoc_typehints_type:`\\:py\\:data\\:\\`\\~typing.Callable\\`\\\\ \\\\\\[\\\\\\[\\:py\\:class\\:\\`\\~typing.TypeVar\\`\\\\ \\\\\\(\\`\\`Coro\\`\\`\\, bound\\= \\:py\\:data\\:\\`\\~typing.Callable\\`\\\\ \\\\\\[\\:py\\:data\\:\\`...\\<Ellipsis\\>\\`\\, \\:py\\:class\\:\\`\\~typing.Coroutine\\`\\\\ \\\\\\[\\:py\\:data\\:\\`\\~typing.Any\\`\\, \\:py\\:data\\:\\`\\~typing.Any\\`\\, \\:py\\:data\\:\\`\\~typing.Any\\`\\]\\]\\)\\]\\, \\:py\\:class\\:\\`\\~typing.TypeVar\\`\\\\ \\\\\\(\\`\\`Coro\\`\\`\\, bound\\= \\:py\\:data\\:\\`\\~typing.Callable\\`\\\\ \\\\\\[\\:py\\:data\\:\\`...\\<Ellipsis\\>\\`\\, \\:py\\:class\\:\\`\\~typing.Coroutine\\`\\\\ \\\\\\[\\:py\\:data\\:\\`\\~typing.Any\\`\\, \\:py\\:data\\:\\`\\~typing.Any\\`\\, \\:py\\:data\\:\\`\\~typing.Any\\`\\]\\]\\)\\]`"
msgstr ":sphinx_autodoc_typehints_type:`\\:py\\:data\\:\\`\\~typing.Callable\\`\\\\ \\\\\\[\\\\\\[\\:py\\:class\\:\\`\\~typing.TypeVar\\`\\\\ \\\\\\(\\`\\`Coro\\`\\`\\, bound\\= \\:py\\:data\\:\\`\\~typing.Callable\\`\\\\ \\\\\\[\\:py\\:data\\:\\`...\\<Ellipsis\\>\\`\\, \\:py\\:class\\:\\`\\~typing.Coroutine\\`\\\\ \\\\\\[\\:py\\:data\\:\\`\\~typing.Any\\`\\, \\:py\\:data\\:\\`\\~typing.Any\\`\\, \\:py\\:data\\:\\`\\~typing.Any\\`\\]\\]\\)\\]\\, \\:py\\:class\\:\\`\\~typing.TypeVar\\`\\\\ \\\\\\(\\`\\`Coro\\`\\`\\, bound\\= \\:py\\:data\\:\\`\\~typing.Callable\\`\\\\ \\\\\\[\\:py\\:data\\:\\`...\\<Ellipsis\\>\\`\\, \\:py\\:class\\:\\`\\~typing.Coroutine\\`\\\\ \\\\\\[\\:py\\:data\\:\\`\\~typing.Any\\`\\, \\:py\\:data\\:\\`\\~typing.Any\\`\\, \\:py\\:data\\:\\`\\~typing.Any\\`\\]\\]\\)\\]`"

msgid "The activity being used upon logging in."
msgstr "The activity being used upon logging in."

msgid "Optional[:class:`.BaseActivity`]"
msgstr "Optional[:class:`.BaseActivity`]"

msgid "Adds an :class:`.ApplicationCommand` into the internal list of commands."
msgstr "Adds an :class:`.ApplicationCommand` into the internal list of commands."

msgid "This is usually not called, instead the :meth:`command` or other shortcut decorators are used instead."
msgstr "This is usually not called, instead the :meth:`command` or other shortcut decorators are used instead."

msgid "The command to add."
msgstr "The command to add."

msgid ":sphinx_autodoc_typehints_type:`\\:py\\:obj\\:\\`None\\``"
msgstr ":sphinx_autodoc_typehints_type:`\\:py\\:obj\\:\\`None\\``"

msgid "Adds a global check to the bot. This is the non-decorator interface to :meth:`.check` and :meth:`.check_once`."
msgstr "Adds a global check to the bot. This is the non-decorator interface to :meth:`.check` and :meth:`.check_once`."

msgid "The function that was used as a global check."
msgstr "The function that was used as a global check."

msgid "If the function should only be called once per :meth:`.Bot.invoke` call."
msgstr "If the function should only be called once per :meth:`.Bot.invoke` call."

msgid "Adds a \"cog\" to the bot."
msgstr "Adds a \"cog\" to the bot."

msgid "A cog is a class that has its own event listeners and commands."
msgstr "A cog is a class that has its own event listeners and commands."

msgid ":exc:`.ClientException` is raised when a cog with the same name is already loaded."
msgstr ":exc:`.ClientException` is raised when a cog with the same name is already loaded."

msgid "The cog to register to the bot."
msgstr "The cog to register to the bot."

msgid "If a previously loaded cog with the same name should be ejected instead of raising an error.  .. versionadded:: 2.0"
msgstr "If a previously loaded cog with the same name should be ejected instead of raising an error.  .. versionadded:: 2.0"

msgid "If a previously loaded cog with the same name should be ejected instead of raising an error."
msgstr "If a previously loaded cog with the same name should be ejected instead of raising an error."

msgid "The cog does not inherit from :class:`.Cog`."
msgstr "The cog does not inherit from :class:`.Cog`."

msgid "An error happened during loading."
msgstr "An error happened during loading."

msgid "A cog with the same name is already loaded."
msgstr "A cog with the same name is already loaded."

msgid "Adds a :class:`.Command` into the internal list of commands."
msgstr "Adds a :class:`.Command` into the internal list of commands."

msgid "This is usually not called, instead the :meth:`~.GroupMixin.command` or :meth:`~.GroupMixin.group` shortcut decorators are used instead."
msgstr "This is usually not called, instead the :meth:`~.GroupMixin.command` or :meth:`~.GroupMixin.group` shortcut decorators are used instead."

msgid "Raise :exc:`.CommandRegistrationError` instead of generic :exc:`.ClientException`"
msgstr "Raise :exc:`.CommandRegistrationError` instead of generic :exc:`.ClientException`"

msgid "If the command or its alias is already registered by different command."
msgstr "If the command or its alias is already registered by different command."

msgid "If the command passed is not a subclass of :class:`.Command`."
msgstr "If the command passed is not a subclass of :class:`.Command`."

msgid "The non decorator alternative to :meth:`.listen`."
msgstr "The non decorator alternative to :meth:`.listen`."

msgid "The function to call."
msgstr "The function to call."

msgid "The name of the event to listen for. Defaults to ``func.__name__``."
msgstr "The name of the event to listen for. Defaults to ``func.__name__``."

msgid "The ``func`` parameter is not a coroutine function."
msgstr "The ``func`` parameter is not a coroutine function."

msgid "Registers a :class:`~discord.ui.View` for persistent listening."
msgstr "Registers a :class:`~discord.ui.View` for persistent listening."

msgid "This method should be used for when a view is comprised of components that last longer than the lifecycle of the program."
msgstr "This method should be used for when a view is comprised of components that last longer than the lifecycle of the program."

msgid "The view to register for dispatching."
msgstr "The view to register for dispatching."

msgid "The message ID that the view is attached to. This is currently used to refresh the view's state during message update events. If not given then message update events are not propagated for the view."
msgstr "The message ID that the view is attached to. This is currently used to refresh the view's state during message update events. If not given then message update events are not propagated for the view."

msgid "A view was not passed."
msgstr "A view was not passed."

msgid "The view is not persistent. A persistent view has no timeout     and all their components have an explicitly provided ``custom_id``."
msgstr "The view is not persistent. A persistent view has no timeout     and all their components have an explicitly provided ``custom_id``."

msgid "The allowed mention configuration."
msgstr "The allowed mention configuration."

msgid "A shortcut decorator that invokes :func:`command` and adds it to the internal command list via :meth:`~.Bot.add_application_command`."
msgstr "A shortcut decorator that invokes :func:`command` and adds it to the internal command list via :meth:`~.Bot.add_application_command`."

msgid "A decorator that converts the provided method into an :class:`.ApplicationCommand`, adds it to the bot, then returns it."
msgstr "A decorator that converts the provided method into an :class:`.ApplicationCommand`, adds it to the bot, then returns it."

msgid "Callable[..., :class:`ApplicationCommand`]"
msgstr "Callable[..., :class:`ApplicationCommand`]"

msgid "The client's application flags."
msgstr "The client's application flags."

msgid "The client's application ID."
msgstr "The client's application ID."

msgid "If this is not passed via ``__init__`` then this is retrieved through the gateway when an event contains the data. Usually after :func:`~discord.on_connect` is called."
msgstr "If this is not passed via ``__init__`` then this is retrieved through the gateway when an event contains the data. Usually after :func:`~discord.on_connect` is called."

msgid "|coro|"
msgstr "|coro|"

msgid "Retrieves the bot's application information."
msgstr "Retrieves the bot's application information."

msgid "The bot's application information."
msgstr "The bot's application information."

msgid ":class:`.AppInfo`"
msgstr ":class:`.AppInfo`"

msgid "Retrieving the information failed somehow."
msgstr "Retrieving the information failed somehow."

msgid "A hook that is called before IDENTIFYing a session. This is useful if you wish to have more control over the synchronization of multiple IDENTIFYing clients."
msgstr "A hook that is called before IDENTIFYing a session. This is useful if you wish to have more control over the synchronization of multiple IDENTIFYing clients."

msgid "The default implementation sleeps for 5 seconds."
msgstr "The default implementation sleeps for 5 seconds."

msgid "The shard ID that requested being IDENTIFY'd"
msgstr "The shard ID that requested being IDENTIFY'd"

msgid "Whether this IDENTIFY is the first initial IDENTIFY."
msgstr "Whether this IDENTIFY is the first initial IDENTIFY."

msgid "Read-only list of messages the connected client has cached."
msgstr "Read-only list of messages the connected client has cached."

msgid "Changes the client's presence."
msgstr "Changes the client's presence."

msgid "The activity being done. ``None`` if no currently active activity is done."
msgstr "The activity being done. ``None`` if no currently active activity is done."

msgid "Indicates what status to change to. If ``None``, then :attr:`.Status.online` is used."
msgstr "Indicates what status to change to. If ``None``, then :attr:`.Status.online` is used."

msgid "If the ``activity`` parameter is not the proper type."
msgstr "If the ``activity`` parameter is not the proper type."

msgid "Removed the ``afk`` keyword-only parameter."
msgstr "Removed the ``afk`` keyword-only parameter."

msgid "Clears the internal state of the bot."
msgstr "Clears the internal state of the bot."

msgid "After this, the bot can be considered \"re-opened\", i.e. :meth:`is_closed` and :meth:`is_ready` both return ``False`` along with the bot's internal cache cleared."
msgstr "After this, the bot can be considered \"re-opened\", i.e. :meth:`is_closed` and :meth:`is_ready` both return ``False`` along with the bot's internal cache cleared."

msgid "Closes the connection to Discord."
msgstr "Closes the connection to Discord."

msgid "A read-only mapping of cog name to cog."
msgstr "A read-only mapping of cog name to cog."

msgid "A unique set of commands without aliases that are registered."
msgstr "A unique set of commands without aliases that are registered."

msgid "Creates a WebSocket connection and lets the WebSocket listen to messages from Discord. This is a loop that runs the entire event system and miscellaneous aspects of the library. Control is not resumed until the WebSocket connection is terminated."
msgstr "Creates a WebSocket connection and lets the WebSocket listen to messages from Discord. This is a loop that runs the entire event system and miscellaneous aspects of the library. Control is not resumed until the WebSocket connection is terminated."

msgid "If we should attempt reconnecting, either due to internet failure or a specific failure on Discord's part. Certain disconnects that lead to bad state will not be handled (such as invalid sharding payloads or bad tokens)."
msgstr "If we should attempt reconnecting, either due to internet failure or a specific failure on Discord's part. Certain disconnects that lead to bad state will not be handled (such as invalid sharding payloads or bad tokens)."

msgid "The gateway to connect to Discord is not found. Usually if this     is thrown then there is a Discord API outage."
msgstr "The gateway to connect to Discord is not found. Usually if this     is thrown then there is a Discord API outage."

msgid "The WebSocket connection has been terminated."
msgstr "The WebSocket connection has been terminated."

msgid "Creates a :class:`.DMChannel` with this user."
msgstr "Creates a :class:`.DMChannel` with this user."

msgid "This should be rarely called, as this is done transparently for most people."
msgstr "This should be rarely called, as this is done transparently for most people."

msgid "The user to create a DM with."
msgstr "The user to create a DM with."

msgid "The channel that was created."
msgstr "The channel that was created."

msgid ":class:`.DMChannel`"
msgstr ":class:`.DMChannel`"

msgid "A shortcut method that creates a slash command group with no subcommands and adds it to the internal command list via :meth:`add_application_command`."
msgstr "A shortcut method that creates a slash command group with no subcommands and adds it to the internal command list via :meth:`add_application_command`."

msgid "The name of the group to create."
msgstr "The name of the group to create."

msgid "The description of the group to create."
msgstr "The description of the group to create."

msgid "A list of the IDs of each guild this group should be added to, making it a guild command. This will be a global command if ``None`` is passed."
msgstr "A list of the IDs of each guild this group should be added to, making it a guild command. This will be a global command if ``None`` is passed."

msgid "Any additional keyword arguments to pass to :class:`.SlashCommandGroup`."
msgstr "Any additional keyword arguments to pass to :class:`.SlashCommandGroup`."

msgid "The slash command group that was created."
msgstr "The slash command group that was created."

msgid "Creates a :class:`.Guild`."
msgstr "Creates a :class:`.Guild`."

msgid "Bot accounts in more than 10 guilds are not allowed to create guilds."
msgstr "Bot accounts in more than 10 guilds are not allowed to create guilds."

msgid "The name of the guild."
msgstr "The name of the guild."

msgid "The :term:`py:bytes-like object` representing the icon. See :meth:`.ClientUser.edit` for more details on what is expected."
msgstr "The :term:`py:bytes-like object` representing the icon. See :meth:`.ClientUser.edit` for more details on what is expected."

msgid "The code for a template to create the guild with.  .. versionadded:: 1.4"
msgstr "The code for a template to create the guild with.  .. versionadded:: 1.4"

msgid "The code for a template to create the guild with."
msgstr "The code for a template to create the guild with."

msgid "The guild created. This is not the same guild that is added to cache."
msgstr "The guild created. This is not the same guild that is added to cache."

msgid ":class:`.Guild`"
msgstr ":class:`.Guild`"

msgid "Guild creation failed."
msgstr "Guild creation failed."

msgid "Invalid icon image format given. Must be PNG or JPG."
msgstr "Invalid icon image format given. Must be PNG or JPG."

msgid "Revokes an :class:`.Invite`, URL, or ID to an invite."
msgstr "Revokes an :class:`.Invite`, URL, or ID to an invite."

msgid "You must have the :attr:`~.Permissions.manage_channels` permission in the associated guild to do this."
msgstr "You must have the :attr:`~.Permissions.manage_channels` permission in the associated guild to do this."

msgid "The invite to revoke."
msgstr "The invite to revoke."

msgid "You do not have permissions to revoke invites."
msgstr "You do not have permissions to revoke invites."

msgid "The invite is invalid or expired."
msgstr "The invite is invalid or expired."

msgid "Revoking the invite failed."
msgstr "Revoking the invite failed."

msgid "The emojis that the connected client has."
msgstr "The emojis that the connected client has."

msgid "Returns an :class:`.AsyncIterator` that enables fetching the application's entitlements."
msgstr "Returns an :class:`.AsyncIterator` that enables fetching the application's entitlements."

msgid "Limit the fetched entitlements to entitlements owned by this user."
msgstr "Limit the fetched entitlements to entitlements owned by this user."

msgid "Limit the fetched entitlements to entitlements that are for these SKUs."
msgstr "Limit the fetched entitlements to entitlements that are for these SKUs."

msgid "Retrieves guilds before this date or object. If a datetime is provided, it is recommended to use a UTC-aware datetime. If the datetime is naive, it is assumed to be local time."
msgstr "Retrieves guilds before this date or object. If a datetime is provided, it is recommended to use a UTC-aware datetime. If the datetime is naive, it is assumed to be local time."

msgid "Retrieve guilds after this date or object. If a datetime is provided, it is recommended to use a UTC-aware datetime. If the datetime is naive, it is assumed to be local time."
msgstr "Retrieve guilds after this date or object. If a datetime is provided, it is recommended to use a UTC-aware datetime. If the datetime is naive, it is assumed to be local time."

msgid "The number of entitlements to retrieve. If ``None``, retrieves every entitlement, which may be slow. Defaults to ``100``."
msgstr "The number of entitlements to retrieve. If ``None``, retrieves every entitlement, which may be slow. Defaults to ``100``."

msgid "Limit the fetched entitlements to entitlements owned by this guild."
msgstr "Limit the fetched entitlements to entitlements owned by this guild."

msgid "Whether to limit the fetched entitlements to those that have not ended. Defaults to ``False``."
msgstr "Whether to limit the fetched entitlements to those that have not ended. Defaults to ``False``."

msgid "Yields"
msgstr "Yields"

msgid ":class:`.Entitlement` -- The application's entitlements."
msgstr ":class:`.Entitlement` -- The application's entitlements."

msgid "Retrieving the entitlements failed."
msgstr "Retrieving the entitlements failed."

msgid ":sphinx_autodoc_typehints_type:`\\:py\\:class\\:\\`\\~discord.iterators.EntitlementIterator\\``"
msgstr ":sphinx_autodoc_typehints_type:`\\:py\\:class\\:\\`\\~discord.iterators.EntitlementIterator\\``"

msgid "Examples"
msgstr "Examples"

msgid "Usage ::"
msgstr "Usage ::"

msgid "Flattening into a list ::"
msgstr "Flattening into a list ::"

msgid "All parameters are optional."
msgstr "All parameters are optional."

msgid "A read-only mapping of extension name to extension."
msgstr "A read-only mapping of extension name to extension."

msgid "|coro| Retrieves a :class:`.PartialAppInfo` from an application ID."
msgstr "|coro| Retrieves a :class:`.PartialAppInfo` from an application ID."

msgid "The application ID to retrieve information from."
msgstr "The application ID to retrieve information from."

msgid "The application information."
msgstr "The application information."

msgid ":class:`.PartialAppInfo`"
msgstr ":class:`.PartialAppInfo`"

msgid "An application with this ID does not exist."
msgstr "An application with this ID does not exist."

msgid "Retrieving the application failed."
msgstr "Retrieving the application failed."

msgid "Retrieves a :class:`.abc.GuildChannel`, :class:`.abc.PrivateChannel`, or :class:`.Thread` with the specified ID."
msgstr "Retrieves a :class:`.abc.GuildChannel`, :class:`.abc.PrivateChannel`, or :class:`.Thread` with the specified ID."

msgid "This method is an API call. For general usage, consider :meth:`get_channel` instead."
msgstr "This method is an API call. For general usage, consider :meth:`get_channel` instead."

msgid "The channel from the ID."
msgstr "The channel from the ID."

msgid "Union[:class:`.abc.GuildChannel`, :class:`.abc.PrivateChannel`, :class:`.Thread`]"
msgstr "Union[:class:`.abc.GuildChannel`, :class:`.abc.PrivateChannel`, :class:`.Thread`]"

msgid "An unknown channel type was received from Discord."
msgstr "An unknown channel type was received from Discord."

msgid "Retrieving the channel failed."
msgstr "Retrieving the channel failed."

msgid "Invalid Channel ID."
msgstr "Invalid Channel ID."

msgid "You do not have permission to fetch this channel."
msgstr "You do not have permission to fetch this channel."

msgid "Retrieves a :class:`.Guild` from an ID."
msgstr "Retrieves a :class:`.Guild` from an ID."

msgid "Using this, you will **not** receive :attr:`.Guild.channels`, :attr:`.Guild.members`, :attr:`.Member.activity` and :attr:`.Member.voice` per :class:`.Member`."
msgstr "Using this, you will **not** receive :attr:`.Guild.channels`, :attr:`.Guild.members`, :attr:`.Member.activity` and :attr:`.Member.voice` per :class:`.Member`."

msgid "This method is an API call. For general usage, consider :meth:`get_guild` instead."
msgstr "This method is an API call. For general usage, consider :meth:`get_guild` instead."

msgid "The guild's ID to fetch from."
msgstr "The guild's ID to fetch from."

msgid "Whether to include count information in the guild. This fills the :attr:`.Guild.approximate_member_count` and :attr:`.Guild.approximate_presence_count` fields.  .. versionadded:: 2.0"
msgstr "Whether to include count information in the guild. This fills the :attr:`.Guild.approximate_member_count` and :attr:`.Guild.approximate_presence_count` fields.  .. versionadded:: 2.0"

msgid "Whether to include count information in the guild. This fills the :attr:`.Guild.approximate_member_count` and :attr:`.Guild.approximate_presence_count` fields."
msgstr "Whether to include count information in the guild. This fills the :attr:`.Guild.approximate_member_count` and :attr:`.Guild.approximate_presence_count` fields."

msgid "The guild from the ID."
msgstr "The guild from the ID."

msgid "You do not have access to the guild."
msgstr "You do not have access to the guild."

msgid "Getting the guild failed."
msgstr "Getting the guild failed."

msgid "Retrieves an :class:`.AsyncIterator` that enables receiving your guilds."
msgstr "Retrieves an :class:`.AsyncIterator` that enables receiving your guilds."

msgid "Using this, you will only receive :attr:`.Guild.owner`, :attr:`.Guild.icon`, :attr:`.Guild.id`, and :attr:`.Guild.name` per :class:`.Guild`."
msgstr "Using this, you will only receive :attr:`.Guild.owner`, :attr:`.Guild.icon`, :attr:`.Guild.id`, and :attr:`.Guild.name` per :class:`.Guild`."

msgid "This method is an API call. For general usage, consider :attr:`guilds` instead."
msgstr "This method is an API call. For general usage, consider :attr:`guilds` instead."

msgid "The number of guilds to retrieve. If ``None``, it retrieves every guild you have access to. Note, however, that this would make it a slow operation. Defaults to ``100``."
msgstr "The number of guilds to retrieve. If ``None``, it retrieves every guild you have access to. Note, however, that this would make it a slow operation. Defaults to ``100``."

msgid "Retrieves guilds before this date or object. If a datetime is provided, it is recommended to use a UTC aware datetime. If the datetime is naive, it is assumed to be local time."
msgstr "Retrieves guilds before this date or object. If a datetime is provided, it is recommended to use a UTC aware datetime. If the datetime is naive, it is assumed to be local time."

msgid "Retrieve guilds after this date or object. If a datetime is provided, it is recommended to use a UTC aware datetime. If the datetime is naive, it is assumed to be local time."
msgstr "Retrieve guilds after this date or object. If a datetime is provided, it is recommended to use a UTC aware datetime. If the datetime is naive, it is assumed to be local time."

msgid ":class:`.Guild` -- The guild with the guild data parsed."
msgstr ":class:`.Guild` -- The guild with the guild data parsed."

msgid "Getting the guilds failed."
msgstr "Getting the guilds failed."

msgid ":sphinx_autodoc_typehints_type:`\\:py\\:class\\:\\`\\~discord.iterators.GuildIterator\\``"
msgstr ":sphinx_autodoc_typehints_type:`\\:py\\:class\\:\\`\\~discord.iterators.GuildIterator\\``"

msgid "Gets an :class:`.Invite` from a discord.gg URL or ID."
msgstr "Gets an :class:`.Invite` from a discord.gg URL or ID."

msgid "If the invite is for a guild you have not joined, the guild and channel attributes of the returned :class:`.Invite` will be :class:`.PartialInviteGuild` and :class:`.PartialInviteChannel` respectively."
msgstr "If the invite is for a guild you have not joined, the guild and channel attributes of the returned :class:`.Invite` will be :class:`.PartialInviteGuild` and :class:`.PartialInviteChannel` respectively."

msgid "The Discord invite ID or URL (must be a discord.gg URL)."
msgstr "The Discord invite ID or URL (must be a discord.gg URL)."

msgid "Whether to include count information in the invite. This fills the :attr:`.Invite.approximate_member_count` and :attr:`.Invite.approximate_presence_count` fields."
msgstr "Whether to include count information in the invite. This fills the :attr:`.Invite.approximate_member_count` and :attr:`.Invite.approximate_presence_count` fields."

msgid "Whether to include the expiration date of the invite. This fills the :attr:`.Invite.expires_at` field.  .. versionadded:: 2.0"
msgstr "Whether to include the expiration date of the invite. This fills the :attr:`.Invite.expires_at` field.  .. versionadded:: 2.0"

msgid "Whether to include the expiration date of the invite. This fills the :attr:`.Invite.expires_at` field."
msgstr "Whether to include the expiration date of the invite. This fills the :attr:`.Invite.expires_at` field."

msgid "The ID of the scheduled event to be associated with the event.  See :meth:`Invite.set_scheduled_event` for more info on event invite linking.  .. versionadded:: 2.0"
msgstr "The ID of the scheduled event to be associated with the event.  See :meth:`Invite.set_scheduled_event` for more info on event invite linking.  .. versionadded:: 2.0"

msgid "The ID of the scheduled event to be associated with the event."
msgstr "The ID of the scheduled event to be associated with the event."

msgid "See :meth:`Invite.set_scheduled_event` for more info on event invite linking."
msgstr "See :meth:`Invite.set_scheduled_event` for more info on event invite linking."

msgid "The invite from the URL/ID."
msgstr "The invite from the URL/ID."

msgid ":class:`.Invite`"
msgstr ":class:`.Invite`"

msgid "The invite has expired or is invalid."
msgstr "The invite has expired or is invalid."

msgid "Getting the invite failed."
msgstr "Getting the invite failed."

msgid "Retrieves all available premium sticker packs."
msgstr "Retrieves all available premium sticker packs."

msgid "All available premium sticker packs."
msgstr "All available premium sticker packs."

msgid "List[:class:`.StickerPack`]"
msgstr "List[:class:`.StickerPack`]"

msgid "Retrieving the sticker packs failed."
msgstr "Retrieving the sticker packs failed."

msgid "Fetches the bot's role connection metadata records."
msgstr "Fetches the bot's role connection metadata records."

msgid "The bot's role connection metadata records."
msgstr "The bot's role connection metadata records."

msgid "List[:class:`.ApplicationRoleConnectionMetadata`]"
msgstr "List[:class:`.ApplicationRoleConnectionMetadata`]"

msgid "Fetches the bot's SKUs."
msgstr "Fetches the bot's SKUs."

msgid "The bot's SKUs."
msgstr "The bot's SKUs."

msgid "List[:class:`.SKU`]"
msgstr "List[:class:`.SKU`]"

msgid "Gets a :class:`.StageInstance` for a stage channel id."
msgstr "Gets a :class:`.StageInstance` for a stage channel id."

msgid "The stage channel ID."
msgstr "The stage channel ID."

msgid "The stage instance from the stage channel ID."
msgstr "The stage instance from the stage channel ID."

msgid ":class:`.StageInstance`"
msgstr ":class:`.StageInstance`"

msgid "The stage instance or channel could not be found."
msgstr "The stage instance or channel could not be found."

msgid "Getting the stage instance failed."
msgstr "Getting the stage instance failed."

msgid "Retrieves a :class:`.Sticker` with the specified ID."
msgstr "Retrieves a :class:`.Sticker` with the specified ID."

msgid "The sticker you requested."
msgstr "The sticker you requested."

msgid "Union[:class:`.StandardSticker`, :class:`.GuildSticker`]"
msgstr "Union[:class:`.StandardSticker`, :class:`.GuildSticker`]"

msgid "Retrieving the sticker failed."
msgstr "Retrieving the sticker failed."

msgid "Invalid sticker ID."
msgstr "Invalid sticker ID."

msgid "Gets a :class:`.Template` from a discord.new URL or code."
msgstr "Gets a :class:`.Template` from a discord.new URL or code."

msgid "The Discord Template Code or URL (must be a discord.new URL)."
msgstr "The Discord Template Code or URL (must be a discord.new URL)."

msgid "The template from the URL/code."
msgstr "The template from the URL/code."

msgid ":class:`.Template`"
msgstr ":class:`.Template`"

msgid "The template is invalid."
msgstr "The template is invalid."

msgid "Getting the template failed."
msgstr "Getting the template failed."

msgid "Retrieves a :class:`~discord.User` based on their ID. You do not have to share any guilds with the user to get this information, however many operations do require that you do."
msgstr "Retrieves a :class:`~discord.User` based on their ID. You do not have to share any guilds with the user to get this information, however many operations do require that you do."

msgid "This method is an API call. If you have :attr:`discord.Intents.members` and member cache enabled, consider :meth:`get_user` instead."
msgstr "This method is an API call. If you have :attr:`discord.Intents.members` and member cache enabled, consider :meth:`get_user` instead."

msgid "The user's ID to fetch from."
msgstr "The user's ID to fetch from."

msgid "The user you requested."
msgstr "The user you requested."

msgid ":class:`~discord.User`"
msgstr ":class:`~discord.User`"

msgid "A user with this ID does not exist."
msgstr "A user with this ID does not exist."

msgid "Fetching the user failed."
msgstr "Fetching the user failed."

msgid "Retrieves a :class:`.Webhook` with the specified ID."
msgstr "Retrieves a :class:`.Webhook` with the specified ID."

msgid "The webhook you requested."
msgstr "The webhook you requested."

msgid ":class:`.Webhook`"
msgstr ":class:`.Webhook`"

msgid "Retrieving the webhook failed."
msgstr "Retrieving the webhook failed."

msgid "Invalid webhook ID."
msgstr "Invalid webhook ID."

msgid "You do not have permission to fetch this webhook."
msgstr "You do not have permission to fetch this webhook."

msgid "Gets a :class:`.Widget` from a guild ID."
msgstr "Gets a :class:`.Widget` from a guild ID."

msgid "The guild must have the widget enabled to get this information."
msgstr "The guild must have the widget enabled to get this information."

msgid "The ID of the guild."
msgstr "The ID of the guild."

msgid "The guild's widget."
msgstr "The guild's widget."

msgid ":class:`.Widget`"
msgstr ":class:`.Widget`"

msgid "The widget for this guild is disabled."
msgstr "The widget for this guild is disabled."

msgid "Retrieving the widget failed."
msgstr "Retrieving the widget failed."

msgid "A generator that retrieves every :class:`.abc.GuildChannel` the client can 'access'."
msgstr "A generator that retrieves every :class:`.abc.GuildChannel` the client can 'access'."

msgid "This is equivalent to: ::"
msgstr "This is equivalent to: ::"

msgid "Just because you receive a :class:`.abc.GuildChannel` does not mean that you can communicate in said channel. :meth:`.abc.GuildChannel.permissions_for` should be used for that."
msgstr "Just because you receive a :class:`.abc.GuildChannel` does not mean that you can communicate in said channel. :meth:`.abc.GuildChannel.permissions_for` should be used for that."

msgid ":class:`.abc.GuildChannel` -- A channel the client can 'access'."
msgstr ":class:`.abc.GuildChannel` -- A channel the client can 'access'."

msgid "Returns a generator with every :class:`.Member` the client can see."
msgstr "Returns a generator with every :class:`.Member` the client can see."

msgid ":class:`.Member` -- A member the client can see."
msgstr ":class:`.Member` -- A member the client can see."

msgid "Get an :class:`.ApplicationCommand` from the internal list of commands."
msgstr "Get an :class:`.ApplicationCommand` from the internal list of commands."

msgid "The qualified name of the command to get."
msgstr "The qualified name of the command to get."

msgid "The guild ids associated to the command to get."
msgstr "The guild ids associated to the command to get."

msgid "The type of the command to get. Defaults to :class:`.ApplicationCommand`."
msgstr "The type of the command to get. Defaults to :class:`.ApplicationCommand`."

msgid "The command that was requested. If not found, returns ``None``."
msgstr "The command that was requested. If not found, returns ``None``."

msgid "Optional[:class:`.ApplicationCommand`]"
msgstr "Optional[:class:`.ApplicationCommand`]"

msgid "Returns the invocation context from the interaction."
msgstr "Returns the invocation context from the interaction."

msgid "This is a more low-level counter-part for :meth:`.process_application_commands` to allow users more fine-grained control over the processing."
msgstr "This is a more low-level counter-part for :meth:`.process_application_commands` to allow users more fine-grained control over the processing."

msgid "The interaction to get the invocation context from."
msgstr "The interaction to get the invocation context from."

msgid "The factory class that will be used to create the context. By default, this is :class:`.ApplicationContext`. Should a custom class be provided, it must be similar enough to :class:`.ApplicationContext`\\'s interface."
msgstr "The factory class that will be used to create the context. By default, this is :class:`.ApplicationContext`. Should a custom class be provided, it must be similar enough to :class:`.ApplicationContext`\\'s interface."

msgid "The invocation context. The type of this can change via the ``cls`` parameter."
msgstr "The invocation context. The type of this can change via the ``cls`` parameter."

msgid ":class:`.ApplicationContext`"
msgstr ":class:`.ApplicationContext`"

msgid "Returns the autocomplete context from the interaction."
msgstr "Returns the autocomplete context from the interaction."

msgid "The factory class that will be used to create the context. By default, this is :class:`.AutocompleteContext`. Should a custom class be provided, it must be similar enough to :class:`.AutocompleteContext`\\'s interface."
msgstr "The factory class that will be used to create the context. By default, this is :class:`.AutocompleteContext`. Should a custom class be provided, it must be similar enough to :class:`.AutocompleteContext`\\'s interface."

msgid "The autocomplete context. The type of this can change via the ``cls`` parameter."
msgstr "The autocomplete context. The type of this can change via the ``cls`` parameter."

msgid ":class:`.AutocompleteContext`"
msgstr ":class:`.AutocompleteContext`"

msgid "Returns a channel or thread with the given ID."
msgstr "Returns a channel or thread with the given ID."

msgid "The ID to search for."
msgstr "The ID to search for."

msgid "The returned channel or ``None`` if not found."
msgstr "The returned channel or ``None`` if not found."

msgid "Optional[Union[:class:`.abc.GuildChannel`, :class:`.Thread`, :class:`.abc.PrivateChannel`]]"
msgstr "Optional[Union[:class:`.abc.GuildChannel`, :class:`.Thread`, :class:`.abc.PrivateChannel`]]"

msgid "Gets the cog instance requested."
msgstr "Gets the cog instance requested."

msgid "If the cog is not found, ``None`` is returned instead."
msgstr "If the cog is not found, ``None`` is returned instead."

msgid "The name of the cog you are requesting. This is equivalent to the name passed via keyword argument in class creation or the class name if unspecified."
msgstr "The name of the cog you are requesting. This is equivalent to the name passed via keyword argument in class creation or the class name if unspecified."

msgid "The cog that was requested. If not found, returns ``None``."
msgstr "The cog that was requested. If not found, returns ``None``."

msgid "Optional[:class:`Cog`]"
msgstr "Optional[:class:`Cog`]"

msgid "Get a :class:`.Command` from the internal list of commands."
msgstr "Get a :class:`.Command` from the internal list of commands."

msgid "This could also be used as a way to get aliases."
msgstr "This could also be used as a way to get aliases."

msgid "The name could be fully qualified (e.g. ``'foo bar'``) will get the subcommand ``bar`` of the group command ``foo``. If a subcommand is not found then ``None`` is returned just as usual."
msgstr "The name could be fully qualified (e.g. ``'foo bar'``) will get the subcommand ``bar`` of the group command ``foo``. If a subcommand is not found then ``None`` is returned just as usual."

msgid "The name of the command to get."
msgstr "The name of the command to get."

msgid "Optional[:class:`Command`]"
msgstr "Optional[:class:`Command`]"

msgid "Returns the invocation context from the message."
msgstr "Returns the invocation context from the message."

msgid "This is a more low-level counter-part for :meth:`.process_commands` to allow users more fine-grained control over the processing."
msgstr "This is a more low-level counter-part for :meth:`.process_commands` to allow users more fine-grained control over the processing."

msgid "The returned context is not guaranteed to be a valid invocation context, :attr:`.Context.valid` must be checked to make sure it is. If the context is not valid then it is not a valid candidate to be invoked under :meth:`~.Bot.invoke`."
msgstr "The returned context is not guaranteed to be a valid invocation context, :attr:`.Context.valid` must be checked to make sure it is. If the context is not valid then it is not a valid candidate to be invoked under :meth:`~.Bot.invoke`."

msgid "The message to get the invocation context from."
msgstr "The message to get the invocation context from."

msgid "The factory class that will be used to create the context. By default, this is :class:`.Context`. Should a custom class be provided, it must be similar enough to :class:`.Context`\\'s interface."
msgstr "The factory class that will be used to create the context. By default, this is :class:`.Context`. Should a custom class be provided, it must be similar enough to :class:`.Context`\\'s interface."

msgid ":class:`.Context`"
msgstr ":class:`.Context`"

msgid "Gets the list of commands that are desynced from discord. If ``guild_id`` is specified, it will only return guild commands that are desynced from said guild, else it will return global commands."
msgstr "Gets the list of commands that are desynced from discord. If ``guild_id`` is specified, it will only return guild commands that are desynced from said guild, else it will return global commands."

msgid "This function is meant to be used internally, and should only be used if you want to override the default command registration behavior."
msgstr "This function is meant to be used internally, and should only be used if you want to override the default command registration behavior."

msgid "The guild id to get the desynced commands for, else global commands if unspecified."
msgstr "The guild id to get the desynced commands for, else global commands if unspecified."

msgid "If you already fetched the commands, you can pass them here to be used. Not recommended for typical usage."
msgstr "If you already fetched the commands, you can pass them here to be used. Not recommended for typical usage."

msgid "A list of the desynced commands. Each will come with at least the ``cmd`` and ``action`` keys, which respectively contain the command and the action to perform. Other keys may also be present depending on the action, including ``id``."
msgstr "A list of the desynced commands. Each will come with at least the ``cmd`` and ``action`` keys, which respectively contain the command and the action to perform. Other keys may also be present depending on the action, including ``id``."

msgid "List[Dict[:class:`str`, Any]]"
msgstr "List[Dict[:class:`str`, Any]]"

msgid "Returns an emoji with the given ID."
msgstr "Returns an emoji with the given ID."

msgid "The custom emoji or ``None`` if not found."
msgstr "The custom emoji or ``None`` if not found."

msgid "Optional[:class:`.Emoji`]"
msgstr "Optional[:class:`.Emoji`]"

msgid "Returns a guild with the given ID."
msgstr "Returns a guild with the given ID."

msgid "The guild or ``None`` if not found."
msgstr "The guild or ``None`` if not found."

msgid "Optional[:class:`.Guild`]"
msgstr "Optional[:class:`.Guild`]"

msgid "Returns a message the given ID."
msgstr "Returns a message the given ID."

msgid "This is useful if you have a message_id but don't want to do an API call to access the message."
msgstr "This is useful if you have a message_id but don't want to do an API call to access the message."

msgid "The returned message or ``None`` if not found."
msgstr "The returned message or ``None`` if not found."

msgid "Optional[:class:`.Message`]"
msgstr "Optional[:class:`.Message`]"

msgid "Looks up a user in the user cache or fetches if not found."
msgstr "Looks up a user in the user cache or fetches if not found."

msgid "The user or ``None`` if not found."
msgstr "The user or ``None`` if not found."

msgid "Optional[:class:`~discord.User`]"
msgstr "Optional[:class:`~discord.User`]"

msgid "Returns a partial messageable with the given channel ID."
msgstr "Returns a partial messageable with the given channel ID."

msgid "This is useful if you have a channel_id but don't want to do an API call to send messages to it."
msgstr "This is useful if you have a channel_id but don't want to do an API call to send messages to it."

msgid "The channel ID to create a partial messageable for."
msgstr "The channel ID to create a partial messageable for."

msgid "The underlying channel type for the partial messageable."
msgstr "The underlying channel type for the partial messageable."

msgid "The partial messageable"
msgstr "The partial messageable"

msgid ":class:`.PartialMessageable`"
msgstr ":class:`.PartialMessageable`"

msgid "Returns a poll attached to the given message ID."
msgstr "Returns a poll attached to the given message ID."

msgid "The message ID of the poll to search for."
msgstr "The message ID of the poll to search for."

msgid "The poll or ``None`` if not found."
msgstr "The poll or ``None`` if not found."

msgid "Optional[:class:`.Poll`]"
msgstr "Optional[:class:`.Poll`]"

msgid "Retrieves the prefix the bot is listening to with the message as a context."
msgstr "Retrieves the prefix the bot is listening to with the message as a context."

msgid "The message context to get the prefix of."
msgstr "The message context to get the prefix of."

msgid "A list of prefixes or a single prefix that the bot is listening for."
msgstr "A list of prefixes or a single prefix that the bot is listening for."

msgid "Union[List[:class:`str`], :class:`str`]"
msgstr "Union[List[:class:`str`], :class:`str`]"

msgid "Returns a stage instance with the given stage channel ID."
msgstr "Returns a stage instance with the given stage channel ID."

msgid "The stage instance or ``None`` if not found."
msgstr "The stage instance or ``None`` if not found."

msgid "Optional[:class:`.StageInstance`]"
msgstr "Optional[:class:`.StageInstance`]"

msgid "Returns a guild sticker with the given ID."
msgstr "Returns a guild sticker with the given ID."

msgid "To retrieve standard stickers, use :meth:`.fetch_sticker`. or :meth:`.fetch_premium_sticker_packs`."
msgstr "To retrieve standard stickers, use :meth:`.fetch_sticker`. or :meth:`.fetch_premium_sticker_packs`."

msgid "The sticker or ``None`` if not found."
msgstr "The sticker or ``None`` if not found."

msgid "Optional[:class:`.GuildSticker`]"
msgstr "Optional[:class:`.GuildSticker`]"

msgid "Returns a user with the given ID."
msgstr "Returns a user with the given ID."

msgid "The guilds that the connected client is a member of."
msgstr "The guilds that the connected client is a member of."

msgid "The intents configured for this connection."
msgstr "The intents configured for this connection."

msgid "Invokes the command given under the invocation context and handles all the internal event dispatch mechanisms."
msgstr "Invokes the command given under the invocation context and handles all the internal event dispatch mechanisms."

msgid "The invocation context to invoke."
msgstr "The invocation context to invoke."

msgid "Invokes the application command given under the invocation context and handles all the internal event dispatch mechanisms."
msgstr "Invokes the application command given under the invocation context and handles all the internal event dispatch mechanisms."

msgid "Indicates if the WebSocket connection is closed."
msgstr "Indicates if the WebSocket connection is closed."

msgid ":sphinx_autodoc_typehints_type:`\\:py\\:class\\:\\`bool\\``"
msgstr ":sphinx_autodoc_typehints_type:`\\:py\\:class\\:\\`bool\\``"

msgid "Checks if a :class:`~discord.User` or :class:`~discord.Member` is the owner of this bot."
msgstr "Checks if a :class:`~discord.User` or :class:`~discord.Member` is the owner of this bot."

msgid "If an :attr:`owner_id` is not set, it is fetched automatically through the use of :meth:`~.Bot.application_info`."
msgstr "If an :attr:`owner_id` is not set, it is fetched automatically through the use of :meth:`~.Bot.application_info`."

msgid "The function also checks if the application is team-owned if :attr:`owner_ids` is not set."
msgstr "The function also checks if the application is team-owned if :attr:`owner_ids` is not set."

msgid "The user to check for."
msgstr "The user to check for."

msgid "Whether the user is the owner."
msgstr "Whether the user is the owner."

msgid "Specifies if the client's internal cache is ready for use."
msgstr "Specifies if the client's internal cache is ready for use."

msgid "Whether the WebSocket is currently rate limited."
msgstr "Whether the WebSocket is currently rate limited."

msgid "This can be useful to know when deciding whether you should query members using HTTP or via the gateway. :rtype: :sphinx_autodoc_typehints_type:`\\:py\\:class\\:\\`bool\\``"
msgstr "This can be useful to know when deciding whether you should query members using HTTP or via the gateway. :rtype: :sphinx_autodoc_typehints_type:`\\:py\\:class\\:\\`bool\\``"

msgid "Measures latency between a HEARTBEAT and a HEARTBEAT_ACK in seconds."
msgstr "Measures latency between a HEARTBEAT and a HEARTBEAT_ACK in seconds."

msgid "This could be referred to as the Discord WebSocket protocol latency."
msgstr "This could be referred to as the Discord WebSocket protocol latency."

msgid "Loads an extension."
msgstr "Loads an extension."

msgid "An extension is a python module that contains commands, cogs, or listeners."
msgstr "An extension is a python module that contains commands, cogs, or listeners."

msgid "An extension must have a global function, ``setup`` defined as the entry point on what to do when the extension is loaded. This entry point must have a single argument, the ``bot``."
msgstr "An extension must have a global function, ``setup`` defined as the entry point on what to do when the extension is loaded. This entry point must have a single argument, the ``bot``."

msgid "The extension passed can either be the direct name of a file within the current working directory or a folder that contains multiple extensions."
msgstr "The extension passed can either be the direct name of a file within the current working directory or a folder that contains multiple extensions."

msgid "The extension or folder name to load. It must be dot separated like regular Python imports if accessing a submodule. e.g. ``foo.test`` if you want to import ``foo/test.py``."
msgstr "The extension or folder name to load. It must be dot separated like regular Python imports if accessing a submodule. e.g. ``foo.test`` if you want to import ``foo/test.py``."

msgid "The package name to resolve relative imports with. This is required when loading an extension using a relative path, e.g ``.foo.test``. Defaults to ``None``.  .. versionadded:: 1.7"
msgstr "The package name to resolve relative imports with. This is required when loading an extension using a relative path, e.g ``.foo.test``. Defaults to ``None``.  .. versionadded:: 1.7"

msgid "The package name to resolve relative imports with. This is required when loading an extension using a relative path, e.g ``.foo.test``. Defaults to ``None``."
msgstr "The package name to resolve relative imports with. This is required when loading an extension using a relative path, e.g ``.foo.test``. Defaults to ``None``."

msgid "If subdirectories under the given head directory should be recursively loaded. Defaults to ``False``.  .. versionadded:: 2.0"
msgstr "If subdirectories under the given head directory should be recursively loaded. Defaults to ``False``.  .. versionadded:: 2.0"

msgid "If subdirectories under the given head directory should be recursively loaded. Defaults to ``False``."
msgstr "If subdirectories under the given head directory should be recursively loaded. Defaults to ``False``."

msgid "If exceptions should be stored or raised. If set to ``True``, all exceptions encountered will be stored in a returned dictionary as a load status. If set to ``False``, if any exceptions are encountered they will be raised and the bot will be closed. If no exceptions are encountered, a list of loaded extension names will be returned. Defaults to ``False``.  .. versionadded:: 2.0"
msgstr "If exceptions should be stored or raised. If set to ``True``, all exceptions encountered will be stored in a returned dictionary as a load status. If set to ``False``, if any exceptions are encountered they will be raised and the bot will be closed. If no exceptions are encountered, a list of loaded extension names will be returned. Defaults to ``False``.  .. versionadded:: 2.0"

msgid "If exceptions should be stored or raised. If set to ``True``, all exceptions encountered will be stored in a returned dictionary as a load status. If set to ``False``, if any exceptions are encountered they will be raised and the bot will be closed. If no exceptions are encountered, a list of loaded extension names will be returned. Defaults to ``False``."
msgstr "If exceptions should be stored or raised. If set to ``True``, all exceptions encountered will be stored in a returned dictionary as a load status. If set to ``False``, if any exceptions are encountered they will be raised and the bot will be closed. If no exceptions are encountered, a list of loaded extension names will be returned. Defaults to ``False``."

msgid "If the store parameter is set to ``True``, a dictionary will be returned that contains keys to represent the loaded extension names. The values bound to each key can either be an exception that occurred when loading that extension or a ``True`` boolean representing a successful load. If the store parameter is set to ``False``, either a list containing a list of loaded extensions or nothing due to an encountered exception."
msgstr "If the store parameter is set to ``True``, a dictionary will be returned that contains keys to represent the loaded extension names. The values bound to each key can either be an exception that occurred when loading that extension or a ``True`` boolean representing a successful load. If the store parameter is set to ``False``, either a list containing a list of loaded extensions or nothing due to an encountered exception."

msgid "Optional[Union[Dict[:class:`str`, Union[:exc:`errors.ExtensionError`, :class:`bool`]], List[:class:`str`]]]"
msgstr "Optional[Union[Dict[:class:`str`, Union[:exc:`errors.ExtensionError`, :class:`bool`]], List[:class:`str`]]]"

msgid "The extension could not be imported.     This is also raised if the name of the extension could not     be resolved using the provided ``package`` parameter."
msgstr "The extension could not be imported.     This is also raised if the name of the extension could not     be resolved using the provided ``package`` parameter."

msgid "The extension is already loaded."
msgstr "The extension is already loaded."

msgid "The extension does not have a setup function."
msgstr "The extension does not have a setup function."

msgid "The extension or its setup function had an execution error."
msgstr "The extension or its setup function had an execution error."

msgid "Loads multiple extensions at once."
msgstr "Loads multiple extensions at once."

msgid "This method simplifies the process of loading multiple extensions by handling the looping of ``load_extension``."
msgstr "This method simplifies the process of loading multiple extensions by handling the looping of ``load_extension``."

msgid "The extension or folder names to load. It must be dot separated like regular Python imports if accessing a submodule. e.g. ``foo.test`` if you want to import ``foo/test.py``."
msgstr "The extension or folder names to load. It must be dot separated like regular Python imports if accessing a submodule. e.g. ``foo.test`` if you want to import ``foo/test.py``."

msgid "If the store parameter is set to ``True``, a dictionary will be returned that contains keys to represent the loaded extension names. The values bound to each key can either be an exception that occurred when loading that extension or a ``True`` boolean representing a successful load. If the store parameter is set to ``False``, either a list containing names of loaded extensions or nothing due to an encountered exception."
msgstr "If the store parameter is set to ``True``, a dictionary will be returned that contains keys to represent the loaded extension names. The values bound to each key can either be an exception that occurred when loading that extension or a ``True`` boolean representing a successful load. If the store parameter is set to ``False``, either a list containing names of loaded extensions or nothing due to an encountered exception."

msgid "A given extension could not be imported.     This is also raised if the name of the extension could not     be resolved using the provided ``package`` parameter."
msgstr "A given extension could not be imported.     This is also raised if the name of the extension could not     be resolved using the provided ``package`` parameter."

msgid "A given extension is already loaded."
msgstr "A given extension is already loaded."

msgid "A given extension does not have a setup function."
msgstr "A given extension does not have a setup function."

msgid "A given extension or its setup function had an execution error."
msgstr "A given extension or its setup function had an execution error."

msgid "Logs in the client with the specified credentials."
msgstr "Logs in the client with the specified credentials."

msgid "The authentication token. Do not prefix this token with anything as the library will do it for you."
msgstr "The authentication token. Do not prefix this token with anything as the library will do it for you."

msgid "The token was in invalid type."
msgstr "The token was in invalid type."

msgid "The wrong credentials are passed."
msgstr "The wrong credentials are passed."

msgid "An unknown HTTP related error occurred,     usually when it isn't 200 or the known incorrect credentials     passing status code."
msgstr "An unknown HTTP related error occurred,     usually when it isn't 200 or the known incorrect credentials     passing status code."

msgid "A shortcut decorator that invokes :func:`command` and adds it to the internal command list via :meth:`add_application_command`. This shortcut is made specifically for :class:`.MessageCommand`."
msgstr "A shortcut decorator that invokes :func:`command` and adds it to the internal command list via :meth:`add_application_command`. This shortcut is made specifically for :class:`.MessageCommand`."

msgid "A decorator that converts the provided method into a :class:`.MessageCommand`, adds it to the bot, then returns it."
msgstr "A decorator that converts the provided method into a :class:`.MessageCommand`, adds it to the bot, then returns it."

msgid "Callable[..., :class:`MessageCommand`]"
msgstr "Callable[..., :class:`MessageCommand`]"

msgid "The default command error handler provided by the bot."
msgstr "The default command error handler provided by the bot."

msgid "By default, this prints to :data:`sys.stderr` however it could be overridden to have a different implementation."
msgstr "By default, this prints to :data:`sys.stderr` however it could be overridden to have a different implementation."

msgid "This only fires if you do not specify any listeners for command error."
msgstr "This only fires if you do not specify any listeners for command error."

msgid "The default error handler provided by the client."
msgstr "The default error handler provided by the client."

msgid "By default, this prints to :data:`sys.stderr` however it could be overridden to have a different implementation. Check :func:`~discord.on_error` for more details."
msgstr "By default, this prints to :data:`sys.stderr` however it could be overridden to have a different implementation. Check :func:`~discord.on_error` for more details."

msgid "A sequence of persistent views added to the client."
msgstr "A sequence of persistent views added to the client."

msgid "The polls that the connected client has."
msgstr "The polls that the connected client has."

msgid "The private channels that the connected client is participating on."
msgstr "The private channels that the connected client is participating on."

msgid "This returns only up to 128 most recent private channels due to an internal working on how Discord deals with private channels."
msgstr "This returns only up to 128 most recent private channels due to an internal working on how Discord deals with private channels."

msgid "This function processes the commands that have been registered to the bot and other groups. Without this coroutine, none of the commands will be triggered."
msgstr "This function processes the commands that have been registered to the bot and other groups. Without this coroutine, none of the commands will be triggered."

msgid "By default, this coroutine is called inside the :func:`.on_interaction` event. If you choose to override the :func:`.on_interaction` event, then you should invoke this coroutine as well."
msgstr "By default, this coroutine is called inside the :func:`.on_interaction` event. If you choose to override the :func:`.on_interaction` event, then you should invoke this coroutine as well."

msgid "This function finds a registered command matching the interaction id from application commands and invokes it. If no matching command was found, it replies to the interaction with a default message."
msgstr "This function finds a registered command matching the interaction id from application commands and invokes it. If no matching command was found, it replies to the interaction with a default message."

msgid "The interaction to process"
msgstr "The interaction to process"

msgid "Whether to automatically sync and unregister the command if it is not found in the internal cache. This will invoke the :meth:`~.Bot.sync_commands` method on the context of the command, either globally or per-guild, based on the type of the command, respectively. Defaults to :attr:`.Bot.auto_sync_commands`."
msgstr "Whether to automatically sync and unregister the command if it is not found in the internal cache. This will invoke the :meth:`~.Bot.sync_commands` method on the context of the command, either globally or per-guild, based on the type of the command, respectively. Defaults to :attr:`.Bot.auto_sync_commands`."

msgid "By default, this coroutine is called inside the :func:`.on_message` event. If you choose to override the :func:`.on_message` event, then you should invoke this coroutine as well."
msgstr "By default, this coroutine is called inside the :func:`.on_message` event. If you choose to override the :func:`.on_message` event, then you should invoke this coroutine as well."

msgid "This is built using other low level tools, and is equivalent to a call to :meth:`~.Bot.get_context` followed by a call to :meth:`~.Bot.invoke`."
msgstr "This is built using other low level tools, and is equivalent to a call to :meth:`~.Bot.get_context` followed by a call to :meth:`~.Bot.invoke`."

msgid "This also checks if the message's author is a bot and doesn't call :meth:`~.Bot.get_context` or :meth:`~.Bot.invoke` if so."
msgstr "This also checks if the message's author is a bot and doesn't call :meth:`~.Bot.get_context` or :meth:`~.Bot.invoke` if so."

msgid "The message to process commands for."
msgstr "The message to process commands for."

msgid "Registers a command. If the command has ``guild_ids`` set, or if the ``guild_ids`` parameter is passed, the command will be registered as a guild command for those guilds."
msgstr "Registers a command. If the command has ``guild_ids`` set, or if the ``guild_ids`` parameter is passed, the command will be registered as a guild command for those guilds."

msgid "The command to register."
msgstr "The command to register."

msgid "Whether to force the command to be registered. If this is set to False, the command will only be registered if it seems to already be registered and up to date with our internal cache. Defaults to True."
msgstr "Whether to force the command to be registered. If this is set to False, the command will only be registered if it seems to already be registered and up to date with our internal cache. Defaults to True."

msgid "A list of guild ids to register the command for. If this is not set, the command's :attr:`ApplicationCommand.guild_ids` attribute will be used."
msgstr "A list of guild ids to register the command for. If this is not set, the command's :attr:`ApplicationCommand.guild_ids` attribute will be used."

msgid "The command that was registered"
msgstr "The command that was registered"

msgid ":class:`~.ApplicationCommand`"
msgstr ":class:`~.ApplicationCommand`"

msgid "Register a list of commands."
msgstr "Register a list of commands."

msgid "A list of commands to register. If this is not set (``None``), then all commands will be registered."
msgstr "A list of commands to register. If this is not set (``None``), then all commands will be registered."

msgid "If this is set, the commands will be registered as a guild command for the respective guild. If it is not set, the commands will be registered according to their :attr:`ApplicationCommand.guild_ids` attribute."
msgstr "If this is set, the commands will be registered as a guild command for the respective guild. If it is not set, the commands will be registered according to their :attr:`ApplicationCommand.guild_ids` attribute."

msgid "The method to use when registering the commands. If this is set to \"individual\", then each command will be registered individually. If this is set to \"bulk\", then all commands will be registered in bulk. If this is set to \"auto\", then the method will be determined automatically. Defaults to \"bulk\"."
msgstr "The method to use when registering the commands. If this is set to \"individual\", then each command will be registered individually. If this is set to \"bulk\", then all commands will be registered in bulk. If this is set to \"auto\", then the method will be determined automatically. Defaults to \"bulk\"."

msgid "Registers the commands regardless of the state of the command on Discord. This uses one less API call, but can result in hitting rate limits more often. Defaults to False."
msgstr "Registers the commands regardless of the state of the command on Discord. This uses one less API call, but can result in hitting rate limits more often. Defaults to False."

msgid "Whether to delete existing commands that are not in the list of commands to register. Defaults to True."
msgstr "Whether to delete existing commands that are not in the list of commands to register. Defaults to True."

msgid ":sphinx_autodoc_typehints_type:`\\:py\\:class\\:\\`list\\`\\\\ \\\\\\[\\:py\\:class\\:\\`\\~discord.types.interactions.ApplicationCommand\\`\\]`"
msgstr ":sphinx_autodoc_typehints_type:`\\:py\\:class\\:\\`list\\`\\\\ \\\\\\[\\:py\\:class\\:\\`\\~discord.types.interactions.ApplicationCommand\\`\\]`"

msgid "Atomically reloads an extension."
msgstr "Atomically reloads an extension."

msgid "This replaces the extension with the same extension, only refreshed. This is equivalent to a :meth:`unload_extension` followed by a :meth:`load_extension` except done in an atomic way. That is, if an operation fails mid-reload then the bot will roll back to the prior working state."
msgstr "This replaces the extension with the same extension, only refreshed. This is equivalent to a :meth:`unload_extension` followed by a :meth:`load_extension` except done in an atomic way. That is, if an operation fails mid-reload then the bot will roll back to the prior working state."

msgid "The extension name to reload. It must be dot separated like regular Python imports if accessing a submodule. e.g. ``foo.test`` if you want to import ``foo/test.py``."
msgstr "The extension name to reload. It must be dot separated like regular Python imports if accessing a submodule. e.g. ``foo.test`` if you want to import ``foo/test.py``."

msgid "The package name to resolve relative imports with. This is required when reloading an extension using a relative path, e.g ``.foo.test``. Defaults to ``None``.  .. versionadded:: 1.7"
msgstr "The package name to resolve relative imports with. This is required when reloading an extension using a relative path, e.g ``.foo.test``. Defaults to ``None``.  .. versionadded:: 1.7"

msgid "The package name to resolve relative imports with. This is required when reloading an extension using a relative path, e.g ``.foo.test``. Defaults to ``None``."
msgstr "The package name to resolve relative imports with. This is required when reloading an extension using a relative path, e.g ``.foo.test``. Defaults to ``None``."

msgid "The extension was not loaded."
msgstr "The extension was not loaded."

msgid "The extension setup function had an execution error."
msgstr "The extension setup function had an execution error."

msgid "Remove an :class:`.ApplicationCommand` from the internal list of commands."
msgstr "Remove an :class:`.ApplicationCommand` from the internal list of commands."

msgid "The command to remove."
msgstr "The command to remove."

msgid "The command that was removed. If the command has not been added, ``None`` is returned instead."
msgstr "The command that was removed. If the command has not been added, ``None`` is returned instead."

msgid "Removes a global check from the bot. This function is idempotent and will not raise an exception if the function is not in the global checks."
msgstr "Removes a global check from the bot. This function is idempotent and will not raise an exception if the function is not in the global checks."

msgid "The function to remove from the global checks."
msgstr "The function to remove from the global checks."

msgid "If the function was added with ``call_once=True`` in the :meth:`.Bot.add_check` call or using :meth:`.check_once`."
msgstr "If the function was added with ``call_once=True`` in the :meth:`.Bot.add_check` call or using :meth:`.check_once`."

msgid "Removes a cog from the bot and returns it."
msgstr "Removes a cog from the bot and returns it."

msgid "All registered commands and event listeners that the cog has registered will be removed as well."
msgstr "All registered commands and event listeners that the cog has registered will be removed as well."

msgid "If no cog is found then this method has no effect."
msgstr "If no cog is found then this method has no effect."

msgid "The name of the cog to remove."
msgstr "The name of the cog to remove."

msgid "The cog that was removed. ``None`` if not found."
msgstr "The cog that was removed. ``None`` if not found."

msgid "Optional[:class:`.Cog`]"
msgstr "Optional[:class:`.Cog`]"

msgid "Remove a :class:`.Command` from the internal list of commands."
msgstr "Remove a :class:`.Command` from the internal list of commands."

msgid "This could also be used as a way to remove aliases."
msgstr "This could also be used as a way to remove aliases."

msgid "The name of the command to remove."
msgstr "The name of the command to remove."

msgid "The command that was removed. If the name is not valid then ``None`` is returned instead."
msgstr "The command that was removed. If the name is not valid then ``None`` is returned instead."

msgid "Optional[:class:`.Command`]"
msgstr "Optional[:class:`.Command`]"

msgid "Removes a listener from the pool of listeners."
msgstr "Removes a listener from the pool of listeners."

msgid "The function that was used as a listener to remove."
msgstr "The function that was used as a listener to remove."

msgid "The name of the event we want to remove. Defaults to ``func.__name__``."
msgstr "The name of the event we want to remove. Defaults to ``func.__name__``."

msgid "A blocking call that abstracts away the event loop initialisation from you."
msgstr "A blocking call that abstracts away the event loop initialisation from you."

msgid "If you want more control over the event loop then this function should not be used. Use :meth:`start` coroutine or :meth:`connect` + :meth:`login`."
msgstr "If you want more control over the event loop then this function should not be used. Use :meth:`start` coroutine or :meth:`connect` + :meth:`login`."

msgid "Roughly Equivalent to: ::"
msgstr "Roughly Equivalent to: ::"

msgid "This function must be the last function to call due to the fact that it is blocking. That means that registration of events or anything being called after this function call will not execute until it returns."
msgstr "This function must be the last function to call due to the fact that it is blocking. That means that registration of events or anything being called after this function call will not execute until it returns."

msgid "A shortcut decorator that invokes :func:`command` and adds it to the internal command list via :meth:`add_application_command`. This shortcut is made specifically for :class:`.SlashCommand`."
msgstr "A shortcut decorator that invokes :func:`command` and adds it to the internal command list via :meth:`add_application_command`. This shortcut is made specifically for :class:`.SlashCommand`."

msgid "A decorator that converts the provided method into a :class:`.SlashCommand`, adds it to the bot, then returns it."
msgstr "A decorator that converts the provided method into a :class:`.SlashCommand`, adds it to the bot, then returns it."

msgid "Callable[..., :class:`SlashCommand`]"
msgstr "Callable[..., :class:`SlashCommand`]"

msgid "A shortcut decorator that initializes the provided subclass of :class:`.SlashCommandGroup` and adds it to the internal command list via :meth:`add_application_command`."
msgstr "A shortcut decorator that initializes the provided subclass of :class:`.SlashCommandGroup` and adds it to the internal command list via :meth:`add_application_command`."

msgid "The name of the group to create. This will resolve to the name of the decorated class if ``None`` is passed."
msgstr "The name of the group to create. This will resolve to the name of the decorated class if ``None`` is passed."

msgid "A shorthand coroutine for :meth:`login` + :meth:`connect`."
msgstr "A shorthand coroutine for :meth:`login` + :meth:`connect`."

msgid "An unexpected keyword argument was received."
msgstr "An unexpected keyword argument was received."

msgid "The status being used upon logging on to Discord."
msgstr "The status being used upon logging on to Discord."

msgid "The stickers that the connected client has."
msgstr "The stickers that the connected client has."

msgid "The URL that leads to the application's store page for monetization."
msgstr "The URL that leads to the application's store page for monetization."

msgid ":class:`str`"
msgstr ":class:`str`"

msgid "Registers all commands that have been added through :meth:`.add_application_command`. This method cleans up all commands over the API and should sync them with the internal cache of commands. It attempts to register the commands in the most efficient way possible, unless ``force`` is set to ``True``, in which case it will always register all commands."
msgstr "Registers all commands that have been added through :meth:`.add_application_command`. This method cleans up all commands over the API and should sync them with the internal cache of commands. It attempts to register the commands in the most efficient way possible, unless ``force`` is set to ``True``, in which case it will always register all commands."

msgid "By default, this coroutine is called inside the :func:`.on_connect` event. If you choose to override the :func:`.on_connect` event, then you should invoke this coroutine as well such as the following:"
msgstr "By default, this coroutine is called inside the :func:`.on_connect` event. If you choose to override the :func:`.on_connect` event, then you should invoke this coroutine as well such as the following:"

msgid "If you remove all guild commands from a particular guild, the library may not be able to detect and update the commands accordingly, as it would have to individually check for each guild. To force the library to unregister a guild's commands, call this function with ``commands=[]`` and ``guild_ids=[guild_id]``."
msgstr "If you remove all guild commands from a particular guild, the library may not be able to detect and update the commands accordingly, as it would have to individually check for each guild. To force the library to unregister a guild's commands, call this function with ``commands=[]`` and ``guild_ids=[guild_id]``."

msgid "A list of commands to register. If this is not set (None), then all commands will be registered."
msgstr "A list of commands to register. If this is not set (None), then all commands will be registered."

msgid "A list of guild ids to register the commands for. If this is not set, the commands' :attr:`~.ApplicationCommand.guild_ids` attribute will be used."
msgstr "A list of guild ids to register the commands for. If this is not set, the commands' :attr:`~.ApplicationCommand.guild_ids` attribute will be used."

msgid "Whether to register guild commands. Defaults to True."
msgstr "Whether to register guild commands. Defaults to True."

msgid "A list of guilds ids to check for commands to unregister, since the bot would otherwise have to check all guilds. Unlike ``guild_ids``, this does not alter the commands' :attr:`~.ApplicationCommand.guild_ids` attribute, instead it adds the guild ids to a list of guilds to sync commands for. If ``register_guild_commands`` is set to False, then this parameter is ignored."
msgstr "A list of guilds ids to check for commands to unregister, since the bot would otherwise have to check all guilds. Unlike ``guild_ids``, this does not alter the commands' :attr:`~.ApplicationCommand.guild_ids` attribute, instead it adds the guild ids to a list of guilds to sync commands for. If ``register_guild_commands`` is set to False, then this parameter is ignored."

msgid "Unloads an extension."
msgstr "Unloads an extension."

msgid "When the extension is unloaded, all commands, listeners, and cogs are removed from the bot and the module is un-imported."
msgstr "When the extension is unloaded, all commands, listeners, and cogs are removed from the bot and the module is un-imported."

msgid "The extension can provide an optional global function, ``teardown``, to do miscellaneous clean-up if necessary. This function takes a single parameter, the ``bot``, similar to ``setup`` from :meth:`~.Bot.load_extension`."
msgstr "The extension can provide an optional global function, ``teardown``, to do miscellaneous clean-up if necessary. This function takes a single parameter, the ``bot``, similar to ``setup`` from :meth:`~.Bot.load_extension`."

msgid "The extension name to unload. It must be dot separated like regular Python imports if accessing a submodule. e.g. ``foo.test`` if you want to import ``foo/test.py``."
msgstr "The extension name to unload. It must be dot separated like regular Python imports if accessing a submodule. e.g. ``foo.test`` if you want to import ``foo/test.py``."

msgid "The package name to resolve relative imports with. This is required when unloading an extension using a relative path, e.g ``.foo.test``. Defaults to ``None``.  .. versionadded:: 1.7"
msgstr "The package name to resolve relative imports with. This is required when unloading an extension using a relative path, e.g ``.foo.test``. Defaults to ``None``.  .. versionadded:: 1.7"

msgid "The package name to resolve relative imports with. This is required when unloading an extension using a relative path, e.g ``.foo.test``. Defaults to ``None``."
msgstr "The package name to resolve relative imports with. This is required when unloading an extension using a relative path, e.g ``.foo.test``. Defaults to ``None``."

msgid "The name of the extension could not     be resolved using the provided ``package`` parameter."
msgstr "The name of the extension could not     be resolved using the provided ``package`` parameter."

msgid "Updates the bot's role connection metadata records."
msgstr "Updates the bot's role connection metadata records."

msgid "The new metadata records to send to Discord."
msgstr "The new metadata records to send to Discord."

msgid "The updated role connection metadata records."
msgstr "The updated role connection metadata records."

msgid "Represents the connected client. ``None`` if not logged in."
msgstr "Represents the connected client. ``None`` if not logged in."

msgid "A shortcut decorator that invokes :func:`command` and adds it to the internal command list via :meth:`add_application_command`. This shortcut is made specifically for :class:`.UserCommand`."
msgstr "A shortcut decorator that invokes :func:`command` and adds it to the internal command list via :meth:`add_application_command`. This shortcut is made specifically for :class:`.UserCommand`."

msgid "A decorator that converts the provided method into a :class:`.UserCommand`, adds it to the bot, then returns it."
msgstr "A decorator that converts the provided method into a :class:`.UserCommand`, adds it to the bot, then returns it."

msgid "Callable[..., :class:`UserCommand`]"
msgstr "Callable[..., :class:`UserCommand`]"

msgid "Returns a list of all the users the bot can see."
msgstr "Returns a list of all the users the bot can see."

msgid "Represents a list of voice connections."
msgstr "Represents a list of voice connections."

msgid "These are usually :class:`.VoiceClient` instances."
msgstr "These are usually :class:`.VoiceClient` instances."

msgid "Waits for a WebSocket event to be dispatched."
msgstr "Waits for a WebSocket event to be dispatched."

msgid "This could be used to wait for a user to reply to a message, or to react to a message, or to edit a message in a self-contained way."
msgstr "This could be used to wait for a user to reply to a message, or to react to a message, or to edit a message in a self-contained way."

msgid "The ``timeout`` parameter is passed onto :func:`asyncio.wait_for`. By default, it does not timeout. Note that this does propagate the :exc:`asyncio.TimeoutError` for you in case of timeout and is provided for ease of use."
msgstr "The ``timeout`` parameter is passed onto :func:`asyncio.wait_for`. By default, it does not timeout. Note that this does propagate the :exc:`asyncio.TimeoutError` for you in case of timeout and is provided for ease of use."

msgid "In case the event returns multiple arguments, a :class:`tuple` containing those arguments is returned instead. Please check the :ref:`documentation <discord-api-events>` for a list of events and their parameters."
msgstr "In case the event returns multiple arguments, a :class:`tuple` containing those arguments is returned instead. Please check the :ref:`documentation <discord-api-events>` for a list of events and their parameters."

msgid "This function returns the **first event that meets the requirements**."
msgstr "This function returns the **first event that meets the requirements**."

msgid "The event name, similar to the :ref:`event reference <discord-api-events>`, but without the ``on_`` prefix, to wait for."
msgstr "The event name, similar to the :ref:`event reference <discord-api-events>`, but without the ``on_`` prefix, to wait for."

msgid "A predicate to check what to wait for. The arguments must meet the parameters of the event being waited for."
msgstr "A predicate to check what to wait for. The arguments must meet the parameters of the event being waited for."

msgid "The number of seconds to wait before timing out and raising :exc:`asyncio.TimeoutError`."
msgstr "The number of seconds to wait before timing out and raising :exc:`asyncio.TimeoutError`."

msgid "Returns no arguments, a single argument, or a :class:`tuple` of multiple arguments that mirrors the parameters passed in the :ref:`event reference <discord-api-events>`."
msgstr "Returns no arguments, a single argument, or a :class:`tuple` of multiple arguments that mirrors the parameters passed in the :ref:`event reference <discord-api-events>`."

msgid "Raised if a timeout is provided and reached."
msgstr "Raised if a timeout is provided and reached."

msgid "Waiting for a user reply: ::"
msgstr "Waiting for a user reply: ::"

msgid "Waiting for a thumbs up reaction from the message author: ::"
msgstr "Waiting for a thumbs up reaction from the message author: ::"

msgid "Waits until the client's internal cache is all ready."
msgstr "Waits until the client's internal cache is all ready."

msgid "An iterator that recursively walks through all application commands and subcommands."
msgstr "An iterator that recursively walks through all application commands and subcommands."

msgid ":class:`.ApplicationCommand` -- An application command from the internal list of application commands."
msgstr ":class:`.ApplicationCommand` -- An application command from the internal list of application commands."

msgid "An iterator that recursively walks through all commands and subcommands."
msgstr "An iterator that recursively walks through all commands and subcommands."

msgid "Duplicates due to aliases are no longer returned"
msgstr "Duplicates due to aliases are no longer returned"

msgid "Union[:class:`.Command`, :class:`.Group`] -- A command or group from the internal list of commands."
msgstr "Union[:class:`.Command`, :class:`.Group`] -- A command or group from the internal list of commands."

msgid "AutoShardedBot"
msgstr "AutoShardedBot"

msgid "This is similar to :class:`.Bot` except that it is inherited from :class:`discord.AutoShardedBot` instead."
msgstr "This is similar to :class:`.Bot` except that it is inherited from :class:`discord.AutoShardedBot` instead."

msgid "Prefix Helpers"
msgstr "Prefix Helpers"

msgid "A callable that implements a command prefix equivalent to being mentioned."
msgstr "A callable that implements a command prefix equivalent to being mentioned."

msgid "These are meant to be passed into the :attr:`.Bot.command_prefix` attribute."
msgstr "These are meant to be passed into the :attr:`.Bot.command_prefix` attribute."

msgid ":sphinx_autodoc_typehints_type:`\\:py\\:class\\:\\`list\\`\\\\ \\\\\\[\\:py\\:class\\:\\`str\\`\\]`"
msgstr ":sphinx_autodoc_typehints_type:`\\:py\\:class\\:\\`list\\`\\\\ \\\\\\[\\:py\\:class\\:\\`str\\`\\]`"

msgid "A callable that implements when mentioned or other prefixes provided."
msgstr "A callable that implements when mentioned or other prefixes provided."

msgid ":func:`.when_mentioned`"
msgstr ":func:`.when_mentioned`"

msgid "This callable returns another callable, so if this is done inside a custom callable, you must call the returned callable, for example:"
msgstr "This callable returns another callable, so if this is done inside a custom callable, you must call the returned callable, for example:"

msgid ":sphinx_autodoc_typehints_type:`\\:py\\:data\\:\\`\\~typing.Callable\\`\\\\ \\\\\\[\\\\\\[\\:py\\:class\\:\\`\\~discord.ext.commands.bot.Bot\\` \\| \\:py\\:class\\:\\`\\~discord.ext.commands.bot.AutoShardedBot\\`\\, \\:py\\:class\\:\\`\\~discord.message.Message\\`\\]\\, \\:py\\:class\\:\\`list\\`\\\\ \\\\\\[\\:py\\:class\\:\\`str\\`\\]\\]`"
msgstr ":sphinx_autodoc_typehints_type:`\\:py\\:data\\:\\`\\~typing.Callable\\`\\\\ \\\\\\[\\\\\\[\\:py\\:class\\:\\`\\~discord.ext.commands.bot.Bot\\` \\| \\:py\\:class\\:\\`\\~discord.ext.commands.bot.AutoShardedBot\\`\\, \\:py\\:class\\:\\`\\~discord.message.Message\\`\\]\\, \\:py\\:class\\:\\`list\\`\\\\ \\\\\\[\\:py\\:class\\:\\`str\\`\\]\\]`"

msgid "Event Reference"
msgstr "Event Reference"

msgid "These events function similar to :ref:`the regular events <discord-api-events>`, except they are custom to the command extension module."
msgstr "These events function similar to :ref:`the regular events <discord-api-events>`, except they are custom to the command extension module."

msgid "An error handler that is called when an error is raised inside a command either through user input error, check failure, or an error in your own code."
msgstr "An error handler that is called when an error is raised inside a command either through user input error, check failure, or an error in your own code."

msgid "A default one is provided (:meth:`.Bot.on_command_error`)."
msgstr "A default one is provided (:meth:`.Bot.on_command_error`)."

msgid "The invocation context."
msgstr "The invocation context."

msgid "The error that was raised."
msgstr "The error that was raised."

msgid "An event that is called when a command is found and is about to be invoked."
msgstr "An event that is called when a command is found and is about to be invoked."

msgid "This event is called regardless of whether the command itself succeeds via error or completes."
msgstr "This event is called regardless of whether the command itself succeeds via error or completes."

msgid "An event that is called when a command has completed its invocation."
msgstr "An event that is called when a command has completed its invocation."

msgid "This event is called only if the command succeeded, i.e. all checks have passed and the user input it correctly."
msgstr "This event is called only if the command succeeded, i.e. all checks have passed and the user input it correctly."

msgid "Commands"
msgstr "Commands"

msgid "Decorators"
msgstr "Decorators"

msgid "A decorator that transforms a function into a :class:`.Command` or if called with :func:`.group`, :class:`.Group`."
msgstr "A decorator that transforms a function into a :class:`.Command` or if called with :func:`.group`, :class:`.Group`."

msgid "By default the ``help`` attribute is received automatically from the docstring of the function and is cleaned up with the use of ``inspect.cleandoc``. If the docstring is ``bytes``, then it is decoded into :class:`str` using utf-8 encoding."
msgstr "By default the ``help`` attribute is received automatically from the docstring of the function and is cleaned up with the use of ``inspect.cleandoc``. If the docstring is ``bytes``, then it is decoded into :class:`str` using utf-8 encoding."

msgid "All checks added using the :func:`.check` & co. decorators are added into the function. There is no way to supply your own checks through this decorator."
msgstr "All checks added using the :func:`.check` & co. decorators are added into the function. There is no way to supply your own checks through this decorator."

msgid "The name to create the command with. By default, this uses the function name unchanged."
msgstr "The name to create the command with. By default, this uses the function name unchanged."

msgid "The class to construct with. By default, this is :class:`.Command`. You usually do not change this."
msgstr "The class to construct with. By default, this is :class:`.Command`. You usually do not change this."

msgid "Keyword arguments to pass into the construction of the class denoted by ``cls``."
msgstr "Keyword arguments to pass into the construction of the class denoted by ``cls``."

msgid "If the function is not a coroutine or is already a command."
msgstr "If the function is not a coroutine or is already a command."

msgid ":sphinx_autodoc_typehints_type:`\\:py\\:data\\:\\`\\~typing.Callable\\`\\\\ \\\\\\[\\\\\\[\\:py\\:data\\:\\`\\~typing.Union\\`\\\\ \\\\\\[\\:py\\:data\\:\\`\\~typing.Callable\\`\\\\ \\\\\\[\\\\\\[\\:py\\:class\\:\\`\\~typing.Concatenate\\`\\\\ \\\\\\[\\:py\\:class\\:\\`\\~typing.TypeVar\\`\\\\ \\\\\\(\\`\\`ContextT\\`\\`\\, bound\\= Context\\)\\, \\:py\\:class\\:\\`\\~typing.ParamSpec\\`\\\\ \\\\\\(\\`\\`P\\`\\`\\, bound\\= \\:py\\:obj\\:\\`None\\`\\)\\]\\]\\, \\:py\\:class\\:\\`\\~typing.Coroutine\\`\\\\ \\\\\\[\\:py\\:data\\:\\`\\~typing.Any\\`\\, \\:py\\:data\\:\\`\\~typing.Any\\`\\, \\:py\\:data\\:\\`\\~typing.Any\\`\\]\\]\\, \\:py\\:data\\:\\`\\~typing.Callable\\`\\\\ \\\\\\[\\\\\\[\\:py\\:class\\:\\`\\~typing.Concatenate\\`\\\\ \\\\\\[\\:py\\:class\\:\\`\\~typing.TypeVar\\`\\\\ \\\\\\(\\`\\`CogT\\`\\`\\, bound\\= Cog\\)\\, \\:py\\:class\\:\\`\\~typing.TypeVar\\`\\\\ \\\\\\(\\`\\`ContextT\\`\\`\\, bound\\= Context\\)\\, \\:py\\:class\\:\\`\\~typing.ParamSpec\\`\\\\ \\\\\\(\\`\\`P\\`\\`\\, bound\\= \\:py\\:obj\\:\\`None\\`\\)\\]\\]\\, \\:py\\:class\\:\\`\\~typing.Coroutine\\`\\\\ \\\\\\[\\:py\\:data\\:\\`\\~typing.Any\\`\\, \\:py\\:data\\:\\`\\~typing.Any\\`\\, \\:py\\:class\\:\\`\\~typing.TypeVar\\`\\\\ \\\\\\(\\`\\`T\\`\\`\\)\\]\\]\\]\\]\\, \\:py\\:data\\:\\`\\~typing.Union\\`\\\\ \\\\\\[\\:py\\:class\\:\\`\\~discord.ext.commands.core.Command\\`\\\\ \\\\\\[\\:py\\:class\\:\\`\\~typing.TypeVar\\`\\\\ \\\\\\(\\`\\`CogT\\`\\`\\, bound\\= Cog\\)\\, \\:py\\:class\\:\\`\\~typing.ParamSpec\\`\\\\ \\\\\\(\\`\\`P\\`\\`\\, bound\\= \\:py\\:obj\\:\\`None\\`\\)\\, \\:py\\:class\\:\\`\\~typing.TypeVar\\`\\\\ \\\\\\(\\`\\`T\\`\\`\\)\\]\\, \\:py\\:class\\:\\`\\~typing.TypeVar\\`\\\\ \\\\\\(\\`\\`CommandT\\`\\`\\, bound\\= Command\\)\\]\\]`"
msgstr ":sphinx_autodoc_typehints_type:`\\:py\\:data\\:\\`\\~typing.Callable\\`\\\\ \\\\\\[\\\\\\[\\:py\\:data\\:\\`\\~typing.Union\\`\\\\ \\\\\\[\\:py\\:data\\:\\`\\~typing.Callable\\`\\\\ \\\\\\[\\\\\\[\\:py\\:class\\:\\`\\~typing.Concatenate\\`\\\\ \\\\\\[\\:py\\:class\\:\\`\\~typing.TypeVar\\`\\\\ \\\\\\(\\`\\`ContextT\\`\\`\\, bound\\= Context\\)\\, \\:py\\:class\\:\\`\\~typing.ParamSpec\\`\\\\ \\\\\\(\\`\\`P\\`\\`\\, bound\\= \\:py\\:obj\\:\\`None\\`\\)\\]\\]\\, \\:py\\:class\\:\\`\\~typing.Coroutine\\`\\\\ \\\\\\[\\:py\\:data\\:\\`\\~typing.Any\\`\\, \\:py\\:data\\:\\`\\~typing.Any\\`\\, \\:py\\:data\\:\\`\\~typing.Any\\`\\]\\]\\, \\:py\\:data\\:\\`\\~typing.Callable\\`\\\\ \\\\\\[\\\\\\[\\:py\\:class\\:\\`\\~typing.Concatenate\\`\\\\ \\\\\\[\\:py\\:class\\:\\`\\~typing.TypeVar\\`\\\\ \\\\\\(\\`\\`CogT\\`\\`\\, bound\\= Cog\\)\\, \\:py\\:class\\:\\`\\~typing.TypeVar\\`\\\\ \\\\\\(\\`\\`ContextT\\`\\`\\, bound\\= Context\\)\\, \\:py\\:class\\:\\`\\~typing.ParamSpec\\`\\\\ \\\\\\(\\`\\`P\\`\\`\\, bound\\= \\:py\\:obj\\:\\`None\\`\\)\\]\\]\\, \\:py\\:class\\:\\`\\~typing.Coroutine\\`\\\\ \\\\\\[\\:py\\:data\\:\\`\\~typing.Any\\`\\, \\:py\\:data\\:\\`\\~typing.Any\\`\\, \\:py\\:class\\:\\`\\~typing.TypeVar\\`\\\\ \\\\\\(\\`\\`T\\`\\`\\)\\]\\]\\]\\]\\, \\:py\\:data\\:\\`\\~typing.Union\\`\\\\ \\\\\\[\\:py\\:class\\:\\`\\~discord.ext.commands.core.Command\\`\\\\ \\\\\\[\\:py\\:class\\:\\`\\~typing.TypeVar\\`\\\\ \\\\\\(\\`\\`CogT\\`\\`\\, bound\\= Cog\\)\\, \\:py\\:class\\:\\`\\~typing.ParamSpec\\`\\\\ \\\\\\(\\`\\`P\\`\\`\\, bound\\= \\:py\\:obj\\:\\`None\\`\\)\\, \\:py\\:class\\:\\`\\~typing.TypeVar\\`\\\\ \\\\\\(\\`\\`T\\`\\`\\)\\]\\, \\:py\\:class\\:\\`\\~typing.TypeVar\\`\\\\ \\\\\\(\\`\\`CommandT\\`\\`\\, bound\\= Command\\)\\]\\]`"

msgid "A decorator that transforms a function into a :class:`.Group`."
msgstr "A decorator that transforms a function into a :class:`.Group`."

msgid "This is similar to the :func:`.command` decorator but the ``cls`` parameter is set to :class:`Group` by default."
msgstr "This is similar to the :func:`.command` decorator but the ``cls`` parameter is set to :class:`Group` by default."

msgid "The ``cls`` parameter can now be passed."
msgstr "The ``cls`` parameter can now be passed."

msgid ":sphinx_autodoc_typehints_type:`\\:py\\:data\\:\\`\\~typing.Callable\\`\\\\ \\\\\\[\\\\\\[\\:py\\:data\\:\\`\\~typing.Union\\`\\\\ \\\\\\[\\:py\\:data\\:\\`\\~typing.Callable\\`\\\\ \\\\\\[\\\\\\[\\:py\\:class\\:\\`\\~typing.Concatenate\\`\\\\ \\\\\\[\\:py\\:class\\:\\`\\~typing.TypeVar\\`\\\\ \\\\\\(\\`\\`ContextT\\`\\`\\, bound\\= Context\\)\\, \\:py\\:class\\:\\`\\~typing.ParamSpec\\`\\\\ \\\\\\(\\`\\`P\\`\\`\\, bound\\= \\:py\\:obj\\:\\`None\\`\\)\\]\\]\\, \\:py\\:class\\:\\`\\~typing.Coroutine\\`\\\\ \\\\\\[\\:py\\:data\\:\\`\\~typing.Any\\`\\, \\:py\\:data\\:\\`\\~typing.Any\\`\\, \\:py\\:data\\:\\`\\~typing.Any\\`\\]\\]\\, \\:py\\:data\\:\\`\\~typing.Callable\\`\\\\ \\\\\\[\\\\\\[\\:py\\:class\\:\\`\\~typing.Concatenate\\`\\\\ \\\\\\[\\:py\\:class\\:\\`\\~typing.TypeVar\\`\\\\ \\\\\\(\\`\\`CogT\\`\\`\\, bound\\= Cog\\)\\, \\:py\\:class\\:\\`\\~typing.TypeVar\\`\\\\ \\\\\\(\\`\\`ContextT\\`\\`\\, bound\\= Context\\)\\, \\:py\\:class\\:\\`\\~typing.ParamSpec\\`\\\\ \\\\\\(\\`\\`P\\`\\`\\, bound\\= \\:py\\:obj\\:\\`None\\`\\)\\]\\]\\, \\:py\\:class\\:\\`\\~typing.Coroutine\\`\\\\ \\\\\\[\\:py\\:data\\:\\`\\~typing.Any\\`\\, \\:py\\:data\\:\\`\\~typing.Any\\`\\, \\:py\\:class\\:\\`\\~typing.TypeVar\\`\\\\ \\\\\\(\\`\\`T\\`\\`\\)\\]\\]\\]\\]\\, \\:py\\:data\\:\\`\\~typing.Union\\`\\\\ \\\\\\[\\:py\\:class\\:\\`\\~discord.ext.commands.core.Group\\`\\\\ \\\\\\[\\:py\\:class\\:\\`\\~typing.TypeVar\\`\\\\ \\\\\\(\\`\\`CogT\\`\\`\\, bound\\= Cog\\)\\, \\:py\\:class\\:\\`\\~typing.ParamSpec\\`\\\\ \\\\\\(\\`\\`P\\`\\`\\, bound\\= \\:py\\:obj\\:\\`None\\`\\)\\, \\:py\\:class\\:\\`\\~typing.TypeVar\\`\\\\ \\\\\\(\\`\\`T\\`\\`\\)\\]\\, \\:py\\:class\\:\\`\\~typing.TypeVar\\`\\\\ \\\\\\(\\`\\`GroupT\\`\\`\\, bound\\= Group\\)\\]\\]`"
msgstr ":sphinx_autodoc_typehints_type:`\\:py\\:data\\:\\`\\~typing.Callable\\`\\\\ \\\\\\[\\\\\\[\\:py\\:data\\:\\`\\~typing.Union\\`\\\\ \\\\\\[\\:py\\:data\\:\\`\\~typing.Callable\\`\\\\ \\\\\\[\\\\\\[\\:py\\:class\\:\\`\\~typing.Concatenate\\`\\\\ \\\\\\[\\:py\\:class\\:\\`\\~typing.TypeVar\\`\\\\ \\\\\\(\\`\\`ContextT\\`\\`\\, bound\\= Context\\)\\, \\:py\\:class\\:\\`\\~typing.ParamSpec\\`\\\\ \\\\\\(\\`\\`P\\`\\`\\, bound\\= \\:py\\:obj\\:\\`None\\`\\)\\]\\]\\, \\:py\\:class\\:\\`\\~typing.Coroutine\\`\\\\ \\\\\\[\\:py\\:data\\:\\`\\~typing.Any\\`\\, \\:py\\:data\\:\\`\\~typing.Any\\`\\, \\:py\\:data\\:\\`\\~typing.Any\\`\\]\\]\\, \\:py\\:data\\:\\`\\~typing.Callable\\`\\\\ \\\\\\[\\\\\\[\\:py\\:class\\:\\`\\~typing.Concatenate\\`\\\\ \\\\\\[\\:py\\:class\\:\\`\\~typing.TypeVar\\`\\\\ \\\\\\(\\`\\`CogT\\`\\`\\, bound\\= Cog\\)\\, \\:py\\:class\\:\\`\\~typing.TypeVar\\`\\\\ \\\\\\(\\`\\`ContextT\\`\\`\\, bound\\= Context\\)\\, \\:py\\:class\\:\\`\\~typing.ParamSpec\\`\\\\ \\\\\\(\\`\\`P\\`\\`\\, bound\\= \\:py\\:obj\\:\\`None\\`\\)\\]\\]\\, \\:py\\:class\\:\\`\\~typing.Coroutine\\`\\\\ \\\\\\[\\:py\\:data\\:\\`\\~typing.Any\\`\\, \\:py\\:data\\:\\`\\~typing.Any\\`\\, \\:py\\:class\\:\\`\\~typing.TypeVar\\`\\\\ \\\\\\(\\`\\`T\\`\\`\\)\\]\\]\\]\\]\\, \\:py\\:data\\:\\`\\~typing.Union\\`\\\\ \\\\\\[\\:py\\:class\\:\\`\\~discord.ext.commands.core.Group\\`\\\\ \\\\\\[\\:py\\:class\\:\\`\\~typing.TypeVar\\`\\\\ \\\\\\(\\`\\`CogT\\`\\`\\, bound\\= Cog\\)\\, \\:py\\:class\\:\\`\\~typing.ParamSpec\\`\\\\ \\\\\\(\\`\\`P\\`\\`\\, bound\\= \\:py\\:obj\\:\\`None\\`\\)\\, \\:py\\:class\\:\\`\\~typing.TypeVar\\`\\\\ \\\\\\(\\`\\`T\\`\\`\\)\\]\\, \\:py\\:class\\:\\`\\~typing.TypeVar\\`\\\\ \\\\\\(\\`\\`GroupT\\`\\`\\, bound\\= Group\\)\\]\\]`"

msgid "Command"
msgstr "Command"

msgid "A class that implements the protocol for a bot text command."
msgstr "A class that implements the protocol for a bot text command."

msgid "These are not created manually, instead they are created via the decorator or functional interface."
msgstr "These are not created manually, instead they are created via the decorator or functional interface."

msgid "The name of the command."
msgstr "The name of the command."

msgid "The coroutine that is executed when the command is called."
msgstr "The coroutine that is executed when the command is called."

msgid ":ref:`coroutine <coroutine>`"
msgstr ":ref:`coroutine <coroutine>`"

msgid "The long help text for the command."
msgstr "The long help text for the command."

msgid "Optional[:class:`str`]"
msgstr "Optional[:class:`str`]"

msgid "The short help text for the command."
msgstr "The short help text for the command."

msgid "A replacement for arguments in the default help text."
msgstr "A replacement for arguments in the default help text."

msgid "The list of aliases the command can be invoked under."
msgstr "The list of aliases the command can be invoked under."

msgid "Union[List[:class:`str`], Tuple[:class:`str`]]"
msgstr "Union[List[:class:`str`], Tuple[:class:`str`]]"

msgid "A boolean that indicates if the command is currently enabled. If the command is invoked while it is disabled, then :exc:`.DisabledCommand` is raised to the :func:`.on_command_error` event. Defaults to ``True``."
msgstr "A boolean that indicates if the command is currently enabled. If the command is invoked while it is disabled, then :exc:`.DisabledCommand` is raised to the :func:`.on_command_error` event. Defaults to ``True``."

msgid "The parent group that this command belongs to. ``None`` if there isn't one."
msgstr "The parent group that this command belongs to. ``None`` if there isn't one."

msgid "Optional[:class:`Group`]"
msgstr "Optional[:class:`Group`]"

msgid "The cog that this command belongs to. ``None`` if there isn't one."
msgstr "The cog that this command belongs to. ``None`` if there isn't one."

msgid "A list of predicates that verifies if the command could be executed with the given :class:`.Context` as the sole parameter. If an exception is necessary to be thrown to signal failure, then one inherited from :exc:`.CommandError` should be used. Note that if the checks fail then :exc:`.CheckFailure` exception is raised to the :func:`.on_command_error` event."
msgstr "A list of predicates that verifies if the command could be executed with the given :class:`.Context` as the sole parameter. If an exception is necessary to be thrown to signal failure, then one inherited from :exc:`.CommandError` should be used. Note that if the checks fail then :exc:`.CheckFailure` exception is raised to the :func:`.on_command_error` event."

msgid "List[Callable[[:class:`.Context`], :class:`bool`]]"
msgstr "List[Callable[[:class:`.Context`], :class:`bool`]]"

msgid "The message prefixed into the default help command."
msgstr "The message prefixed into the default help command."

msgid "If ``True``\\, the default help command does not show this in the help output."
msgstr "If ``True``\\, the default help command does not show this in the help output."

msgid "If ``False`` and a keyword-only argument is provided then the keyword only argument is stripped and handled as if it was a regular argument that handles :exc:`.MissingRequiredArgument` and default values in a regular matter rather than passing the rest completely raw. If ``True`` then the keyword-only argument will pass in the rest of the arguments in a completely raw matter. Defaults to ``False``."
msgstr "If ``False`` and a keyword-only argument is provided then the keyword only argument is stripped and handled as if it was a regular argument that handles :exc:`.MissingRequiredArgument` and default values in a regular matter rather than passing the rest completely raw. If ``True`` then the keyword-only argument will pass in the rest of the arguments in a completely raw matter. Defaults to ``False``."

msgid "The subcommand that was invoked, if any."
msgstr "The subcommand that was invoked, if any."

msgid "If ``True`` and a variadic positional argument is specified, requires the user to specify at least one argument. Defaults to ``False``."
msgstr "If ``True`` and a variadic positional argument is specified, requires the user to specify at least one argument. Defaults to ``False``."

msgid "If ``True``\\, ignores extraneous strings passed to a command if all its requirements are met (e.g. ``?foo a b c`` when only expecting ``a`` and ``b``). Otherwise :func:`.on_command_error` and local error handlers are called with :exc:`.TooManyArguments`. Defaults to ``True``."
msgstr "If ``True``\\, ignores extraneous strings passed to a command if all its requirements are met (e.g. ``?foo a b c`` when only expecting ``a`` and ``b``). Otherwise :func:`.on_command_error` and local error handlers are called with :exc:`.TooManyArguments`. Defaults to ``True``."

msgid "If ``True``\\, cooldown processing is done after argument parsing, which calls converters. If ``False`` then cooldown processing is done first and then the converters are called second. Defaults to ``False``."
msgstr "If ``True``\\, cooldown processing is done after argument parsing, which calls converters. If ``False`` then cooldown processing is done first and then the converters are called second. Defaults to ``False``."

msgid "A dict of user provided extras to attach to the Command."
msgstr "A dict of user provided extras to attach to the Command."

msgid "This object may be copied by the library."
msgstr "This object may be copied by the library."

msgid ":class:`dict`"
msgstr ":class:`dict`"

msgid "cooldown: Optional[:class:`Cooldown`]"
msgstr "cooldown: Optional[:class:`Cooldown`]"

msgid "The cooldown applied when the command is invoked. ``None`` if the command doesn't have a cooldown."
msgstr "The cooldown applied when the command is invoked. ``None`` if the command doesn't have a cooldown."

msgid "A decorator that registers a coroutine as a post-invoke hook."
msgstr "A decorator that registers a coroutine as a post-invoke hook."

msgid "A post-invoke hook is called directly after the command is called. This makes it a useful function to clean-up database connections or any type of clean up required."
msgstr "A post-invoke hook is called directly after the command is called. This makes it a useful function to clean-up database connections or any type of clean up required."

msgid "This post-invoke hook takes a sole parameter, a :class:`.Context`."
msgstr "This post-invoke hook takes a sole parameter, a :class:`.Context`."

msgid "See :meth:`.Bot.after_invoke` for more info."
msgstr "See :meth:`.Bot.after_invoke` for more info."

msgid ":sphinx_autodoc_typehints_type:`\\:py\\:class\\:\\`\\~typing.TypeVar\\`\\\\ \\\\\\(\\`\\`HookT\\`\\`\\, bound\\= Hook\\)`"
msgstr ":sphinx_autodoc_typehints_type:`\\:py\\:class\\:\\`\\~typing.TypeVar\\`\\\\ \\\\\\(\\`\\`HookT\\`\\`\\, bound\\= Hook\\)`"

msgid "A decorator that registers a coroutine as a pre-invoke hook."
msgstr "A decorator that registers a coroutine as a pre-invoke hook."

msgid "A pre-invoke hook is called directly before the command is called. This makes it a useful function to set up database connections or any type of set up required."
msgstr "A pre-invoke hook is called directly before the command is called. This makes it a useful function to set up database connections or any type of set up required."

msgid "This pre-invoke hook takes a sole parameter, a :class:`.Context`."
msgstr "This pre-invoke hook takes a sole parameter, a :class:`.Context`."

msgid "See :meth:`.Bot.before_invoke` for more info."
msgstr "See :meth:`.Bot.before_invoke` for more info."

msgid "A decorator that registers a coroutine as a local error handler."
msgstr "A decorator that registers a coroutine as a local error handler."

msgid "A local error handler is an :func:`.on_command_error` event limited to a single command. However, the :func:`.on_command_error` is still invoked afterwards as the catch-all."
msgstr "A local error handler is an :func:`.on_command_error` event limited to a single command. However, the :func:`.on_command_error` is still invoked afterwards as the catch-all."

msgid "The coroutine to register as the local error handler."
msgstr "The coroutine to register as the local error handler."

msgid ":sphinx_autodoc_typehints_type:`\\:py\\:class\\:\\`\\~typing.TypeVar\\`\\\\ \\\\\\(\\`\\`ErrorT\\`\\`\\, bound\\= Error\\)`"
msgstr ":sphinx_autodoc_typehints_type:`\\:py\\:class\\:\\`\\~typing.TypeVar\\`\\\\ \\\\\\(\\`\\`ErrorT\\`\\`\\, bound\\= Error\\)`"

msgid "Adds a check to the command."
msgstr "Adds a check to the command."

msgid "This is the non-decorator interface to :func:`.check`."
msgstr "This is the non-decorator interface to :func:`.check`."

msgid "The function that will be used as a check."
msgstr "The function that will be used as a check."

msgid "Removes a check from the command."
msgstr "Removes a check from the command."

msgid "This function is idempotent and will not raise an exception if the function is not in the command's checks."
msgstr "This function is idempotent and will not raise an exception if the function is not in the command's checks."

msgid "The function to remove from the checks."
msgstr "The function to remove from the checks."

msgid "Updates :class:`Command` instance with updated attribute."
msgstr "Updates :class:`Command` instance with updated attribute."

msgid "This works similarly to the :func:`.command` decorator in terms of parameters in that they are passed to the :class:`Command` or subclass constructors, sans the name and callback."
msgstr "This works similarly to the :func:`.command` decorator in terms of parameters in that they are passed to the :class:`Command` or subclass constructors, sans the name and callback."

msgid "Calls the internal callback that the command holds."
msgstr "Calls the internal callback that the command holds."

msgid "This bypasses all mechanisms -- including checks, converters, invoke hooks, cooldowns, etc. You must take care to pass the proper arguments and types to this function."
msgstr "This bypasses all mechanisms -- including checks, converters, invoke hooks, cooldowns, etc. You must take care to pass the proper arguments and types to this function."

msgid ":sphinx_autodoc_typehints_type:`\\:py\\:class\\:\\`\\~typing.TypeVar\\`\\\\ \\\\\\(\\`\\`T\\`\\`\\)`"
msgstr ":sphinx_autodoc_typehints_type:`\\:py\\:class\\:\\`\\~typing.TypeVar\\`\\\\ \\\\\\(\\`\\`T\\`\\`\\)`"

msgid "Creates a copy of this command."
msgstr "Creates a copy of this command."

msgid "A new instance of this command."
msgstr "A new instance of this command."

msgid ":class:`Command`"
msgstr ":class:`Command`"

msgid "Dict[:class:`str`, :class:`inspect.Parameter`]: Retrieves the parameter dictionary without the context or self parameters."
msgstr "Dict[:class:`str`, :class:`inspect.Parameter`]: Retrieves the parameter dictionary without the context or self parameters."

msgid "Useful for inspecting signature."
msgstr "Useful for inspecting signature."

msgid "Retrieves the fully qualified parent command name."
msgstr "Retrieves the fully qualified parent command name."

msgid "This the base command name required to execute it. For example, in ``?one two three`` the parent name would be ``one two``."
msgstr "This the base command name required to execute it. For example, in ``?one two three`` the parent name would be ``one two``."

msgid "Retrieves the parents of this command."
msgstr "Retrieves the parents of this command."

msgid "If the command has no parents then it returns an empty :class:`list`."
msgstr "If the command has no parents then it returns an empty :class:`list`."

msgid "For example in commands ``?a b c test``, the parents are ``[c, b, a]``."
msgstr "For example in commands ``?a b c test``, the parents are ``[c, b, a]``."

msgid "Retrieves the root parent of this command."
msgstr "Retrieves the root parent of this command."

msgid "If the command has no parents then it returns ``None``."
msgstr "If the command has no parents then it returns ``None``."

msgid "For example in commands ``?a b c test``, the root parent is ``a``."
msgstr "For example in commands ``?a b c test``, the root parent is ``a``."

msgid "Retrieves the fully qualified command name."
msgstr "Retrieves the fully qualified command name."

msgid "This is the full parent name with the command name as well. For example, in ``?one two three`` the qualified name would be ``one two three``."
msgstr "This is the full parent name with the command name as well. For example, in ``?one two three`` the qualified name would be ``one two three``."

msgid "Checks whether the command is currently on cooldown."
msgstr "Checks whether the command is currently on cooldown."

msgid "The invocation context to use when checking the command's cooldown status."
msgstr "The invocation context to use when checking the command's cooldown status."

msgid "A boolean indicating if the command is on cooldown."
msgstr "A boolean indicating if the command is on cooldown."

msgid "Resets the cooldown on this command."
msgstr "Resets the cooldown on this command."

msgid "The invocation context to reset the cooldown under."
msgstr "The invocation context to reset the cooldown under."

msgid "Retrieves the amount of seconds before this command can be tried again."
msgstr "Retrieves the amount of seconds before this command can be tried again."

msgid "The invocation context to retrieve the cooldown from."
msgstr "The invocation context to retrieve the cooldown from."

msgid "The amount of time left on this command's cooldown in seconds. If this is ``0.0`` then the command isn't on cooldown."
msgstr "The amount of time left on this command's cooldown in seconds. If this is ``0.0`` then the command isn't on cooldown."

msgid ":class:`float`"
msgstr ":class:`float`"

msgid "Checks whether the command has an error handler registered. :rtype: :sphinx_autodoc_typehints_type:`\\:py\\:class\\:\\`bool\\``"
msgstr "Checks whether the command has an error handler registered. :rtype: :sphinx_autodoc_typehints_type:`\\:py\\:class\\:\\`bool\\``"

msgid "The name of the cog this command belongs to, if any."
msgstr "The name of the cog this command belongs to, if any."

msgid "Gets the \"short\" documentation of a command."
msgstr "Gets the \"short\" documentation of a command."

msgid "By default, this is the :attr:`.brief` attribute. If that lookup leads to an empty string then the first line of the :attr:`.help` attribute is used instead."
msgstr "By default, this is the :attr:`.brief` attribute. If that lookup leads to an empty string then the first line of the :attr:`.help` attribute is used instead."

msgid "Returns a POSIX-like signature useful for help command output."
msgstr "Returns a POSIX-like signature useful for help command output."

msgid "Checks if the command can be executed by checking all the predicates inside the :attr:`~Command.checks` attribute. This also checks whether the command is disabled."
msgstr "Checks if the command can be executed by checking all the predicates inside the :attr:`~Command.checks` attribute. This also checks whether the command is disabled."

msgid "Checks whether the command is disabled or not"
msgstr "Checks whether the command is disabled or not"

msgid "The ctx of the command currently being invoked."
msgstr "The ctx of the command currently being invoked."

msgid "A boolean indicating if the command can be invoked."
msgstr "A boolean indicating if the command can be invoked."

msgid "Any command error that was raised during a check call will be propagated     by this function."
msgstr "Any command error that was raised during a check call will be propagated     by this function."

msgid "Group"
msgstr "Group"

msgid "A class that implements a grouping protocol for commands to be executed as subcommands."
msgstr "A class that implements a grouping protocol for commands to be executed as subcommands."

msgid "This class is a subclass of :class:`.Command` and thus all options valid in :class:`.Command` are valid in here as well."
msgstr "This class is a subclass of :class:`.Command` and thus all options valid in :class:`.Command` are valid in here as well."

msgid "Indicates if the group callback should begin parsing and invocation only if no subcommand was found. Useful for making it an error handling function to tell the user that no subcommand was found or to have different functionality in case no subcommand was found. If this is ``False``, then the group callback will always be invoked first. This means that the checks and the parsing dictated by its parameters will be executed. Defaults to ``False``."
msgstr "Indicates if the group callback should begin parsing and invocation only if no subcommand was found. Useful for making it an error handling function to tell the user that no subcommand was found or to have different functionality in case no subcommand was found. If this is ``False``, then the group callback will always be invoked first. This means that the checks and the parsing dictated by its parameters will be executed. Defaults to ``False``."

msgid "Indicates if the group's commands should be case-insensitive. Defaults to ``False``."
msgstr "Indicates if the group's commands should be case-insensitive. Defaults to ``False``."

msgid "Creates a copy of this :class:`Group`."
msgstr "Creates a copy of this :class:`Group`."

msgid "A new instance of this group."
msgstr "A new instance of this group."

msgid ":class:`Group`"
msgstr ":class:`Group`"

msgid "GroupMixin"
msgstr "GroupMixin"

msgid "A mixin that implements common functionality for classes that behave similar to :class:`.Group` and are allowed to register commands."
msgstr "A mixin that implements common functionality for classes that behave similar to :class:`.Group` and are allowed to register commands."

msgid "A mapping of command name to :class:`.Command` objects."
msgstr "A mapping of command name to :class:`.Command` objects."

msgid "Whether the commands should be case-insensitive. Defaults to ``False``."
msgstr "Whether the commands should be case-insensitive. Defaults to ``False``."

msgid "Cogs"
msgstr "Cogs"

msgid "Cog"
msgstr "Cog"

msgid "An iterator that recursively walks through this cog's commands and subcommands."
msgstr "An iterator that recursively walks through this cog's commands and subcommands."

msgid "Union[:class:`.Command`, :class:`.Group`] -- A command or group from the cog."
msgstr "Union[:class:`.Command`, :class:`.Group`] -- A command or group from the cog."

msgid "A :class:`list` of commands that are defined inside this cog.  .. note::      This does not include subcommands."
msgstr "A :class:`list` of commands that are defined inside this cog.  .. note::      This does not include subcommands."

msgid "A :class:`list` of commands that are defined inside this cog."
msgstr "A :class:`list` of commands that are defined inside this cog."

msgid "This does not include subcommands."
msgstr "This does not include subcommands."

msgid "List[Union[:class:`~discord.ApplicationCommand`, :class:`.Command`]]"
msgstr "List[Union[:class:`~discord.ApplicationCommand`, :class:`.Command`]]"

msgid "CogMeta"
msgstr "CogMeta"

msgid "A metaclass for defining a cog."
msgstr "A metaclass for defining a cog."

msgid "Note that you should probably not use this directly. It is exposed purely for documentation purposes along with making custom metaclasses to intermix with other metaclasses such as the :class:`abc.ABCMeta` metaclass."
msgstr "Note that you should probably not use this directly. It is exposed purely for documentation purposes along with making custom metaclasses to intermix with other metaclasses such as the :class:`abc.ABCMeta` metaclass."

msgid "For example, to create an abstract cog mixin class, the following would be done."
msgstr "For example, to create an abstract cog mixin class, the following would be done."

msgid "When passing an attribute of a metaclass that is documented below, note that you must pass it as a keyword-only argument to the class creation like the following example:"
msgstr "When passing an attribute of a metaclass that is documented below, note that you must pass it as a keyword-only argument to the class creation like the following example:"

msgid "The cog name. By default, it is the name of the class with no modification."
msgstr "The cog name. By default, it is the name of the class with no modification."

msgid "The cog description. By default, it is the cleaned docstring of the class."
msgstr "The cog description. By default, it is the cleaned docstring of the class."

msgid "A list of attributes to apply to every command inside this cog. The dictionary is passed into the :class:`Command` options at ``__init__``. If you specify attributes inside the command attribute in the class, it will override the one specified inside this attribute. For example:"
msgstr "A list of attributes to apply to every command inside this cog. The dictionary is passed into the :class:`Command` options at ``__init__``. If you specify attributes inside the command attribute in the class, it will override the one specified inside this attribute. For example:"

msgid "A shortcut to :attr:`.command_attrs`, what ``guild_ids`` should all application commands have in the cog. You can override this by setting ``guild_ids`` per command."
msgstr "A shortcut to :attr:`.command_attrs`, what ``guild_ids`` should all application commands have in the cog. You can override this by setting ``guild_ids`` per command."

msgid "Optional[List[:class:`int`]]"
msgstr "Optional[List[:class:`int`]]"

msgid "Help Commands"
msgstr "Help Commands"

msgid "HelpCommand"
msgstr "HelpCommand"

msgid "The base implementation for help command formatting."
msgstr "The base implementation for help command formatting."

msgid "Internally instances of this class are deep copied every time the command itself is invoked to prevent a race condition mentioned in :dpy-issue:`2123`."
msgstr "Internally instances of this class are deep copied every time the command itself is invoked to prevent a race condition mentioned in :dpy-issue:`2123`."

msgid "This means that relying on the state of this class to be the same between command invocations would not work as expected."
msgstr "This means that relying on the state of this class to be the same between command invocations would not work as expected."

msgid "The context that invoked this help formatter. This is generally set after the help command assigned, :func:`command_callback`\\, has been called."
msgstr "The context that invoked this help formatter. This is generally set after the help command assigned, :func:`command_callback`\\, has been called."

msgid "Optional[:class:`Context`]"
msgstr "Optional[:class:`Context`]"

msgid "Specifies if hidden commands should be shown in the output. Defaults to ``False``."
msgstr "Specifies if hidden commands should be shown in the output. Defaults to ``False``."

msgid "Specifies if commands should have their :attr:`.Command.checks` called and verified. If ``True``, always calls :attr:`.Command.checks`. If ``None``, only calls :attr:`.Command.checks` in a guild setting. If ``False``, never calls :attr:`.Command.checks`. Defaults to ``True``."
msgstr "Specifies if commands should have their :attr:`.Command.checks` called and verified. If ``True``, always calls :attr:`.Command.checks`. If ``None``, only calls :attr:`.Command.checks` in a guild setting. If ``False``, never calls :attr:`.Command.checks`. Defaults to ``True``."

msgid "Optional[:class:`bool`]"
msgstr "Optional[:class:`bool`]"

msgid "A dictionary of options to pass in for the construction of the help command. This allows you to change the command behaviour without actually changing the implementation of the command. The attributes will be the same as the ones passed in the :class:`.Command` constructor."
msgstr "A dictionary of options to pass in for the construction of the help command. This allows you to change the command behaviour without actually changing the implementation of the command. The attributes will be the same as the ones passed in the :class:`.Command` constructor."

msgid "Adds a check to the help command."
msgstr "Adds a check to the help command."

msgid "Removes a check from the help command."
msgstr "Removes a check from the help command."

msgid "Retrieves the bot mapping passed to :meth:`send_bot_help`."
msgstr "Retrieves the bot mapping passed to :meth:`send_bot_help`."

msgid "Similar to :attr:`Context.invoked_with` except properly handles the case where :meth:`Context.send_help` is used."
msgstr "Similar to :attr:`Context.invoked_with` except properly handles the case where :meth:`Context.send_help` is used."

msgid "If the help command was used regularly then this returns the :attr:`Context.invoked_with` attribute. Otherwise, if the help command was called using :meth:`Context.send_help` then it returns the internal command name of the help command."
msgstr "If the help command was used regularly then this returns the :attr:`Context.invoked_with` attribute. Otherwise, if the help command was called using :meth:`Context.send_help` then it returns the internal command name of the help command."

msgid "The command name that triggered this invocation."
msgstr "The command name that triggered this invocation."

msgid "Retrieves the signature portion of the help page."
msgstr "Retrieves the signature portion of the help page."

msgid "The command to get the signature of."
msgstr "The command to get the signature of."

msgid "The signature for the command."
msgstr "The signature for the command."

msgid "Removes mentions from the string to prevent abuse."
msgstr "Removes mentions from the string to prevent abuse."

msgid "This includes ``@everyone``, ``@here``, member mentions and role mentions."
msgstr "This includes ``@everyone``, ``@here``, member mentions and role mentions."

msgid "The string with mentions removed."
msgstr "The string with mentions removed."

msgid "A property for retrieving or setting the cog for the help command."
msgstr "A property for retrieving or setting the cog for the help command."

msgid "When a cog is set for the help command, it is as-if the help command belongs to that cog. All cog special methods will apply to the help command, and it will be automatically unset on unload."
msgstr "When a cog is set for the help command, it is as-if the help command belongs to that cog. All cog special methods will apply to the help command, and it will be automatically unset on unload."

msgid "To unbind the cog from the help command, you can set it to ``None``."
msgstr "To unbind the cog from the help command, you can set it to ``None``."

msgid "The cog that is currently set for the help command."
msgstr "The cog that is currently set for the help command."

msgid "|maybecoro|"
msgstr "|maybecoro|"

msgid "A method called when a command is not found in the help command. This is useful to override for i18n."
msgstr "A method called when a command is not found in the help command. This is useful to override for i18n."

msgid "Defaults to ``No command called {0} found.``"
msgstr "Defaults to ``No command called {0} found.``"

msgid "The string that contains the invalid command. Note that this has had mentions removed to prevent abuse."
msgstr "The string that contains the invalid command. Note that this has had mentions removed to prevent abuse."

msgid "The string to use when a command has not been found."
msgstr "The string to use when a command has not been found."

msgid "A method called when a command did not have a subcommand requested in the help command. This is useful to override for i18n."
msgstr "A method called when a command did not have a subcommand requested in the help command. This is useful to override for i18n."

msgid "Defaults to either:"
msgstr "Defaults to either:"

msgid "``'Command \"{command.qualified_name}\" has no subcommands.'``"
msgstr "``'Command \"{command.qualified_name}\" has no subcommands.'``"

msgid "If there is no subcommand in the ``command`` parameter."
msgstr "If there is no subcommand in the ``command`` parameter."

msgid "``'Command \"{command.qualified_name}\" has no subcommand named {string}'``"
msgstr "``'Command \"{command.qualified_name}\" has no subcommand named {string}'``"

msgid "If the ``command`` parameter has subcommands but not one named ``string``."
msgstr "If the ``command`` parameter has subcommands but not one named ``string``."

msgid "The command that did not have the subcommand requested."
msgstr "The command that did not have the subcommand requested."

msgid "The string that contains the invalid subcommand. Note that this has had mentions removed to prevent abuse."
msgstr "The string that contains the invalid subcommand. Note that this has had mentions removed to prevent abuse."

msgid "The string to use when the command did not have the subcommand requested."
msgstr "The string to use when the command did not have the subcommand requested."

msgid "Returns a filtered list of commands and optionally sorts them."
msgstr "Returns a filtered list of commands and optionally sorts them."

msgid "This takes into account the :attr:`verify_checks` and :attr:`show_hidden` attributes."
msgstr "This takes into account the :attr:`verify_checks` and :attr:`show_hidden` attributes."

msgid "An iterable of commands that are getting filtered."
msgstr "An iterable of commands that are getting filtered."

msgid "Whether to sort the result."
msgstr "Whether to sort the result."

msgid "An optional key function to pass to :func:`py:sorted` that takes a :class:`Command` as its sole parameter. If ``sort`` is passed as ``True`` then this will default as the command name."
msgstr "An optional key function to pass to :func:`py:sorted` that takes a :class:`Command` as its sole parameter. If ``sort`` is passed as ``True`` then this will default as the command name."

msgid "A list of commands that passed the filter."
msgstr "A list of commands that passed the filter."

msgid "List[:class:`Command`]"
msgstr "List[:class:`Command`]"

msgid "Returns the largest name length of the specified command list."
msgstr "Returns the largest name length of the specified command list."

msgid "A sequence of commands to check for the largest size."
msgstr "A sequence of commands to check for the largest size."

msgid "The maximum width of the commands."
msgstr "The maximum width of the commands."

msgid ":class:`int`"
msgstr ":class:`int`"

msgid "Returns the :class:`~discord.abc.Messageable` where the help command will be output."
msgstr "Returns the :class:`~discord.abc.Messageable` where the help command will be output."

msgid "You can override this method to customise the behaviour."
msgstr "You can override this method to customise the behaviour."

msgid "By default, this returns the context's channel."
msgstr "By default, this returns the context's channel."

msgid "The destination where the help command will be output."
msgstr "The destination where the help command will be output."

msgid ":class:`.abc.Messageable`"
msgstr ":class:`.abc.Messageable`"

msgid "Handles the implementation when an error happens in the help command. For example, the result of :meth:`command_not_found` will be passed here."
msgstr "Handles the implementation when an error happens in the help command. For example, the result of :meth:`command_not_found` will be passed here."

msgid "By default, this sends the error message to the destination specified by :meth:`get_destination`."
msgstr "By default, this sends the error message to the destination specified by :meth:`get_destination`."

msgid "You can access the invocation context with :attr:`HelpCommand.context`."
msgstr "You can access the invocation context with :attr:`HelpCommand.context`."

msgid "The error message to display to the user. Note that this has had mentions removed to prevent abuse."
msgstr "The error message to display to the user. Note that this has had mentions removed to prevent abuse."

msgid "The help command's error handler, as specified by :ref:`ext_commands_error_handler`."
msgstr "The help command's error handler, as specified by :ref:`ext_commands_error_handler`."

msgid "Useful to override if you need some specific behaviour when the error handler is called."
msgstr "Useful to override if you need some specific behaviour when the error handler is called."

msgid "By default, this method does nothing and just propagates to the default error handlers."
msgstr "By default, this method does nothing and just propagates to the default error handlers."

msgid "Handles the implementation of the bot command page in the help command. This function is called when the help command is called with no arguments."
msgstr "Handles the implementation of the bot command page in the help command. This function is called when the help command is called with no arguments."

msgid "It should be noted that this method does not return anything -- rather the actual message sending should be done inside this method. Well-behaved subclasses should use :meth:`get_destination` to know where to send, as this is a customisation point for other users."
msgstr "It should be noted that this method does not return anything -- rather the actual message sending should be done inside this method. Well-behaved subclasses should use :meth:`get_destination` to know where to send, as this is a customisation point for other users."

msgid "Also, the commands in the mapping are not filtered. To do the filtering you will have to call :meth:`filter_commands` yourself."
msgstr "Also, the commands in the mapping are not filtered. To do the filtering you will have to call :meth:`filter_commands` yourself."

msgid "A mapping of cogs to commands that have been requested by the user for help. The key of the mapping is the :class:`~.commands.Cog` that the command belongs to, or ``None`` if there isn't one, and the value is a list of commands that belongs to that cog."
msgstr "A mapping of cogs to commands that have been requested by the user for help. The key of the mapping is the :class:`~.commands.Cog` that the command belongs to, or ``None`` if there isn't one, and the value is a list of commands that belongs to that cog."

msgid "Handles the implementation of the cog page in the help command. This function is called when the help command is called with a cog as the argument."
msgstr "Handles the implementation of the cog page in the help command. This function is called when the help command is called with a cog as the argument."

msgid "To get the commands that belong to this cog see :meth:`Cog.get_commands`. The commands returned not filtered. To do the filtering you will have to call :meth:`filter_commands` yourself."
msgstr "To get the commands that belong to this cog see :meth:`Cog.get_commands`. The commands returned not filtered. To do the filtering you will have to call :meth:`filter_commands` yourself."

msgid "The cog that was requested for help."
msgstr "The cog that was requested for help."

msgid "Handles the implementation of the group page in the help command. This function is called when the help command is called with a group as the argument."
msgstr "Handles the implementation of the group page in the help command. This function is called when the help command is called with a group as the argument."

msgid "To get the commands that belong to this group without aliases see :attr:`Group.commands`. The commands returned not filtered. To do the filtering you will have to call :meth:`filter_commands` yourself."
msgstr "To get the commands that belong to this group without aliases see :attr:`Group.commands`. The commands returned not filtered. To do the filtering you will have to call :meth:`filter_commands` yourself."

msgid "The group that was requested for help."
msgstr "The group that was requested for help."

msgid "Handles the implementation of the single command page in the help command."
msgstr "Handles the implementation of the single command page in the help command."

msgid "Showing Help"
msgstr "Showing Help"

msgid "There are certain attributes and methods that are helpful for a help command to show such as the following:"
msgstr "There are certain attributes and methods that are helpful for a help command to show such as the following:"

msgid ":attr:`Command.help`"
msgstr ":attr:`Command.help`"

msgid ":attr:`Command.brief`"
msgstr ":attr:`Command.brief`"

msgid ":attr:`Command.short_doc`"
msgstr ":attr:`Command.short_doc`"

msgid ":attr:`Command.description`"
msgstr ":attr:`Command.description`"

msgid ":meth:`get_command_signature`"
msgstr ":meth:`get_command_signature`"

msgid "There are more than just these attributes but feel free to play around with these to help you get started to get the output that you want."
msgstr "There are more than just these attributes but feel free to play around with these to help you get started to get the output that you want."

msgid "The command that was requested for help."
msgstr "The command that was requested for help."

msgid "A low level method that can be used to prepare the help command before it does anything. For example, if you need to prepare some state in your subclass before the command does its processing then this would be the place to do it."
msgstr "A low level method that can be used to prepare the help command before it does anything. For example, if you need to prepare some state in your subclass before the command does its processing then this would be the place to do it."

msgid "The default implementation does nothing."
msgstr "The default implementation does nothing."

msgid "This is called *inside* the help command callback body. So all the usual rules that happen inside apply here as well."
msgstr "This is called *inside* the help command callback body. So all the usual rules that happen inside apply here as well."

msgid "The argument passed to the help command."
msgstr "The argument passed to the help command."

msgid "The actual implementation of the help command."
msgstr "The actual implementation of the help command."

msgid "It is not recommended to override this method and instead change the behaviour through the methods that actually get dispatched."
msgstr "It is not recommended to override this method and instead change the behaviour through the methods that actually get dispatched."

msgid ":meth:`send_bot_help`"
msgstr ":meth:`send_bot_help`"

msgid ":meth:`send_cog_help`"
msgstr ":meth:`send_cog_help`"

msgid ":meth:`send_group_help`"
msgstr ":meth:`send_group_help`"

msgid ":meth:`send_command_help`"
msgstr ":meth:`send_command_help`"

msgid ":meth:`get_destination`"
msgstr ":meth:`get_destination`"

msgid ":meth:`command_not_found`"
msgstr ":meth:`command_not_found`"

msgid ":meth:`subcommand_not_found`"
msgstr ":meth:`subcommand_not_found`"

msgid ":meth:`send_error_message`"
msgstr ":meth:`send_error_message`"

msgid ":meth:`on_help_command_error`"
msgstr ":meth:`on_help_command_error`"

msgid ":meth:`prepare_help_command`"
msgstr ":meth:`prepare_help_command`"

msgid "DefaultHelpCommand"
msgstr "DefaultHelpCommand"

msgid "The implementation of the default help command."
msgstr "The implementation of the default help command."

msgid "This inherits from :class:`HelpCommand`."
msgstr "This inherits from :class:`HelpCommand`."

msgid "It extends it with the following attributes."
msgstr "It extends it with the following attributes."

msgid "The maximum number of characters that fit in a line. Defaults to 80."
msgstr "The maximum number of characters that fit in a line. Defaults to 80."

msgid "Whether to sort the commands in the output alphabetically. Defaults to ``True``."
msgstr "Whether to sort the commands in the output alphabetically. Defaults to ``True``."

msgid "A tribool that indicates if the help command should DM the user instead of sending it to the channel it received it from. If the boolean is set to ``True``, then all help output is DM'd. If ``False``, none of the help output is DM'd. If ``None``, then the bot will only DM when the help message becomes too long (dictated by more than :attr:`dm_help_threshold` characters). Defaults to ``False``."
msgstr "A tribool that indicates if the help command should DM the user instead of sending it to the channel it received it from. If the boolean is set to ``True``, then all help output is DM'd. If ``False``, none of the help output is DM'd. If ``None``, then the bot will only DM when the help message becomes too long (dictated by more than :attr:`dm_help_threshold` characters). Defaults to ``False``."

msgid "The number of characters the paginator must accumulate before getting DM'd to the user if :attr:`dm_help` is set to ``None``. Defaults to 1000."
msgstr "The number of characters the paginator must accumulate before getting DM'd to the user if :attr:`dm_help` is set to ``None``. Defaults to 1000."

msgid "Optional[:class:`int`]"
msgstr "Optional[:class:`int`]"

msgid "How much to indent the commands from a heading. Defaults to ``2``."
msgstr "How much to indent the commands from a heading. Defaults to ``2``."

msgid "The command list's heading string used when the help command is invoked with a category name. Useful for i18n. Defaults to ``\"Commands:\"``"
msgstr "The command list's heading string used when the help command is invoked with a category name. Useful for i18n. Defaults to ``\"Commands:\"``"

msgid "The string used when there is a command which does not belong to any category(cog). Useful for i18n. Defaults to ``\"No Category\"``"
msgstr "The string used when there is a command which does not belong to any category(cog). Useful for i18n. Defaults to ``\"No Category\"``"

msgid "The paginator used to paginate the help command output."
msgstr "The paginator used to paginate the help command output."

msgid ":class:`Paginator`"
msgstr ":class:`Paginator`"

msgid "Shortens text to fit into the :attr:`width`."
msgstr "Shortens text to fit into the :attr:`width`."

msgid ":sphinx_autodoc_typehints_type:`\\:py\\:class\\:\\`str\\``"
msgstr ":sphinx_autodoc_typehints_type:`\\:py\\:class\\:\\`str\\``"

msgid "Returns help command's ending note. This is mainly useful to override for i18n purposes."
msgstr "Returns help command's ending note. This is mainly useful to override for i18n purposes."

msgid "Indents a list of commands after the specified heading."
msgstr "Indents a list of commands after the specified heading."

msgid "The formatting is added to the :attr:`paginator`."
msgstr "The formatting is added to the :attr:`paginator`."

msgid "The default implementation is the command name indented by :attr:`indent` spaces, padded to ``max_size`` followed by the command's :attr:`Command.short_doc` and then shortened to fit into the :attr:`width`."
msgstr "The default implementation is the command name indented by :attr:`indent` spaces, padded to ``max_size`` followed by the command's :attr:`Command.short_doc` and then shortened to fit into the :attr:`width`."

msgid "A list of commands to indent for output."
msgstr "A list of commands to indent for output."

msgid "The heading to add to the output. This is only added if the list of commands is greater than 0."
msgstr "The heading to add to the output. This is only added if the list of commands is greater than 0."

msgid "The max size to use for the gap between indents. If unspecified, calls :meth:`~HelpCommand.get_max_size` on the commands parameter."
msgstr "The max size to use for the gap between indents. If unspecified, calls :meth:`~HelpCommand.get_max_size` on the commands parameter."

msgid "A helper utility to send the page output from :attr:`paginator` to the destination."
msgstr "A helper utility to send the page output from :attr:`paginator` to the destination."

msgid "A utility function to format the non-indented block of commands and groups."
msgstr "A utility function to format the non-indented block of commands and groups."

msgid "The command to format."
msgstr "The command to format."

msgid "MinimalHelpCommand"
msgstr "MinimalHelpCommand"

msgid "An implementation of a help command with minimal output."
msgstr "An implementation of a help command with minimal output."

msgid "The command list's heading string used when the help command is invoked with a category name. Useful for i18n. Defaults to ``\"Commands\"``"
msgstr "The command list's heading string used when the help command is invoked with a category name. Useful for i18n. Defaults to ``\"Commands\"``"

msgid "The alias list's heading string used to list the aliases of the command. Useful for i18n. Defaults to ``\"Aliases:\"``."
msgstr "The alias list's heading string used to list the aliases of the command. Useful for i18n. Defaults to ``\"Aliases:\"``."

msgid "Returns help command's opening note. This is mainly useful to override for i18n purposes."
msgstr "Returns help command's opening note. This is mainly useful to override for i18n purposes."

msgid "The default implementation returns ::"
msgstr "The default implementation returns ::"

msgid "The help command opening note."
msgstr "The help command opening note."

msgid "Return the help command's ending note. This is mainly useful to override for i18n purposes."
msgstr "Return the help command's ending note. This is mainly useful to override for i18n purposes."

msgid "The help command ending note."
msgstr "The help command ending note."

msgid "Adds the minified bot heading with commands to the output."
msgstr "Adds the minified bot heading with commands to the output."

msgid "The formatting should be added to the :attr:`paginator`."
msgstr "The formatting should be added to the :attr:`paginator`."

msgid "The default implementation is a bold underline heading followed by commands separated by an EN SPACE (U+2002) in the next line."
msgstr "The default implementation is a bold underline heading followed by commands separated by an EN SPACE (U+2002) in the next line."

msgid "A list of commands that belong to the heading."
msgstr "A list of commands that belong to the heading."

msgid "The heading to add to the line."
msgstr "The heading to add to the line."

msgid "Adds formatting information on a subcommand."
msgstr "Adds formatting information on a subcommand."

msgid "The default implementation is the prefix and the :attr:`Command.qualified_name` optionally followed by an En dash and the command's :attr:`Command.short_doc`."
msgstr "The default implementation is the prefix and the :attr:`Command.qualified_name` optionally followed by an En dash and the command's :attr:`Command.short_doc`."

msgid "The command to show information of."
msgstr "The command to show information of."

msgid "Adds the formatting information on a command's aliases."
msgstr "Adds the formatting information on a command's aliases."

msgid "The default implementation is the :attr:`aliases_heading` bolded followed by a comma separated list of aliases."
msgstr "The default implementation is the :attr:`aliases_heading` bolded followed by a comma separated list of aliases."

msgid "This is not called if there are no aliases to format."
msgstr "This is not called if there are no aliases to format."

msgid "A list of aliases to format."
msgstr "A list of aliases to format."

msgid "A utility function to format commands and groups."
msgstr "A utility function to format commands and groups."

msgid "Paginator"
msgstr "Paginator"

msgid "A class that aids in paginating code blocks for Discord messages."
msgstr "A class that aids in paginating code blocks for Discord messages."

msgid "Returns the total number of characters in the paginator."
msgstr "Returns the total number of characters in the paginator."

msgid "The prefix inserted to every page. e.g. three backticks."
msgstr "The prefix inserted to every page. e.g. three backticks."

msgid "The suffix appended at the end of every page. e.g. three backticks."
msgstr "The suffix appended at the end of every page. e.g. three backticks."

msgid "The maximum amount of codepoints allowed in a page."
msgstr "The maximum amount of codepoints allowed in a page."

msgid "The character string inserted between lines. e.g. a newline character."
msgstr "The character string inserted between lines. e.g. a newline character."

msgid "Clears the paginator to have no pages."
msgstr "Clears the paginator to have no pages."

msgid "Adds a line to the current page."
msgstr "Adds a line to the current page."

msgid "If the line exceeds the :attr:`max_size` then an exception is raised."
msgstr "If the line exceeds the :attr:`max_size` then an exception is raised."

msgid "The line to add."
msgstr "The line to add."

msgid "Indicates if another empty line should be added."
msgstr "Indicates if another empty line should be added."

msgid "The line was too big for the current :attr:`max_size`."
msgstr "The line was too big for the current :attr:`max_size`."

msgid "Prematurely terminate a page."
msgstr "Prematurely terminate a page."

msgid "Returns the rendered list of pages."
msgstr "Returns the rendered list of pages."

msgid "Enums"
msgstr "Enums"

msgid "Specifies a type of bucket for, e.g. a cooldown."
msgstr "Specifies a type of bucket for, e.g. a cooldown."

msgid "The default bucket operates on a global basis."
msgstr "The default bucket operates on a global basis."

msgid "The user bucket operates on a per-user basis."
msgstr "The user bucket operates on a per-user basis."

msgid "The guild bucket operates on a per-guild basis."
msgstr "The guild bucket operates on a per-guild basis."

msgid "The channel bucket operates on a per-channel basis."
msgstr "The channel bucket operates on a per-channel basis."

msgid "The member bucket operates on a per-member basis."
msgstr "The member bucket operates on a per-member basis."

msgid "The category bucket operates on a per-category basis."
msgstr "The category bucket operates on a per-category basis."

msgid "The role bucket operates on a per-role basis."
msgstr "The role bucket operates on a per-role basis."

msgid "Checks"
msgstr "Checks"

msgid "A decorator that adds a check to the :class:`.Command` or its subclasses. These checks could be accessed via :attr:`.Command.checks`."
msgstr "A decorator that adds a check to the :class:`.Command` or its subclasses. These checks could be accessed via :attr:`.Command.checks`."

msgid "These checks should be predicates that take in a single parameter taking a :class:`.Context`. If the check returns a ``False``\\-like value then during invocation a :exc:`.CheckFailure` exception is raised and sent to the :func:`.on_command_error` event."
msgstr "These checks should be predicates that take in a single parameter taking a :class:`.Context`. If the check returns a ``False``\\-like value then during invocation a :exc:`.CheckFailure` exception is raised and sent to the :func:`.on_command_error` event."

msgid "If an exception should be thrown in the predicate then it should be a subclass of :exc:`.CommandError`. Any exception not subclassed from it will be propagated while those subclassed will be sent to :func:`.on_command_error`."
msgstr "If an exception should be thrown in the predicate then it should be a subclass of :exc:`.CommandError`. Any exception not subclassed from it will be propagated while those subclassed will be sent to :func:`.on_command_error`."

msgid "A special attribute named ``predicate`` is bound to the value returned by this decorator to retrieve the predicate passed to the decorator. This allows the following introspection and chaining to be done:"
msgstr "A special attribute named ``predicate`` is bound to the value returned by this decorator to retrieve the predicate passed to the decorator. This allows the following introspection and chaining to be done:"

msgid "The function returned by ``predicate`` is **always** a coroutine, even if the original function was not a coroutine."
msgstr "The function returned by ``predicate`` is **always** a coroutine, even if the original function was not a coroutine."

msgid "The ``predicate`` attribute was added."
msgstr "The ``predicate`` attribute was added."

msgid "Creating a basic check to see if the command invoker is you."
msgstr "Creating a basic check to see if the command invoker is you."

msgid "Transforming common checks into its own decorator:"
msgstr "Transforming common checks into its own decorator:"

msgid "The predicate to check if the command should be invoked."
msgstr "The predicate to check if the command should be invoked."

msgid ":sphinx_autodoc_typehints_type:`\\:py\\:data\\:\\`\\~typing.Callable\\`\\\\ \\\\\\[\\\\\\[\\:py\\:class\\:\\`\\~typing.TypeVar\\`\\\\ \\\\\\(\\`\\`T\\`\\`\\)\\]\\, \\:py\\:class\\:\\`\\~typing.TypeVar\\`\\\\ \\\\\\(\\`\\`T\\`\\`\\)\\]`"
msgstr ":sphinx_autodoc_typehints_type:`\\:py\\:data\\:\\`\\~typing.Callable\\`\\\\ \\\\\\[\\\\\\[\\:py\\:class\\:\\`\\~typing.TypeVar\\`\\\\ \\\\\\(\\`\\`T\\`\\`\\)\\]\\, \\:py\\:class\\:\\`\\~typing.TypeVar\\`\\\\ \\\\\\(\\`\\`T\\`\\`\\)\\]`"

msgid "A :func:`check` that is added that checks if any of the checks passed will pass, i.e. using logical OR."
msgstr "A :func:`check` that is added that checks if any of the checks passed will pass, i.e. using logical OR."

msgid "If all checks fail then :exc:`.CheckAnyFailure` is raised to signal the failure. It inherits from :exc:`.CheckFailure`."
msgstr "If all checks fail then :exc:`.CheckAnyFailure` is raised to signal the failure. It inherits from :exc:`.CheckFailure`."

msgid "The ``predicate`` attribute for this function **is** a coroutine."
msgstr "The ``predicate`` attribute for this function **is** a coroutine."

msgid "An argument list of checks that have been decorated with the :func:`check` decorator."
msgstr "An argument list of checks that have been decorated with the :func:`check` decorator."

msgid "A check passed has not been decorated with the :func:`check`     decorator."
msgstr "A check passed has not been decorated with the :func:`check`     decorator."

msgid "Creating a basic check to see if it's the bot owner or the server owner:"
msgstr "Creating a basic check to see if it's the bot owner or the server owner:"

msgid "A :func:`.check` that is added that checks if the member invoking the command has the role specified via the name or ID specified."
msgstr "A :func:`.check` that is added that checks if the member invoking the command has the role specified via the name or ID specified."

msgid "If a string is specified, you must give the exact name of the role, including caps and spelling."
msgstr "If a string is specified, you must give the exact name of the role, including caps and spelling."

msgid "If an integer is specified, you must give the exact snowflake ID of the role."
msgstr "If an integer is specified, you must give the exact snowflake ID of the role."

msgid "If the message is invoked in a private message context then the check will return ``False``."
msgstr "If the message is invoked in a private message context then the check will return ``False``."

msgid "This check raises one of two special exceptions, :exc:`.MissingRole` if the user is missing a role, or :exc:`.NoPrivateMessage` if it is used in a private message. Both inherit from :exc:`.CheckFailure`."
msgstr "This check raises one of two special exceptions, :exc:`.MissingRole` if the user is missing a role, or :exc:`.NoPrivateMessage` if it is used in a private message. Both inherit from :exc:`.CheckFailure`."

msgid "Raise :exc:`.MissingRole` or :exc:`.NoPrivateMessage` instead of generic :exc:`.CheckFailure`"
msgstr "Raise :exc:`.MissingRole` or :exc:`.NoPrivateMessage` instead of generic :exc:`.CheckFailure`"

msgid "The name or ID of the role to check."
msgstr "The name or ID of the role to check."

msgid "A :func:`.check` that is added that checks if the member has all of the permissions necessary."
msgstr "A :func:`.check` that is added that checks if the member has all of the permissions necessary."

msgid "Note that this check operates on the current channel permissions, not the guild wide permissions."
msgstr "Note that this check operates on the current channel permissions, not the guild wide permissions."

msgid "The permissions passed in must be exactly like the properties shown under :class:`.discord.Permissions`."
msgstr "The permissions passed in must be exactly like the properties shown under :class:`.discord.Permissions`."

msgid "This check raises a special exception, :exc:`.MissingPermissions` that is inherited from :exc:`.CheckFailure`."
msgstr "This check raises a special exception, :exc:`.MissingPermissions` that is inherited from :exc:`.CheckFailure`."

msgid "If the command is executed within a DM, it returns ``True``."
msgstr "If the command is executed within a DM, it returns ``True``."

msgid "An argument list of permissions to check for."
msgstr "An argument list of permissions to check for."

msgid "Similar to :func:`.has_permissions`, but operates on guild wide permissions instead of the current channel permissions."
msgstr "Similar to :func:`.has_permissions`, but operates on guild wide permissions instead of the current channel permissions."

msgid "If this check is called in a DM context, it will raise an exception, :exc:`.NoPrivateMessage`."
msgstr "If this check is called in a DM context, it will raise an exception, :exc:`.NoPrivateMessage`."

msgid "A :func:`.check` that is added that checks if the member invoking the command has **any** of the roles specified. This means that if they have one out of the three roles specified, then this check will return `True`."
msgstr "A :func:`.check` that is added that checks if the member invoking the command has **any** of the roles specified. This means that if they have one out of the three roles specified, then this check will return `True`."

msgid "Similar to :func:`.has_role`\\, the names or IDs passed in must be exact."
msgstr "Similar to :func:`.has_role`\\, the names or IDs passed in must be exact."

msgid "This check raises one of two special exceptions, :exc:`.MissingAnyRole` if the user is missing all roles, or :exc:`.NoPrivateMessage` if it is used in a private message. Both inherit from :exc:`.CheckFailure`."
msgstr "This check raises one of two special exceptions, :exc:`.MissingAnyRole` if the user is missing all roles, or :exc:`.NoPrivateMessage` if it is used in a private message. Both inherit from :exc:`.CheckFailure`."

msgid "Raise :exc:`.MissingAnyRole` or :exc:`.NoPrivateMessage` instead of generic :exc:`.CheckFailure`"
msgstr "Raise :exc:`.MissingAnyRole` or :exc:`.NoPrivateMessage` instead of generic :exc:`.CheckFailure`"

msgid "An argument list of names or IDs to check that the member has roles wise."
msgstr "An argument list of names or IDs to check that the member has roles wise."

msgid "Similar to :func:`.has_role` except checks if the bot itself has the role."
msgstr "Similar to :func:`.has_role` except checks if the bot itself has the role."

msgid "This check raises one of two special exceptions, :exc:`.BotMissingRole` if the bot is missing the role, or :exc:`.NoPrivateMessage` if it is used in a private message. Both inherit from :exc:`.CheckFailure`."
msgstr "This check raises one of two special exceptions, :exc:`.BotMissingRole` if the bot is missing the role, or :exc:`.NoPrivateMessage` if it is used in a private message. Both inherit from :exc:`.CheckFailure`."

msgid "Raise :exc:`.BotMissingRole` or :exc:`.NoPrivateMessage` instead of generic :exc:`.CheckFailure`"
msgstr "Raise :exc:`.BotMissingRole` or :exc:`.NoPrivateMessage` instead of generic :exc:`.CheckFailure`"

msgid "Similar to :func:`.has_permissions` except checks if the bot itself has the permissions listed."
msgstr "Similar to :func:`.has_permissions` except checks if the bot itself has the permissions listed."

msgid "This check raises a special exception, :exc:`.BotMissingPermissions` that is inherited from :exc:`.CheckFailure`."
msgstr "This check raises a special exception, :exc:`.BotMissingPermissions` that is inherited from :exc:`.CheckFailure`."

msgid "Similar to :func:`.has_guild_permissions`, but checks the bot members guild permissions."
msgstr "Similar to :func:`.has_guild_permissions`, but checks the bot members guild permissions."

msgid "Similar to :func:`.has_any_role` except checks if the bot itself has any of the roles listed."
msgstr "Similar to :func:`.has_any_role` except checks if the bot itself has any of the roles listed."

msgid "This check raises one of two special exceptions, :exc:`.BotMissingAnyRole` if the bot is missing all roles, or :exc:`.NoPrivateMessage` if it is used in a private message. Both inherit from :exc:`.CheckFailure`."
msgstr "This check raises one of two special exceptions, :exc:`.BotMissingAnyRole` if the bot is missing all roles, or :exc:`.NoPrivateMessage` if it is used in a private message. Both inherit from :exc:`.CheckFailure`."

msgid "Raise :exc:`.BotMissingAnyRole` or :exc:`.NoPrivateMessage` instead of generic :exc:`.CheckFailure`."
msgstr "Raise :exc:`.BotMissingAnyRole` or :exc:`.NoPrivateMessage` instead of generic :exc:`.CheckFailure`."

msgid "A decorator that adds a cooldown to a command"
msgstr "A decorator that adds a cooldown to a command"

msgid "A cooldown allows a command to only be used a specific amount of times in a specific time frame. These cooldowns can be based either on a per-guild, per-channel, per-user, per-role or global basis. Denoted by the third argument of ``type`` which must be of enum type :class:`.BucketType`."
msgstr "A cooldown allows a command to only be used a specific amount of times in a specific time frame. These cooldowns can be based either on a per-guild, per-channel, per-user, per-role or global basis. Denoted by the third argument of ``type`` which must be of enum type :class:`.BucketType`."

msgid "If a cooldown is triggered, then :exc:`.CommandOnCooldown` is triggered in :func:`.on_command_error` and the local error handler."
msgstr "If a cooldown is triggered, then :exc:`.CommandOnCooldown` is triggered in :func:`.on_command_error` and the local error handler."

msgid "A command can only have a single cooldown."
msgstr "A command can only have a single cooldown."

msgid "The number of times a command can be used before triggering a cooldown."
msgstr "The number of times a command can be used before triggering a cooldown."

msgid "The amount of seconds to wait for a cooldown when it's been triggered."
msgstr "The amount of seconds to wait for a cooldown when it's been triggered."

msgid "The type of cooldown to have. If callable, should return a key for the mapping.  .. versionchanged:: 1.7     Callables are now supported for custom bucket types."
msgstr "The type of cooldown to have. If callable, should return a key for the mapping.  .. versionchanged:: 1.7     Callables are now supported for custom bucket types."

msgid "The type of cooldown to have. If callable, should return a key for the mapping."
msgstr "The type of cooldown to have. If callable, should return a key for the mapping."

msgid "Callables are now supported for custom bucket types."
msgstr "Callables are now supported for custom bucket types."

msgid "A decorator that adds a dynamic cooldown to a command"
msgstr "A decorator that adds a dynamic cooldown to a command"

msgid "This differs from :func:`.cooldown` in that it takes a function that accepts a single parameter of type :class:`.discord.Message` and must return a :class:`.Cooldown` or ``None``. If ``None`` is returned then that cooldown is effectively bypassed."
msgstr "This differs from :func:`.cooldown` in that it takes a function that accepts a single parameter of type :class:`.discord.Message` and must return a :class:`.Cooldown` or ``None``. If ``None`` is returned then that cooldown is effectively bypassed."

msgid "A function that takes a message and returns a cooldown that will apply to this invocation or ``None`` if the cooldown should be bypassed."
msgstr "A function that takes a message and returns a cooldown that will apply to this invocation or ``None`` if the cooldown should be bypassed."

msgid "The type of cooldown to have."
msgstr "The type of cooldown to have."

msgid "A decorator that adds a maximum concurrency to a command"
msgstr "A decorator that adds a maximum concurrency to a command"

msgid "This enables you to only allow a certain number of command invocations at the same time, for example if a command takes too long or if only one user can use it at a time. This differs from a cooldown in that there is no set waiting period or token bucket -- only a set number of people can run the command."
msgstr "This enables you to only allow a certain number of command invocations at the same time, for example if a command takes too long or if only one user can use it at a time. This differs from a cooldown in that there is no set waiting period or token bucket -- only a set number of people can run the command."

msgid "The maximum number of invocations of this command that can be running at the same time."
msgstr "The maximum number of invocations of this command that can be running at the same time."

msgid "The bucket that this concurrency is based on, e.g. ``BucketType.guild`` would allow it to be used up to ``number`` times per guild."
msgstr "The bucket that this concurrency is based on, e.g. ``BucketType.guild`` would allow it to be used up to ``number`` times per guild."

msgid "Whether the command should wait for the queue to be over. If this is set to ``False`` then instead of waiting until the command can run again, the command raises :exc:`.MaxConcurrencyReached` to its error handler. If this is set to ``True`` then the command waits until it can be executed."
msgstr "Whether the command should wait for the queue to be over. If this is set to ``False`` then instead of waiting until the command can run again, the command raises :exc:`.MaxConcurrencyReached` to its error handler. If this is set to ``True`` then the command waits until it can be executed."

msgid "This allows you to refer to one before invoke hook for several commands that do not have to be within the same cog. :rtype: :sphinx_autodoc_typehints_type:`\\:py\\:data\\:\\`\\~typing.Callable\\`\\\\ \\\\\\[\\\\\\[\\:py\\:class\\:\\`\\~typing.TypeVar\\`\\\\ \\\\\\(\\`\\`T\\`\\`\\)\\]\\, \\:py\\:class\\:\\`\\~typing.TypeVar\\`\\\\ \\\\\\(\\`\\`T\\`\\`\\)\\]`"
msgstr "This allows you to refer to one before invoke hook for several commands that do not have to be within the same cog. :rtype: :sphinx_autodoc_typehints_type:`\\:py\\:data\\:\\`\\~typing.Callable\\`\\\\ \\\\\\[\\\\\\[\\:py\\:class\\:\\`\\~typing.TypeVar\\`\\\\ \\\\\\(\\`\\`T\\`\\`\\)\\]\\, \\:py\\:class\\:\\`\\~typing.TypeVar\\`\\\\ \\\\\\(\\`\\`T\\`\\`\\)\\]`"

msgid "This allows you to refer to one after invoke hook for several commands that do not have to be within the same cog. :rtype: :sphinx_autodoc_typehints_type:`\\:py\\:data\\:\\`\\~typing.Callable\\`\\\\ \\\\\\[\\\\\\[\\:py\\:class\\:\\`\\~typing.TypeVar\\`\\\\ \\\\\\(\\`\\`T\\`\\`\\)\\]\\, \\:py\\:class\\:\\`\\~typing.TypeVar\\`\\\\ \\\\\\(\\`\\`T\\`\\`\\)\\]`"
msgstr "This allows you to refer to one after invoke hook for several commands that do not have to be within the same cog. :rtype: :sphinx_autodoc_typehints_type:`\\:py\\:data\\:\\`\\~typing.Callable\\`\\\\ \\\\\\[\\\\\\[\\:py\\:class\\:\\`\\~typing.TypeVar\\`\\\\ \\\\\\(\\`\\`T\\`\\`\\)\\]\\, \\:py\\:class\\:\\`\\~typing.TypeVar\\`\\\\ \\\\\\(\\`\\`T\\`\\`\\)\\]`"

msgid "A :func:`.check` that indicates this command must only be used in a guild context only. Basically, no private messages are allowed when using the command."
msgstr "A :func:`.check` that indicates this command must only be used in a guild context only. Basically, no private messages are allowed when using the command."

msgid "This check raises a special exception, :exc:`.NoPrivateMessage` that is inherited from :exc:`.CheckFailure`."
msgstr "This check raises a special exception, :exc:`.NoPrivateMessage` that is inherited from :exc:`.CheckFailure`."

msgid "A :func:`.check` that indicates this command must only be used in a DM context. Only private messages are allowed when using the command."
msgstr "A :func:`.check` that indicates this command must only be used in a DM context. Only private messages are allowed when using the command."

msgid "This check raises a special exception, :exc:`.PrivateMessageOnly` that is inherited from :exc:`.CheckFailure`. :rtype: :sphinx_autodoc_typehints_type:`\\:py\\:data\\:\\`\\~typing.Callable\\`\\\\ \\\\\\[\\\\\\[\\:py\\:class\\:\\`\\~typing.TypeVar\\`\\\\ \\\\\\(\\`\\`T\\`\\`\\)\\]\\, \\:py\\:class\\:\\`\\~typing.TypeVar\\`\\\\ \\\\\\(\\`\\`T\\`\\`\\)\\]`"
msgstr "This check raises a special exception, :exc:`.PrivateMessageOnly` that is inherited from :exc:`.CheckFailure`. :rtype: :sphinx_autodoc_typehints_type:`\\:py\\:data\\:\\`\\~typing.Callable\\`\\\\ \\\\\\[\\\\\\[\\:py\\:class\\:\\`\\~typing.TypeVar\\`\\\\ \\\\\\(\\`\\`T\\`\\`\\)\\]\\, \\:py\\:class\\:\\`\\~typing.TypeVar\\`\\\\ \\\\\\(\\`\\`T\\`\\`\\)\\]`"

msgid "A :func:`.check` that checks if the person invoking this command is the owner of the bot."
msgstr "A :func:`.check` that checks if the person invoking this command is the owner of the bot."

msgid "This is powered by :meth:`.Bot.is_owner`."
msgstr "This is powered by :meth:`.Bot.is_owner`."

msgid "This check raises a special exception, :exc:`.NotOwner` that is derived from :exc:`.CheckFailure`."
msgstr "This check raises a special exception, :exc:`.NotOwner` that is derived from :exc:`.CheckFailure`."

msgid "A :func:`.check` that checks if the channel is a NSFW channel."
msgstr "A :func:`.check` that checks if the channel is a NSFW channel."

msgid "This check raises a special exception, :exc:`.NSFWChannelRequired` that is derived from :exc:`.CheckFailure`. :rtype: :sphinx_autodoc_typehints_type:`\\:py\\:data\\:\\`\\~typing.Callable\\`\\\\ \\\\\\[\\\\\\[\\:py\\:class\\:\\`\\~typing.TypeVar\\`\\\\ \\\\\\(\\`\\`T\\`\\`\\)\\]\\, \\:py\\:class\\:\\`\\~typing.TypeVar\\`\\\\ \\\\\\(\\`\\`T\\`\\`\\)\\]`"
msgstr "This check raises a special exception, :exc:`.NSFWChannelRequired` that is derived from :exc:`.CheckFailure`. :rtype: :sphinx_autodoc_typehints_type:`\\:py\\:data\\:\\`\\~typing.Callable\\`\\\\ \\\\\\[\\\\\\[\\:py\\:class\\:\\`\\~typing.TypeVar\\`\\\\ \\\\\\(\\`\\`T\\`\\`\\)\\]\\, \\:py\\:class\\:\\`\\~typing.TypeVar\\`\\\\ \\\\\\(\\`\\`T\\`\\`\\)\\]`"

msgid "Raise :exc:`.NSFWChannelRequired` instead of generic :exc:`.CheckFailure`. DM channels will also now pass this check."
msgstr "Raise :exc:`.NSFWChannelRequired` instead of generic :exc:`.CheckFailure`. DM channels will also now pass this check."

msgid "Cooldown"
msgstr "Cooldown"

msgid "Represents a cooldown for a command."
msgstr "Represents a cooldown for a command."

msgid "The total number of tokens available per :attr:`per` seconds."
msgstr "The total number of tokens available per :attr:`per` seconds."

msgid "The length of the cooldown period in seconds."
msgstr "The length of the cooldown period in seconds."

msgid "Returns the number of available tokens before rate limiting is applied."
msgstr "Returns the number of available tokens before rate limiting is applied."

msgid "The time in seconds since Unix epoch to calculate tokens at. If not supplied then :func:`time.time()` is used."
msgstr "The time in seconds since Unix epoch to calculate tokens at. If not supplied then :func:`time.time()` is used."

msgid "The number of tokens available before the cooldown is to be applied."
msgstr "The number of tokens available before the cooldown is to be applied."

msgid "Returns the time in seconds until the cooldown will be reset."
msgstr "Returns the time in seconds until the cooldown will be reset."

msgid "The current time in seconds since Unix epoch. If not supplied, then :func:`time.time()` is used."
msgstr "The current time in seconds since Unix epoch. If not supplied, then :func:`time.time()` is used."

msgid "The number of seconds to wait before this cooldown will be reset."
msgstr "The number of seconds to wait before this cooldown will be reset."

msgid "Updates the cooldown rate limit."
msgstr "Updates the cooldown rate limit."

msgid "The time in seconds since Unix epoch to update the rate limit at. If not supplied, then :func:`time.time()` is used."
msgstr "The time in seconds since Unix epoch to update the rate limit at. If not supplied, then :func:`time.time()` is used."

msgid "The retry-after time in seconds if rate limited."
msgstr "The retry-after time in seconds if rate limited."

msgid "Optional[:class:`float`]"
msgstr "Optional[:class:`float`]"

msgid "Reset the cooldown to its initial state."
msgstr "Reset the cooldown to its initial state."

msgid "Creates a copy of this cooldown."
msgstr "Creates a copy of this cooldown."

msgid "A new instance of this cooldown."
msgstr "A new instance of this cooldown."

msgid ":class:`Cooldown`"
msgstr ":class:`Cooldown`"

msgid "Context"
msgstr "Context"

msgid "Represents the context in which a command is being invoked under."
msgstr "Represents the context in which a command is being invoked under."

msgid "This class contains a lot of metadata to help you understand more about the invocation context. This class is not created manually and is instead passed around to commands as the first parameter."
msgstr "This class contains a lot of metadata to help you understand more about the invocation context. This class is not created manually and is instead passed around to commands as the first parameter."

msgid "This class implements the :class:`~discord.abc.Messageable` ABC."
msgstr "This class implements the :class:`~discord.abc.Messageable` ABC."

msgid "The message that triggered the command being executed."
msgstr "The message that triggered the command being executed."

msgid ":class:`.Message`"
msgstr ":class:`.Message`"

msgid "The bot that contains the command being executed."
msgstr "The bot that contains the command being executed."

msgid ":class:`.Bot`"
msgstr ":class:`.Bot`"

msgid "The list of transformed arguments that were passed into the command. If this is accessed during the :func:`.on_command_error` event then this list could be incomplete."
msgstr "The list of transformed arguments that were passed into the command. If this is accessed during the :func:`.on_command_error` event then this list could be incomplete."

msgid ":class:`list`"
msgstr ":class:`list`"

msgid "A dictionary of transformed arguments that were passed into the command. Similar to :attr:`args`\\, if this is accessed in the :func:`.on_command_error` event then this dict could be incomplete."
msgstr "A dictionary of transformed arguments that were passed into the command. Similar to :attr:`args`\\, if this is accessed in the :func:`.on_command_error` event then this dict could be incomplete."

msgid "The parameter that is currently being inspected and converted. This is only of use for within converters."
msgstr "The parameter that is currently being inspected and converted. This is only of use for within converters."

msgid "Optional[:class:`inspect.Parameter`]"
msgstr "Optional[:class:`inspect.Parameter`]"

msgid "The prefix that was used to invoke the command."
msgstr "The prefix that was used to invoke the command."

msgid "The command that is being invoked currently."
msgstr "The command that is being invoked currently."

msgid "The command name that triggered this invocation. Useful for finding out which alias called the command."
msgstr "The command name that triggered this invocation. Useful for finding out which alias called the command."

msgid "The command names of the parents that triggered this invocation. Useful for finding out which aliases called the command."
msgstr "The command names of the parents that triggered this invocation. Useful for finding out which aliases called the command."

msgid "For example in commands ``?a b c test``, the invoked parents are ``['a', 'b', 'c']``."
msgstr "For example in commands ``?a b c test``, the invoked parents are ``['a', 'b', 'c']``."

msgid "List[:class:`str`]"
msgstr "List[:class:`str`]"

msgid "The subcommand that was invoked. If no valid subcommand was invoked then this is equal to ``None``."
msgstr "The subcommand that was invoked. If no valid subcommand was invoked then this is equal to ``None``."

msgid "The string that was attempted to call a subcommand. This does not have to point to a valid registered subcommand and could just point to a nonsense string. If nothing was passed to attempt a call to a subcommand then this is set to ``None``."
msgstr "The string that was attempted to call a subcommand. This does not have to point to a valid registered subcommand and could just point to a nonsense string. If nothing was passed to attempt a call to a subcommand then this is set to ``None``."

msgid "A boolean that indicates if the command failed to be parsed, checked, or invoked."
msgstr "A boolean that indicates if the command failed to be parsed, checked, or invoked."

msgid "Returns an :class:`~discord.AsyncIterator` that enables receiving the destination's message history."
msgstr "Returns an :class:`~discord.AsyncIterator` that enables receiving the destination's message history."

msgid "You must have :attr:`~discord.Permissions.read_message_history` permissions to use this."
msgstr "You must have :attr:`~discord.Permissions.read_message_history` permissions to use this."

msgid "The number of messages to retrieve. If ``None``, retrieves every message in the channel. Note, however, that this would make it a slow operation."
msgstr "The number of messages to retrieve. If ``None``, retrieves every message in the channel. Note, however, that this would make it a slow operation."

msgid "Retrieve messages before this date or message. If a datetime is provided, it is recommended to use a UTC aware datetime. If the datetime is naive, it is assumed to be local time."
msgstr "Retrieve messages before this date or message. If a datetime is provided, it is recommended to use a UTC aware datetime. If the datetime is naive, it is assumed to be local time."

msgid "Retrieve messages after this date or message. If a datetime is provided, it is recommended to use a UTC aware datetime. If the datetime is naive, it is assumed to be local time."
msgstr "Retrieve messages after this date or message. If a datetime is provided, it is recommended to use a UTC aware datetime. If the datetime is naive, it is assumed to be local time."

msgid "Retrieve messages around this date or message. If a datetime is provided, it is recommended to use a UTC aware datetime. If the datetime is naive, it is assumed to be local time. When using this argument, the maximum limit is 101. Note that if the limit is an even number, then this will return at most limit + 1 messages."
msgstr "Retrieve messages around this date or message. If a datetime is provided, it is recommended to use a UTC aware datetime. If the datetime is naive, it is assumed to be local time. When using this argument, the maximum limit is 101. Note that if the limit is an even number, then this will return at most limit + 1 messages."

msgid "If set to ``True``, return messages in oldest->newest order. Defaults to ``True`` if ``after`` is specified, otherwise ``False``."
msgstr "If set to ``True``, return messages in oldest->newest order. Defaults to ``True`` if ``after`` is specified, otherwise ``False``."

msgid ":class:`~discord.Message` -- The message with the message data parsed."
msgstr ":class:`~discord.Message` -- The message with the message data parsed."

msgid "You do not have permissions to get channel message history."
msgstr "You do not have permissions to get channel message history."

msgid "The request to get message history failed."
msgstr "The request to get message history failed."

msgid ":sphinx_autodoc_typehints_type:`\\:py\\:class\\:\\`\\~discord.iterators.HistoryIterator\\``"
msgstr ":sphinx_autodoc_typehints_type:`\\:py\\:class\\:\\`\\~discord.iterators.HistoryIterator\\``"

msgid "Flattening into a list: ::"
msgstr "Flattening into a list: ::"

msgid "Returns a context manager that allows you to type for an indefinite period of time."
msgstr "Returns a context manager that allows you to type for an indefinite period of time."

msgid "This is useful for denoting long computations in your bot. :rtype: :sphinx_autodoc_typehints_type:`\\:py\\:class\\:\\`\\~discord.context\\_managers.Typing\\``"
msgstr "This is useful for denoting long computations in your bot. :rtype: :sphinx_autodoc_typehints_type:`\\:py\\:class\\:\\`\\~discord.context\\_managers.Typing\\``"

msgid "This is both a regular context manager and an async context manager. This means that both ``with`` and ``async with`` work with this."
msgstr "This is both a regular context manager and an async context manager. This means that both ``with`` and ``async with`` work with this."

msgid "Example Usage: ::"
msgstr "Example Usage: ::"

msgid "Calls a command with the arguments given."
msgstr "Calls a command with the arguments given."

msgid "This is useful if you want to just call the callback that a :class:`.Command` holds internally."
msgstr "This is useful if you want to just call the callback that a :class:`.Command` holds internally."

msgid "This does not handle converters, checks, cooldowns, pre-invoke, or after-invoke hooks in any matter. It calls the internal callback directly as-if it was a regular function."
msgstr "This does not handle converters, checks, cooldowns, pre-invoke, or after-invoke hooks in any matter. It calls the internal callback directly as-if it was a regular function."

msgid "You must take care in passing the proper arguments when using this function."
msgstr "You must take care in passing the proper arguments when using this function."

msgid "The command that is going to be called."
msgstr "The command that is going to be called."

msgid "The arguments to use."
msgstr "The arguments to use."

msgid "The keyword arguments to use."
msgstr "The keyword arguments to use."

msgid "The command argument to invoke is missing."
msgstr "The command argument to invoke is missing."

msgid "Calls the command again."
msgstr "Calls the command again."

msgid "This is similar to :meth:`~.Context.invoke` except that it bypasses checks, cooldowns, and error handlers."
msgstr "This is similar to :meth:`~.Context.invoke` except that it bypasses checks, cooldowns, and error handlers."

msgid "If you want to bypass :exc:`.UserInputError` derived exceptions, it is recommended to use the regular :meth:`~.Context.invoke` as it will work more naturally. After all, this will end up using the old arguments the user has used and will thus just fail again."
msgstr "If you want to bypass :exc:`.UserInputError` derived exceptions, it is recommended to use the regular :meth:`~.Context.invoke` as it will work more naturally. After all, this will end up using the old arguments the user has used and will thus just fail again."

msgid "Whether to call the before and after invoke hooks."
msgstr "Whether to call the before and after invoke hooks."

msgid "Whether to start the call chain from the very beginning or where we left off (i.e. the command that caused the error). The default is to start where we left off."
msgstr "Whether to start the call chain from the very beginning or where we left off (i.e. the command that caused the error). The default is to start where we left off."

msgid "The context to reinvoke is not valid."
msgstr "The context to reinvoke is not valid."

msgid "Checks if the invocation context is valid to be invoked with."
msgstr "Checks if the invocation context is valid to be invoked with."

msgid "The cleaned up invoke prefix. i.e. mentions are ``@name`` instead of ``<@id>``."
msgstr "The cleaned up invoke prefix. i.e. mentions are ``@name`` instead of ``<@id>``."

msgid "Returns the cog associated with this context's command. None if it does not exist."
msgstr "Returns the cog associated with this context's command. None if it does not exist."

msgid "Returns the guild associated with this context's command. None if not available."
msgstr "Returns the guild associated with this context's command. None if not available."

msgid "Returns the channel associated with this context's command. Shorthand for :attr:`.Message.channel`."
msgstr "Returns the channel associated with this context's command. Shorthand for :attr:`.Message.channel`."

msgid "Union[:class:`~discord.User`, :class:`.Member`]: Returns the author associated with this context's command. Shorthand for :attr:`.Message.author`"
msgstr "Union[:class:`~discord.User`, :class:`.Member`]: Returns the author associated with this context's command. Shorthand for :attr:`.Message.author`"

msgid "Union[:class:`.Member`, :class:`.ClientUser`]: Similar to :attr:`.Guild.me` except it may return the :class:`.ClientUser` in private message message contexts, or when :meth:`Intents.guilds` is absent."
msgstr "Union[:class:`.Member`, :class:`.ClientUser`]: Similar to :attr:`.Guild.me` except it may return the :class:`.ClientUser` in private message message contexts, or when :meth:`Intents.guilds` is absent."

msgid "A shortcut to :attr:`.Guild.voice_client`\\, if applicable."
msgstr "A shortcut to :attr:`.Guild.voice_client`\\, if applicable."

msgid "Shows the help command for the specified entity if given. The entity can be a command or a cog."
msgstr "Shows the help command for the specified entity if given. The entity can be a command or a cog."

msgid "If no entity is given, then it'll show help for the entire bot."
msgstr "If no entity is given, then it'll show help for the entire bot."

msgid "If the entity is a string, then it looks up whether it's a :class:`Cog` or a :class:`Command`."
msgstr "If the entity is a string, then it looks up whether it's a :class:`Cog` or a :class:`Command`."

msgid "Due to the way this function works, instead of returning something similar to :meth:`~.commands.HelpCommand.command_not_found` this returns :class:`None` on bad input or no help command."
msgstr "Due to the way this function works, instead of returning something similar to :meth:`~.commands.HelpCommand.command_not_found` this returns :class:`None` on bad input or no help command."

msgid "The entity to show help for."
msgstr "The entity to show help for."

msgid "The result of the help command, if any."
msgstr "The result of the help command, if any."

msgid "Returns a :class:`bool` indicating whether you have the permissions to send the object(s)."
msgstr "Returns a :class:`bool` indicating whether you have the permissions to send the object(s)."

msgid "Indicates whether you have the permissions to send the object(s)."
msgstr "Indicates whether you have the permissions to send the object(s)."

msgid "An invalid type has been passed."
msgstr "An invalid type has been passed."

msgid "Retrieves a single :class:`~discord.Message` from the destination."
msgstr "Retrieves a single :class:`~discord.Message` from the destination."

msgid "The message ID to look for."
msgstr "The message ID to look for."

msgid "The message asked for."
msgstr "The message asked for."

msgid ":class:`~discord.Message`"
msgstr ":class:`~discord.Message`"

msgid "The specified message was not found."
msgstr "The specified message was not found."

msgid "You do not have the permissions required to get a message."
msgstr "You do not have the permissions required to get a message."

msgid "Retrieving the message failed."
msgstr "Retrieving the message failed."

msgid "Retrieves all messages that are currently pinned in the channel."
msgstr "Retrieves all messages that are currently pinned in the channel."

msgid "Due to a limitation with the Discord API, the :class:`.Message` objects returned by this method do not contain complete :attr:`.Message.reactions` data."
msgstr "Due to a limitation with the Discord API, the :class:`.Message` objects returned by this method do not contain complete :attr:`.Message.reactions` data."

msgid "The messages that are currently pinned."
msgstr "The messages that are currently pinned."

msgid "List[:class:`~discord.Message`]"
msgstr "List[:class:`~discord.Message`]"

msgid "Retrieving the pinned messages failed."
msgstr "Retrieving the pinned messages failed."

msgid "A shortcut method to :meth:`.abc.Messageable.send` to reply to the :class:`.Message`."
msgstr "A shortcut method to :meth:`.abc.Messageable.send` to reply to the :class:`.Message`."

msgid "The message that was sent."
msgstr "The message that was sent."

msgid "Sending the message failed."
msgstr "Sending the message failed."

msgid "You do not have the proper permissions to send the message."
msgstr "You do not have the proper permissions to send the message."

msgid "The ``files`` list is not of the appropriate size, or     you specified both ``file`` and ``files``."
msgstr "The ``files`` list is not of the appropriate size, or     you specified both ``file`` and ``files``."

msgid "Sends a message to the destination with the content given."
msgstr "Sends a message to the destination with the content given."

msgid "The content must be a type that can convert to a string through ``str(content)``. If the content is set to ``None`` (the default), then the ``embed`` parameter must be provided."
msgstr "The content must be a type that can convert to a string through ``str(content)``. If the content is set to ``None`` (the default), then the ``embed`` parameter must be provided."

msgid "To upload a single file, the ``file`` parameter should be used with a single :class:`~discord.File` object. To upload multiple files, the ``files`` parameter should be used with a :class:`list` of :class:`~discord.File` objects. **Specifying both parameters will lead to an exception**."
msgstr "To upload a single file, the ``file`` parameter should be used with a single :class:`~discord.File` object. To upload multiple files, the ``files`` parameter should be used with a :class:`list` of :class:`~discord.File` objects. **Specifying both parameters will lead to an exception**."

msgid "To upload a single embed, the ``embed`` parameter should be used with a single :class:`~discord.Embed` object. To upload multiple embeds, the ``embeds`` parameter should be used with a :class:`list` of :class:`~discord.Embed` objects. **Specifying both parameters will lead to an exception**."
msgstr "To upload a single embed, the ``embed`` parameter should be used with a single :class:`~discord.Embed` object. To upload multiple embeds, the ``embeds`` parameter should be used with a :class:`list` of :class:`~discord.Embed` objects. **Specifying both parameters will lead to an exception**."

msgid "The content of the message to send."
msgstr "The content of the message to send."

msgid "Indicates if the message should be sent using text-to-speech."
msgstr "Indicates if the message should be sent using text-to-speech."

msgid "The rich embed for the content."
msgstr "The rich embed for the content."

msgid "The file to upload."
msgstr "The file to upload."

msgid "A list of files to upload. Must be a maximum of 10."
msgstr "A list of files to upload. Must be a maximum of 10."

msgid "The nonce to use for sending this message. If the message was successfully sent, then the message will have a nonce with this value."
msgstr "The nonce to use for sending this message. If the message was successfully sent, then the message will have a nonce with this value."

msgid "Whether :attr:`nonce` is enforced to be validated.  .. versionadded:: 2.5"
msgstr "Whether :attr:`nonce` is enforced to be validated.  .. versionadded:: 2.5"

msgid "Whether :attr:`nonce` is enforced to be validated."
msgstr "Whether :attr:`nonce` is enforced to be validated."

msgid "If provided, the number of seconds to wait in the background before deleting the message we just sent. If the deletion fails, then it is silently ignored."
msgstr "If provided, the number of seconds to wait in the background before deleting the message we just sent. If the deletion fails, then it is silently ignored."

msgid "Controls the mentions being processed in this message. If this is passed, then the object is merged with :attr:`~discord.Client.allowed_mentions`. The merging behaviour only overrides attributes that have been explicitly passed to the object, otherwise it uses the attributes set in :attr:`~discord.Client.allowed_mentions`. If no object is passed at all then the defaults given by :attr:`~discord.Client.allowed_mentions` are used instead.  .. versionadded:: 1.4"
msgstr "Controls the mentions being processed in this message. If this is passed, then the object is merged with :attr:`~discord.Client.allowed_mentions`. The merging behaviour only overrides attributes that have been explicitly passed to the object, otherwise it uses the attributes set in :attr:`~discord.Client.allowed_mentions`. If no object is passed at all then the defaults given by :attr:`~discord.Client.allowed_mentions` are used instead.  .. versionadded:: 1.4"

msgid "Controls the mentions being processed in this message. If this is passed, then the object is merged with :attr:`~discord.Client.allowed_mentions`. The merging behaviour only overrides attributes that have been explicitly passed to the object, otherwise it uses the attributes set in :attr:`~discord.Client.allowed_mentions`. If no object is passed at all then the defaults given by :attr:`~discord.Client.allowed_mentions` are used instead."
msgstr "Controls the mentions being processed in this message. If this is passed, then the object is merged with :attr:`~discord.Client.allowed_mentions`. The merging behaviour only overrides attributes that have been explicitly passed to the object, otherwise it uses the attributes set in :attr:`~discord.Client.allowed_mentions`. If no object is passed at all then the defaults given by :attr:`~discord.Client.allowed_mentions` are used instead."

msgid "A reference to the :class:`~discord.Message` to which you are replying, this can be created using :meth:`~discord.Message.to_reference` or passed directly as a :class:`~discord.Message`. You can control whether this mentions the author of the referenced message using the :attr:`~discord.AllowedMentions.replied_user` attribute of ``allowed_mentions`` or by setting ``mention_author``.  .. versionadded:: 1.6"
msgstr "A reference to the :class:`~discord.Message` to which you are replying, this can be created using :meth:`~discord.Message.to_reference` or passed directly as a :class:`~discord.Message`. You can control whether this mentions the author of the referenced message using the :attr:`~discord.AllowedMentions.replied_user` attribute of ``allowed_mentions`` or by setting ``mention_author``.  .. versionadded:: 1.6"

msgid "A reference to the :class:`~discord.Message` to which you are replying, this can be created using :meth:`~discord.Message.to_reference` or passed directly as a :class:`~discord.Message`. You can control whether this mentions the author of the referenced message using the :attr:`~discord.AllowedMentions.replied_user` attribute of ``allowed_mentions`` or by setting ``mention_author``."
msgstr "A reference to the :class:`~discord.Message` to which you are replying, this can be created using :meth:`~discord.Message.to_reference` or passed directly as a :class:`~discord.Message`. You can control whether this mentions the author of the referenced message using the :attr:`~discord.AllowedMentions.replied_user` attribute of ``allowed_mentions`` or by setting ``mention_author``."

msgid "If set, overrides the :attr:`~discord.AllowedMentions.replied_user` attribute of ``allowed_mentions``.  .. versionadded:: 1.6"
msgstr "If set, overrides the :attr:`~discord.AllowedMentions.replied_user` attribute of ``allowed_mentions``.  .. versionadded:: 1.6"

msgid "If set, overrides the :attr:`~discord.AllowedMentions.replied_user` attribute of ``allowed_mentions``."
msgstr "If set, overrides the :attr:`~discord.AllowedMentions.replied_user` attribute of ``allowed_mentions``."

msgid "A Discord UI View to add to the message."
msgstr "A Discord UI View to add to the message."

msgid "A list of embeds to upload. Must be a maximum of 10.  .. versionadded:: 2.0"
msgstr "A list of embeds to upload. Must be a maximum of 10.  .. versionadded:: 2.0"

msgid "A list of embeds to upload. Must be a maximum of 10."
msgstr "A list of embeds to upload. Must be a maximum of 10."

msgid "A list of stickers to upload. Must be a maximum of 3.  .. versionadded:: 2.0"
msgstr "A list of stickers to upload. Must be a maximum of 3.  .. versionadded:: 2.0"

msgid "A list of stickers to upload. Must be a maximum of 3."
msgstr "A list of stickers to upload. Must be a maximum of 3."

msgid "Whether to suppress embeds for the message."
msgstr "Whether to suppress embeds for the message."

msgid "Whether to suppress push and desktop notifications for the message.  .. versionadded:: 2.4"
msgstr "Whether to suppress push and desktop notifications for the message.  .. versionadded:: 2.4"

msgid "Whether to suppress push and desktop notifications for the message."
msgstr "Whether to suppress push and desktop notifications for the message."

msgid "The poll to send.  .. versionadded:: 2.6"
msgstr "The poll to send.  .. versionadded:: 2.6"

msgid "The poll to send."
msgstr "The poll to send."

msgid "The ``files`` list is not of the appropriate size,     you specified both ``file`` and ``files``,     or you specified both ``embed`` and ``embeds``,     or the ``reference`` object is not a :class:`~discord.Message`,     :class:`~discord.MessageReference` or :class:`~discord.PartialMessage`."
msgstr "The ``files`` list is not of the appropriate size,     you specified both ``file`` and ``files``,     or you specified both ``embed`` and ``embeds``,     or the ``reference`` object is not a :class:`~discord.Message`,     :class:`~discord.MessageReference` or :class:`~discord.PartialMessage`."

msgid "Triggers a *typing* indicator to the destination."
msgstr "Triggers a *typing* indicator to the destination."

msgid "*Typing* indicator will go away after 10 seconds, or after a message is sent."
msgstr "*Typing* indicator will go away after 10 seconds, or after a message is sent."

msgid "Converters"
msgstr "Converters"

msgid "The base class of custom converters that require the :class:`.Context` to be passed to be useful."
msgstr "The base class of custom converters that require the :class:`.Context` to be passed to be useful."

msgid "This allows you to implement converters that function similar to the special cased ``discord`` classes."
msgstr "This allows you to implement converters that function similar to the special cased ``discord`` classes."

msgid "Classes that derive from this should override the :meth:`~.Converter.convert` method to do its conversion logic. This method must be a :ref:`coroutine <coroutine>`."
msgstr "Classes that derive from this should override the :meth:`~.Converter.convert` method to do its conversion logic. This method must be a :ref:`coroutine <coroutine>`."

msgid "The method to override to do conversion logic."
msgstr "The method to override to do conversion logic."

msgid "If an error is found while converting, it is recommended to raise a :exc:`.CommandError` derived exception as it will properly propagate to the error handlers."
msgstr "If an error is found while converting, it is recommended to raise a :exc:`.CommandError` derived exception as it will properly propagate to the error handlers."

msgid "The invocation context that the argument is being used in."
msgstr "The invocation context that the argument is being used in."

msgid "The argument that is being converted."
msgstr "The argument that is being converted."

msgid "A generic exception occurred when converting the argument."
msgstr "A generic exception occurred when converting the argument."

msgid "The converter failed to convert the argument."
msgstr "The converter failed to convert the argument."

msgid ":sphinx_autodoc_typehints_type:`\\:py\\:class\\:\\`\\~typing.TypeVar\\`\\\\ \\\\\\(\\`\\`T\\_co\\`\\`\\, covariant\\=True\\)`"
msgstr ":sphinx_autodoc_typehints_type:`\\:py\\:class\\:\\`\\~typing.TypeVar\\`\\\\ \\\\\\(\\`\\`T\\_co\\`\\`\\, covariant\\=True\\)`"

msgid "Converts to a :class:`~discord.Object`."
msgstr "Converts to a :class:`~discord.Object`."

msgid "The argument must follow the valid ID or mention formats (e.g. `<@80088516616269824>`)."
msgstr "The argument must follow the valid ID or mention formats (e.g. `<@80088516616269824>`)."

msgid "The lookup strategy is as follows (in order):"
msgstr "The lookup strategy is as follows (in order):"

msgid "Lookup by ID."
msgstr "Lookup by ID."

msgid "Lookup by member, role, or channel mention."
msgstr "Lookup by member, role, or channel mention."

msgid ":sphinx_autodoc_typehints_type:`\\:py\\:class\\:\\`\\~discord.object.Object\\``"
msgstr ":sphinx_autodoc_typehints_type:`\\:py\\:class\\:\\`\\~discord.object.Object\\``"

msgid "Converts to a :class:`~discord.Member`."
msgstr "Converts to a :class:`~discord.Member`."

msgid "All lookups are via the local guild. If in a DM context, then the lookup is done by the global cache."
msgstr "All lookups are via the local guild. If in a DM context, then the lookup is done by the global cache."

msgid "Lookup by mention."
msgstr "Lookup by mention."

msgid "Lookup by name#discrim"
msgstr "Lookup by name#discrim"

msgid "Lookup by name"
msgstr "Lookup by name"

msgid "Lookup by nickname"
msgstr "Lookup by nickname"

msgid "Raise :exc:`.MemberNotFound` instead of generic :exc:`.BadArgument`"
msgstr "Raise :exc:`.MemberNotFound` instead of generic :exc:`.BadArgument`"

msgid "This converter now lazily fetches members from the gateway and HTTP APIs, optionally caching the result if :attr:`.MemberCacheFlags.joined` is enabled."
msgstr "This converter now lazily fetches members from the gateway and HTTP APIs, optionally caching the result if :attr:`.MemberCacheFlags.joined` is enabled."

msgid ":sphinx_autodoc_typehints_type:`\\:py\\:class\\:\\`\\~discord.member.Member\\``"
msgstr ":sphinx_autodoc_typehints_type:`\\:py\\:class\\:\\`\\~discord.member.Member\\``"

msgid "Converts to a :class:`~discord.User`."
msgstr "Converts to a :class:`~discord.User`."

msgid "All lookups are via the global user cache."
msgstr "All lookups are via the global user cache."

msgid "Raise :exc:`.UserNotFound` instead of generic :exc:`.BadArgument`"
msgstr "Raise :exc:`.UserNotFound` instead of generic :exc:`.BadArgument`"

msgid "This converter now lazily fetches users from the HTTP APIs if an ID is passed, and it's not available in cache."
msgstr "This converter now lazily fetches users from the HTTP APIs if an ID is passed, and it's not available in cache."

msgid ":sphinx_autodoc_typehints_type:`\\:py\\:class\\:\\`\\~discord.user.User\\``"
msgstr ":sphinx_autodoc_typehints_type:`\\:py\\:class\\:\\`\\~discord.user.User\\``"

msgid "Converts to a :class:`discord.Message`."
msgstr "Converts to a :class:`discord.Message`."

msgid "Lookup by \"{channel ID}-{message ID}\" (retrieved by shift-clicking on \"Copy ID\")"
msgstr "Lookup by \"{channel ID}-{message ID}\" (retrieved by shift-clicking on \"Copy ID\")"

msgid "Lookup by message ID (the message **must** be in the context channel)"
msgstr "Lookup by message ID (the message **must** be in the context channel)"

msgid "Lookup by message URL"
msgstr "Lookup by message URL"

msgid "Raise :exc:`.ChannelNotFound`, :exc:`.MessageNotFound` or :exc:`.ChannelNotReadable` instead of generic :exc:`.BadArgument`"
msgstr "Raise :exc:`.ChannelNotFound`, :exc:`.MessageNotFound` or :exc:`.ChannelNotReadable` instead of generic :exc:`.BadArgument`"

msgid ":sphinx_autodoc_typehints_type:`\\:py\\:class\\:\\`\\~discord.message.Message\\``"
msgstr ":sphinx_autodoc_typehints_type:`\\:py\\:class\\:\\`\\~discord.message.Message\\``"

msgid "Converts to a :class:`discord.PartialMessage`."
msgstr "Converts to a :class:`discord.PartialMessage`."

msgid "The creation strategy is as follows (in order):"
msgstr "The creation strategy is as follows (in order):"

msgid "By \"{channel ID}-{message ID}\" (retrieved by shift-clicking on \"Copy ID\")"
msgstr "By \"{channel ID}-{message ID}\" (retrieved by shift-clicking on \"Copy ID\")"

msgid "By message ID (The message is assumed to be in the context channel.)"
msgstr "By message ID (The message is assumed to be in the context channel.)"

msgid "By message URL"
msgstr "By message URL"

msgid ":sphinx_autodoc_typehints_type:`\\:py\\:class\\:\\`\\~discord.message.PartialMessage\\``"
msgstr ":sphinx_autodoc_typehints_type:`\\:py\\:class\\:\\`\\~discord.message.PartialMessage\\``"

msgid "Converts to a :class:`~discord.abc.GuildChannel`."
msgstr "Converts to a :class:`~discord.abc.GuildChannel`."

msgid "Lookup by name."
msgstr "Lookup by name."

msgid ":sphinx_autodoc_typehints_type:`\\:py\\:class\\:\\`\\~discord.abc.GuildChannel\\``"
msgstr ":sphinx_autodoc_typehints_type:`\\:py\\:class\\:\\`\\~discord.abc.GuildChannel\\``"

msgid "Converts to a :class:`~discord.TextChannel`."
msgstr "Converts to a :class:`~discord.TextChannel`."

msgid "Raise :exc:`.ChannelNotFound` instead of generic :exc:`.BadArgument`"
msgstr "Raise :exc:`.ChannelNotFound` instead of generic :exc:`.BadArgument`"

msgid ":sphinx_autodoc_typehints_type:`\\:py\\:class\\:\\`\\~discord.channel.TextChannel\\``"
msgstr ":sphinx_autodoc_typehints_type:`\\:py\\:class\\:\\`\\~discord.channel.TextChannel\\``"

msgid "Converts to a :class:`~discord.VoiceChannel`."
msgstr "Converts to a :class:`~discord.VoiceChannel`."

msgid ":sphinx_autodoc_typehints_type:`\\:py\\:class\\:\\`\\~discord.channel.VoiceChannel\\``"
msgstr ":sphinx_autodoc_typehints_type:`\\:py\\:class\\:\\`\\~discord.channel.VoiceChannel\\``"

msgid "Converts to a :class:`~discord.StageChannel`."
msgstr "Converts to a :class:`~discord.StageChannel`."

msgid ":sphinx_autodoc_typehints_type:`\\:py\\:class\\:\\`\\~discord.channel.StageChannel\\``"
msgstr ":sphinx_autodoc_typehints_type:`\\:py\\:class\\:\\`\\~discord.channel.StageChannel\\``"

msgid "Converts to a :class:`~discord.CategoryChannel`."
msgstr "Converts to a :class:`~discord.CategoryChannel`."

msgid ":sphinx_autodoc_typehints_type:`\\:py\\:class\\:\\`\\~discord.channel.CategoryChannel\\``"
msgstr ":sphinx_autodoc_typehints_type:`\\:py\\:class\\:\\`\\~discord.channel.CategoryChannel\\``"

msgid "Converts to a :class:`~discord.ForumChannel`."
msgstr "Converts to a :class:`~discord.ForumChannel`."

msgid ":sphinx_autodoc_typehints_type:`\\:py\\:class\\:\\`\\~discord.channel.ForumChannel\\``"
msgstr ":sphinx_autodoc_typehints_type:`\\:py\\:class\\:\\`\\~discord.channel.ForumChannel\\``"

msgid "Converts to a :class:`~discord.Invite`."
msgstr "Converts to a :class:`~discord.Invite`."

msgid "This is done via an HTTP request using :meth:`.Bot.fetch_invite`."
msgstr "This is done via an HTTP request using :meth:`.Bot.fetch_invite`."

msgid "Raise :exc:`.BadInviteArgument` instead of generic :exc:`.BadArgument`"
msgstr "Raise :exc:`.BadInviteArgument` instead of generic :exc:`.BadArgument`"

msgid ":sphinx_autodoc_typehints_type:`\\:py\\:class\\:\\`\\~discord.invite.Invite\\``"
msgstr ":sphinx_autodoc_typehints_type:`\\:py\\:class\\:\\`\\~discord.invite.Invite\\``"

msgid "Converts to a :class:`~discord.Guild`."
msgstr "Converts to a :class:`~discord.Guild`."

msgid "Lookup by name. (There is no disambiguation for Guilds with multiple matching names)."
msgstr "Lookup by name. (There is no disambiguation for Guilds with multiple matching names)."

msgid ":sphinx_autodoc_typehints_type:`\\:py\\:class\\:\\`\\~discord.guild.Guild\\``"
msgstr ":sphinx_autodoc_typehints_type:`\\:py\\:class\\:\\`\\~discord.guild.Guild\\``"

msgid "Converts to a :class:`~discord.Role`."
msgstr "Converts to a :class:`~discord.Role`."

msgid "All lookups are via the local guild. If in a DM context, the converter raises :exc:`.NoPrivateMessage` exception."
msgstr "All lookups are via the local guild. If in a DM context, the converter raises :exc:`.NoPrivateMessage` exception."

msgid "Raise :exc:`.RoleNotFound` instead of generic :exc:`.BadArgument`"
msgstr "Raise :exc:`.RoleNotFound` instead of generic :exc:`.BadArgument`"

msgid ":sphinx_autodoc_typehints_type:`\\:py\\:class\\:\\`\\~discord.role.Role\\``"
msgstr ":sphinx_autodoc_typehints_type:`\\:py\\:class\\:\\`\\~discord.role.Role\\``"

msgid "Converts to :class:`~discord.Game`."
msgstr "Converts to :class:`~discord.Game`."

msgid ":sphinx_autodoc_typehints_type:`\\:py\\:class\\:\\`\\~discord.activity.Game\\``"
msgstr ":sphinx_autodoc_typehints_type:`\\:py\\:class\\:\\`\\~discord.activity.Game\\``"

msgid "Converts to a :class:`~discord.Colour`."
msgstr "Converts to a :class:`~discord.Colour`."

msgid "Add an alias named ColorConverter"
msgstr "Add an alias named ColorConverter"

msgid "The following formats are accepted:"
msgstr "The following formats are accepted:"

msgid "``0x<hex>``"
msgstr "``0x<hex>``"

msgid "``#<hex>``"
msgstr "``#<hex>``"

msgid "``0x#<hex>``"
msgstr "``0x#<hex>``"

msgid "``rgb(<number>, <number>, <number>)``"
msgstr "``rgb(<number>, <number>, <number>)``"

msgid "Any of the ``classmethod`` in :class:`~discord.Colour`"
msgstr "Any of the ``classmethod`` in :class:`~discord.Colour`"

msgid "The ``_`` in the name can be optionally replaced with spaces."
msgstr "The ``_`` in the name can be optionally replaced with spaces."

msgid "Like CSS, ``<number>`` can be either 0-255 or 0-100% and ``<hex>`` can be either a 6 digit hex number or a 3 digit hex shortcut (e.g. #fff)."
msgstr "Like CSS, ``<number>`` can be either 0-255 or 0-100% and ``<hex>`` can be either a 6 digit hex number or a 3 digit hex shortcut (e.g. #fff)."

msgid "Raise :exc:`.BadColourArgument` instead of generic :exc:`.BadArgument`"
msgstr "Raise :exc:`.BadColourArgument` instead of generic :exc:`.BadArgument`"

msgid "Added support for ``rgb`` function and 3-digit hex shortcuts"
msgstr "Added support for ``rgb`` function and 3-digit hex shortcuts"

msgid ":sphinx_autodoc_typehints_type:`\\:py\\:class\\:\\`\\~discord.colour.Colour\\``"
msgstr ":sphinx_autodoc_typehints_type:`\\:py\\:class\\:\\`\\~discord.colour.Colour\\``"

msgid "Converts to a :class:`~discord.Emoji`."
msgstr "Converts to a :class:`~discord.Emoji`."

msgid "All lookups are done for the local guild first, if available. If that lookup fails, then it checks the client's global cache."
msgstr "All lookups are done for the local guild first, if available. If that lookup fails, then it checks the client's global cache."

msgid "Lookup by extracting ID from the emoji."
msgstr "Lookup by extracting ID from the emoji."

msgid "Raise :exc:`.EmojiNotFound` instead of generic :exc:`.BadArgument`"
msgstr "Raise :exc:`.EmojiNotFound` instead of generic :exc:`.BadArgument`"

msgid ":sphinx_autodoc_typehints_type:`\\:py\\:class\\:\\`\\~discord.emoji.Emoji\\``"
msgstr ":sphinx_autodoc_typehints_type:`\\:py\\:class\\:\\`\\~discord.emoji.Emoji\\``"

msgid "Converts to a :class:`~discord.PartialEmoji`."
msgstr "Converts to a :class:`~discord.PartialEmoji`."

msgid "This is done by extracting the animated flag, name and ID from the emoji."
msgstr "This is done by extracting the animated flag, name and ID from the emoji."

msgid "Raise :exc:`.PartialEmojiConversionFailure` instead of generic :exc:`.BadArgument`"
msgstr "Raise :exc:`.PartialEmojiConversionFailure` instead of generic :exc:`.BadArgument`"

msgid ":sphinx_autodoc_typehints_type:`\\:py\\:class\\:\\`\\~discord.partial\\_emoji.PartialEmoji\\``"
msgstr ":sphinx_autodoc_typehints_type:`\\:py\\:class\\:\\`\\~discord.partial\\_emoji.PartialEmoji\\``"

msgid "Coverts to a :class:`~discord.Thread`."
msgstr "Coverts to a :class:`~discord.Thread`."

msgid "All lookups are via the local guild."
msgstr "All lookups are via the local guild."

msgid ":sphinx_autodoc_typehints_type:`\\:py\\:class\\:\\`\\~discord.threads.Thread\\``"
msgstr ":sphinx_autodoc_typehints_type:`\\:py\\:class\\:\\`\\~discord.threads.Thread\\``"

msgid "Converts to a :class:`~discord.GuildSticker`."
msgstr "Converts to a :class:`~discord.GuildSticker`."

msgid "1. Lookup by ID. 3. Lookup by name"
msgstr "1. Lookup by ID. 3. Lookup by name"

msgid ":sphinx_autodoc_typehints_type:`\\:py\\:class\\:\\`\\~discord.sticker.GuildSticker\\``"
msgstr ":sphinx_autodoc_typehints_type:`\\:py\\:class\\:\\`\\~discord.sticker.GuildSticker\\``"

msgid "Converts the argument to mention scrubbed version of said content."
msgstr "Converts the argument to mention scrubbed version of said content."

msgid "This behaves similarly to :attr:`~discord.Message.clean_content`."
msgstr "This behaves similarly to :attr:`~discord.Message.clean_content`."

msgid "Whether to clean channel mentions."
msgstr "Whether to clean channel mentions."

msgid "Whether to use nicknames when transforming mentions."
msgstr "Whether to use nicknames when transforming mentions."

msgid "Whether to also escape special markdown characters."
msgstr "Whether to also escape special markdown characters."

msgid "Whether to also remove special markdown characters. This option is not supported with ``escape_markdown``"
msgstr "Whether to also remove special markdown characters. This option is not supported with ``escape_markdown``"

msgid "A special converter that greedily consumes arguments until it can't. As a consequence of this behaviour, most input errors are silently discarded, since it is used as an indicator of when to stop parsing."
msgstr "A special converter that greedily consumes arguments until it can't. As a consequence of this behaviour, most input errors are silently discarded, since it is used as an indicator of when to stop parsing."

msgid "When a parser error is met the greedy converter stops converting, undoes the internal string parsing routine, and continues parsing regularly."
msgstr "When a parser error is met the greedy converter stops converting, undoes the internal string parsing routine, and continues parsing regularly."

msgid "For example, in the following code:"
msgstr "For example, in the following code:"

msgid "An invocation of ``[p]test 1 2 3 4 5 6 hello`` would pass ``numbers`` with ``[1, 2, 3, 4, 5, 6]`` and ``reason`` with ``hello``\\."
msgstr "An invocation of ``[p]test 1 2 3 4 5 6 hello`` would pass ``numbers`` with ``[1, 2, 3, 4, 5, 6]`` and ``reason`` with ``hello``\\."

msgid "For more information, check :ref:`ext_commands_special_converters`."
msgstr "For more information, check :ref:`ext_commands_special_converters`."

msgid "Runs converters for a given converter, argument, and parameter."
msgstr "Runs converters for a given converter, argument, and parameter."

msgid "This function does the same work that the library does under the hood."
msgstr "This function does the same work that the library does under the hood."

msgid "The invocation context to run the converters under."
msgstr "The invocation context to run the converters under."

msgid "The converter to run, this corresponds to the annotation in the function."
msgstr "The converter to run, this corresponds to the annotation in the function."

msgid "The argument to convert to."
msgstr "The argument to convert to."

msgid "The parameter being converted. This is mainly for error reporting."
msgstr "The parameter being converted. This is mainly for error reporting."

msgid "The resulting conversion."
msgstr "The resulting conversion."

msgid "The converter failed to convert."
msgstr "The converter failed to convert."

msgid "Flag Converter"
msgstr "Flag Converter"

msgid "A converter that allows for a user-friendly flag syntax."
msgstr "A converter that allows for a user-friendly flag syntax."

msgid "The flags are defined using :pep:`526` type annotations similar to the :mod:`dataclasses` Python module. For more information on how this converter works, check the appropriate :ref:`documentation <ext_commands_flag_converter>`."
msgstr "The flags are defined using :pep:`526` type annotations similar to the :mod:`dataclasses` Python module. For more information on how this converter works, check the appropriate :ref:`documentation <ext_commands_flag_converter>`."

msgid "Returns an iterator of ``(flag_name, flag_value)`` pairs. This allows it to be, for example, constructed as a dict or a list of pairs. Note that aliases are not shown."
msgstr "Returns an iterator of ``(flag_name, flag_value)`` pairs. This allows it to be, for example, constructed as a dict or a list of pairs. Note that aliases are not shown."

msgid "A class parameter to toggle case insensitivity of the flag parsing. If ``True`` then flags are parsed in a case-insensitive manner. Defaults to ``False``."
msgstr "A class parameter to toggle case insensitivity of the flag parsing. If ``True`` then flags are parsed in a case-insensitive manner. Defaults to ``False``."

msgid "The prefix that all flags must be prefixed with. By default, there is no prefix."
msgstr "The prefix that all flags must be prefixed with. By default, there is no prefix."

msgid "The delimiter that separates a flag's argument from the flag's name. By default, this is ``:``."
msgstr "The delimiter that separates a flag's argument from the flag's name. By default, this is ``:``."

msgid "A mapping of flag name to flag object this converter has."
msgstr "A mapping of flag name to flag object this converter has."

msgid ":sphinx_autodoc_typehints_type:`\\:py\\:class\\:\\`dict\\`\\\\ \\\\\\[\\:py\\:class\\:\\`str\\`\\, \\:py\\:class\\:\\`\\~discord.ext.commands.flags.Flag\\`\\]`"
msgstr ":sphinx_autodoc_typehints_type:`\\:py\\:class\\:\\`dict\\`\\\\ \\\\\\[\\:py\\:class\\:\\`str\\`\\, \\:py\\:class\\:\\`\\~discord.ext.commands.flags.Flag\\`\\]`"

msgid "The method that actually converters an argument to the flag mapping."
msgstr "The method that actually converters an argument to the flag mapping."

msgid "The flag converter class."
msgstr "The flag converter class."

msgid "The argument to convert from."
msgstr "The argument to convert from."

msgid "The flag converter instance with all flags parsed."
msgstr "The flag converter instance with all flags parsed."

msgid ":class:`FlagConverter`"
msgstr ":class:`FlagConverter`"

msgid "A flag related parsing error."
msgstr "A flag related parsing error."

msgid "A command related error."
msgstr "A command related error."

msgid "Represents a flag parameter for :class:`FlagConverter`."
msgstr "Represents a flag parameter for :class:`FlagConverter`."

msgid "The :func:`~discord.ext.commands.flag` function helps create these flag objects, but it is not necessary to do so. These cannot be constructed manually."
msgstr "The :func:`~discord.ext.commands.flag` function helps create these flag objects, but it is not necessary to do so. These cannot be constructed manually."

msgid "The name of the flag."
msgstr "The name of the flag."

msgid "The aliases of the flag name."
msgstr "The aliases of the flag name."

msgid "The attribute in the class that corresponds to this flag."
msgstr "The attribute in the class that corresponds to this flag."

msgid "The default value of the flag, if available."
msgstr "The default value of the flag, if available."

msgid "Any"
msgstr "Any"

msgid "The underlying evaluated annotation of the flag."
msgstr "The underlying evaluated annotation of the flag."

msgid "The maximum number of arguments the flag can accept. A negative value indicates an unlimited amount of arguments."
msgstr "The maximum number of arguments the flag can accept. A negative value indicates an unlimited amount of arguments."

msgid "Whether multiple given values overrides the previous value."
msgstr "Whether multiple given values overrides the previous value."

msgid "Whether the flag is required."
msgstr "Whether the flag is required."

msgid "A required flag has no default value."
msgstr "A required flag has no default value."

msgid "Override default functionality and parameters of the underlying :class:`FlagConverter` class attributes."
msgstr "Override default functionality and parameters of the underlying :class:`FlagConverter` class attributes."

msgid "The flag name. If not given, defaults to the attribute name."
msgstr "The flag name. If not given, defaults to the attribute name."

msgid "Aliases to the flag name. If not given, no aliases are set."
msgstr "Aliases to the flag name. If not given, no aliases are set."

msgid "The default parameter. This could be either a value or a callable that takes :class:`Context` as its sole parameter. If not given then it defaults to the default value given to the attribute."
msgstr "The default parameter. This could be either a value or a callable that takes :class:`Context` as its sole parameter. If not given then it defaults to the default value given to the attribute."

msgid "The maximum number of arguments the flag can accept. A negative value indicates an unlimited amount of arguments. The default value depends on the annotation given."
msgstr "The maximum number of arguments the flag can accept. A negative value indicates an unlimited amount of arguments. The default value depends on the annotation given."

msgid "Whether multiple given values overrides the previous value. The default value depends on the annotation given."
msgstr "Whether multiple given values overrides the previous value. The default value depends on the annotation given."

msgid ":sphinx_autodoc_typehints_type:`\\:py\\:data\\:\\`\\~typing.Any\\``"
msgstr ":sphinx_autodoc_typehints_type:`\\:py\\:data\\:\\`\\~typing.Any\\``"

msgid "Exceptions"
msgstr "Exceptions"

msgid "The base exception type for all command related errors."
msgstr "The base exception type for all command related errors."

msgid "This inherits from :exc:`discord.DiscordException`."
msgstr "This inherits from :exc:`discord.DiscordException`."

msgid "This exception and exceptions inherited from it are handled in a special way as they are caught and passed into a special event from :class:`.Bot`\\, :func:`.on_command_error`."
msgstr "This exception and exceptions inherited from it are handled in a special way as they are caught and passed into a special event from :class:`.Bot`\\, :func:`.on_command_error`."

msgid "Exception raised when a Converter class raises non-CommandError."
msgstr "Exception raised when a Converter class raises non-CommandError."

msgid "This inherits from :exc:`CommandError`."
msgstr "This inherits from :exc:`CommandError`."

msgid "The converter that failed."
msgstr "The converter that failed."

msgid ":class:`discord.ext.commands.Converter`"
msgstr ":class:`discord.ext.commands.Converter`"

msgid "The original exception that was raised. You can also get this via the ``__cause__`` attribute."
msgstr "The original exception that was raised. You can also get this via the ``__cause__`` attribute."

msgid ":exc:`Exception`"
msgstr ":exc:`Exception`"

msgid "Exception raised when parsing a command and a parameter that is required is not encountered."
msgstr "Exception raised when parsing a command and a parameter that is required is not encountered."

msgid "This inherits from :exc:`UserInputError`"
msgstr "This inherits from :exc:`UserInputError`"

msgid "The argument that is missing."
msgstr "The argument that is missing."

msgid ":class:`inspect.Parameter`"
msgstr ":class:`inspect.Parameter`"

msgid "An exception raised when the parser fails to parse a user's input."
msgstr "An exception raised when the parser fails to parse a user's input."

msgid "This inherits from :exc:`UserInputError`."
msgstr "This inherits from :exc:`UserInputError`."

msgid "There are child classes that implement more granular parsing errors for i18n purposes."
msgstr "There are child classes that implement more granular parsing errors for i18n purposes."

msgid "An exception raised when the parser encounters a quote mark inside a non-quoted string."
msgstr "An exception raised when the parser encounters a quote mark inside a non-quoted string."

msgid "This inherits from :exc:`ArgumentParsingError`."
msgstr "This inherits from :exc:`ArgumentParsingError`."

msgid "The quote mark that was found inside the non-quoted string."
msgstr "The quote mark that was found inside the non-quoted string."

msgid "An exception raised when a space is expected after the closing quote in a string but a different character is found."
msgstr "An exception raised when a space is expected after the closing quote in a string but a different character is found."

msgid "The character found instead of the expected string."
msgstr "The character found instead of the expected string."

msgid "An exception raised when a quote character is expected but not found."
msgstr "An exception raised when a quote character is expected but not found."

msgid "The quote character expected."
msgstr "The quote character expected."

msgid "Exception raised when a parsing or conversion failure is encountered on an argument to pass into a command."
msgstr "Exception raised when a parsing or conversion failure is encountered on an argument to pass into a command."

msgid "Exception raised when a :data:`typing.Union` converter fails for all its associated types."
msgstr "Exception raised when a :data:`typing.Union` converter fails for all its associated types."

msgid "The parameter that failed being converted."
msgstr "The parameter that failed being converted."

msgid "A tuple of converters attempted in conversion, in order of failure."
msgstr "A tuple of converters attempted in conversion, in order of failure."

msgid "Tuple[Type, ``...``]"
msgstr "Tuple[Type, ``...``]"

msgid "A list of errors that were caught from failing the conversion."
msgstr "A list of errors that were caught from failing the conversion."

msgid "List[:class:`CommandError`]"
msgstr "List[:class:`CommandError`]"

msgid "Exception raised when a :data:`typing.Literal` converter fails for all its associated values."
msgstr "Exception raised when a :data:`typing.Literal` converter fails for all its associated values."

msgid "A tuple of values compared against in conversion, in order of failure."
msgstr "A tuple of values compared against in conversion, in order of failure."

msgid "Tuple[Any, ``...``]"
msgstr "Tuple[Any, ``...``]"

msgid "Exception raised when an operation does not work outside of private message contexts."
msgstr "Exception raised when an operation does not work outside of private message contexts."

msgid "This inherits from :exc:`CheckFailure`"
msgstr "This inherits from :exc:`CheckFailure`"

msgid "Exception raised when an operation does not work in private message contexts."
msgstr "Exception raised when an operation does not work in private message contexts."

msgid "Exception raised when the predicates in :attr:`.Command.checks` have failed."
msgstr "Exception raised when the predicates in :attr:`.Command.checks` have failed."

msgid "This inherits from :exc:`CommandError`"
msgstr "This inherits from :exc:`CommandError`"

msgid "Exception raised when all predicates in :func:`check_any` fail."
msgstr "Exception raised when all predicates in :func:`check_any` fail."

msgid "This inherits from :exc:`CheckFailure`."
msgstr "This inherits from :exc:`CheckFailure`."

msgid "A list of errors that were caught during execution."
msgstr "A list of errors that were caught during execution."

msgid "List[:class:`CheckFailure`]"
msgstr "List[:class:`CheckFailure`]"

msgid "A list of check predicates that failed."
msgstr "A list of check predicates that failed."

msgid "List[Callable[[:class:`Context`], :class:`bool`]]"
msgstr "List[Callable[[:class:`Context`], :class:`bool`]]"

msgid "Exception raised when a command is attempted to be invoked but no command under that name is found."
msgstr "Exception raised when a command is attempted to be invoked but no command under that name is found."

msgid "This is not raised for invalid subcommands, rather just the initial main command that is attempted to be invoked."
msgstr "This is not raised for invalid subcommands, rather just the initial main command that is attempted to be invoked."

msgid "Exception raised when the command being invoked is disabled."
msgstr "Exception raised when the command being invoked is disabled."

msgid "Exception raised when the command being invoked raised an exception."
msgstr "Exception raised when the command being invoked raised an exception."

msgid "Exception raised when the command was passed too many arguments and its :attr:`.Command.ignore_extra` attribute was not set to ``True``."
msgstr "Exception raised when the command was passed too many arguments and its :attr:`.Command.ignore_extra` attribute was not set to ``True``."

msgid "The base exception type for errors that involve errors regarding user input."
msgstr "The base exception type for errors that involve errors regarding user input."

msgid "Exception raised when the command being invoked is on cooldown."
msgstr "Exception raised when the command being invoked is on cooldown."

msgid "A class with attributes ``rate`` and ``per`` similar to the :func:`.cooldown` decorator."
msgstr "A class with attributes ``rate`` and ``per`` similar to the :func:`.cooldown` decorator."

msgid ":class:`.Cooldown`"
msgstr ":class:`.Cooldown`"

msgid "The type associated with the cooldown."
msgstr "The type associated with the cooldown."

msgid ":class:`BucketType`"
msgstr ":class:`BucketType`"

msgid "The amount of seconds to wait before you can retry again."
msgstr "The amount of seconds to wait before you can retry again."

msgid "Exception raised when the command being invoked has reached its maximum concurrency."
msgstr "Exception raised when the command being invoked has reached its maximum concurrency."

msgid "The maximum number of concurrent invokers allowed."
msgstr "The maximum number of concurrent invokers allowed."

msgid "The bucket type passed to the :func:`.max_concurrency` decorator."
msgstr "The bucket type passed to the :func:`.max_concurrency` decorator."

msgid ":class:`.BucketType`"
msgstr ":class:`.BucketType`"

msgid "Exception raised when the message author is not the owner of the bot."
msgstr "Exception raised when the message author is not the owner of the bot."

msgid "Exception raised when the message provided was not found in the channel."
msgstr "Exception raised when the message provided was not found in the channel."

msgid "This inherits from :exc:`BadArgument`"
msgstr "This inherits from :exc:`BadArgument`"

msgid "The message supplied by the caller that was not found"
msgstr "The message supplied by the caller that was not found"

msgid "Exception raised when the member provided was not found in the bot's cache."
msgstr "Exception raised when the member provided was not found in the bot's cache."

msgid "The member supplied by the caller that was not found"
msgstr "The member supplied by the caller that was not found"

msgid "Exception raised when the guild provided was not found in the bot's cache."
msgstr "Exception raised when the guild provided was not found in the bot's cache."

msgid "The guild supplied by the called that was not found"
msgstr "The guild supplied by the called that was not found"

msgid "Exception raised when the user provided was not found in the bot's cache."
msgstr "Exception raised when the user provided was not found in the bot's cache."

msgid "The user supplied by the caller that was not found"
msgstr "The user supplied by the caller that was not found"

msgid "Exception raised when the bot can not find the channel."
msgstr "Exception raised when the bot can not find the channel."

msgid "The channel supplied by the caller that was not found"
msgstr "The channel supplied by the caller that was not found"

msgid "Exception raised when the bot does not have permission to read messages in the channel."
msgstr "Exception raised when the bot does not have permission to read messages in the channel."

msgid "The channel supplied by the caller that was not readable"
msgstr "The channel supplied by the caller that was not readable"

msgid "Union[:class:`.abc.GuildChannel`, :class:`.Thread`]"
msgstr "Union[:class:`.abc.GuildChannel`, :class:`.Thread`]"

msgid "Exception raised when the bot can not find the thread."
msgstr "Exception raised when the bot can not find the thread."

msgid "The thread supplied by the caller that was not found"
msgstr "The thread supplied by the caller that was not found"

msgid "Exception raised when the colour is not valid."
msgstr "Exception raised when the colour is not valid."

msgid "The colour supplied by the caller that was not valid"
msgstr "The colour supplied by the caller that was not valid"

msgid "Exception raised when the bot can not find the role."
msgstr "Exception raised when the bot can not find the role."

msgid "The role supplied by the caller that was not found"
msgstr "The role supplied by the caller that was not found"

msgid "Exception raised when the invite is invalid or expired."
msgstr "Exception raised when the invite is invalid or expired."

msgid "Exception raised when the bot can not find the emoji."
msgstr "Exception raised when the bot can not find the emoji."

msgid "The emoji supplied by the caller that was not found"
msgstr "The emoji supplied by the caller that was not found"

msgid "Exception raised when the emoji provided does not match the correct format."
msgstr "Exception raised when the emoji provided does not match the correct format."

msgid "The emoji supplied by the caller that did not match the regex"
msgstr "The emoji supplied by the caller that did not match the regex"

msgid "Exception raised when the bot can not find the sticker."
msgstr "Exception raised when the bot can not find the sticker."

msgid "The sticker supplied by the caller that was not found"
msgstr "The sticker supplied by the caller that was not found"

msgid "Exception raised when a boolean argument was not convertible."
msgstr "Exception raised when a boolean argument was not convertible."

msgid "The boolean argument supplied by the caller that is not in the predefined list"
msgstr "The boolean argument supplied by the caller that is not in the predefined list"

msgid "Exception raised when the command invoker lacks permissions to run a command."
msgstr "Exception raised when the command invoker lacks permissions to run a command."

msgid "The required permissions that are missing."
msgstr "The required permissions that are missing."

msgid "Exception raised when the bot's member lacks permissions to run a command."
msgstr "Exception raised when the bot's member lacks permissions to run a command."

msgid "Exception raised when the command invoker lacks a role to run a command."
msgstr "Exception raised when the command invoker lacks a role to run a command."

msgid "The required role that is missing. This is the parameter passed to :func:`~.commands.has_role`."
msgstr "The required role that is missing. This is the parameter passed to :func:`~.commands.has_role`."

msgid "Union[:class:`str`, :class:`int`]"
msgstr "Union[:class:`str`, :class:`int`]"

msgid "Exception raised when the bot's member lacks a role to run a command."
msgstr "Exception raised when the bot's member lacks a role to run a command."

msgid "Exception raised when the command invoker lacks any of the roles specified to run a command."
msgstr "Exception raised when the command invoker lacks any of the roles specified to run a command."

msgid "The roles that the invoker is missing. These are the parameters passed to :func:`~.commands.has_any_role`."
msgstr "The roles that the invoker is missing. These are the parameters passed to :func:`~.commands.has_any_role`."

msgid "List[Union[:class:`str`, :class:`int`]]"
msgstr "List[Union[:class:`str`, :class:`int`]]"

msgid "Exception raised when the bot's member lacks any of the roles specified to run a command."
msgstr "Exception raised when the bot's member lacks any of the roles specified to run a command."

msgid "The roles that the bot's member is missing. These are the parameters passed to :func:`~.commands.has_any_role`."
msgstr "The roles that the bot's member is missing. These are the parameters passed to :func:`~.commands.has_any_role`."

msgid "Exception raised when a channel does not have the required NSFW setting."
msgstr "Exception raised when a channel does not have the required NSFW setting."

msgid "The channel that does not have NSFW enabled."
msgstr "The channel that does not have NSFW enabled."

msgid "The base exception type for all flag parsing related errors."
msgstr "The base exception type for all flag parsing related errors."

msgid "This inherits from :exc:`BadArgument`."
msgstr "This inherits from :exc:`BadArgument`."

msgid "An exception raised when a flag failed to convert a value."
msgstr "An exception raised when a flag failed to convert a value."

msgid "This inherits from :exc:`FlagError`"
msgstr "This inherits from :exc:`FlagError`"

msgid "The flag that failed to convert."
msgstr "The flag that failed to convert."

msgid ":class:`~discord.ext.commands.Flag`"
msgstr ":class:`~discord.ext.commands.Flag`"

msgid "An exception raised when a flag did not get a value."
msgstr "An exception raised when a flag did not get a value."

msgid "The flag that did not get a value."
msgstr "The flag that did not get a value."

msgid "An exception raised when a flag has received too many values."
msgstr "An exception raised when a flag has received too many values."

msgid "This inherits from :exc:`FlagError`."
msgstr "This inherits from :exc:`FlagError`."

msgid "The flag that received too many values."
msgstr "The flag that received too many values."

msgid "The values that were passed."
msgstr "The values that were passed."

msgid "An exception raised when a required flag was not given."
msgstr "An exception raised when a required flag was not given."

msgid "The required flag that was not found."
msgstr "The required flag that was not found."

msgid "An exception raised when the command can't be added because the name is already taken by a different command."
msgstr "An exception raised when the command can't be added because the name is already taken by a different command."

msgid "This inherits from :exc:`discord.ClientException`"
msgstr "This inherits from :exc:`discord.ClientException`"

msgid "The command name that had the error."
msgstr "The command name that had the error."

msgid "Whether the name that conflicts is an alias of the command we try to add."
msgstr "Whether the name that conflicts is an alias of the command we try to add."

msgid "Exception Hierarchy"
msgstr "Exception Hierarchy"

msgid ":exc:`~.DiscordException`"
msgstr ":exc:`~.DiscordException`"

msgid ":exc:`~.commands.CommandError`"
msgstr ":exc:`~.commands.CommandError`"

msgid ":exc:`~.commands.ConversionError`"
msgstr ":exc:`~.commands.ConversionError`"

msgid ":exc:`~.commands.UserInputError`"
msgstr ":exc:`~.commands.UserInputError`"

msgid ":exc:`~.commands.MissingRequiredArgument`"
msgstr ":exc:`~.commands.MissingRequiredArgument`"

msgid ":exc:`~.commands.TooManyArguments`"
msgstr ":exc:`~.commands.TooManyArguments`"

msgid ":exc:`~.commands.BadArgument`"
msgstr ":exc:`~.commands.BadArgument`"

msgid ":exc:`~.commands.MessageNotFound`"
msgstr ":exc:`~.commands.MessageNotFound`"

msgid ":exc:`~.commands.MemberNotFound`"
msgstr ":exc:`~.commands.MemberNotFound`"

msgid ":exc:`~.commands.GuildNotFound`"
msgstr ":exc:`~.commands.GuildNotFound`"

msgid ":exc:`~.commands.UserNotFound`"
msgstr ":exc:`~.commands.UserNotFound`"

msgid ":exc:`~.commands.ChannelNotFound`"
msgstr ":exc:`~.commands.ChannelNotFound`"

msgid ":exc:`~.commands.ChannelNotReadable`"
msgstr ":exc:`~.commands.ChannelNotReadable`"

msgid ":exc:`~.commands.BadColourArgument`"
msgstr ":exc:`~.commands.BadColourArgument`"

msgid ":exc:`~.commands.RoleNotFound`"
msgstr ":exc:`~.commands.RoleNotFound`"

msgid ":exc:`~.commands.BadInviteArgument`"
msgstr ":exc:`~.commands.BadInviteArgument`"

msgid ":exc:`~.commands.EmojiNotFound`"
msgstr ":exc:`~.commands.EmojiNotFound`"

msgid ":exc:`~.commands.GuildStickerNotFound`"
msgstr ":exc:`~.commands.GuildStickerNotFound`"

msgid ":exc:`~.commands.PartialEmojiConversionFailure`"
msgstr ":exc:`~.commands.PartialEmojiConversionFailure`"

msgid ":exc:`~.commands.BadBoolArgument`"
msgstr ":exc:`~.commands.BadBoolArgument`"

msgid ":exc:`~.commands.ThreadNotFound`"
msgstr ":exc:`~.commands.ThreadNotFound`"

msgid ":exc:`~.commands.FlagError`"
msgstr ":exc:`~.commands.FlagError`"

msgid ":exc:`~.commands.BadFlagArgument`"
msgstr ":exc:`~.commands.BadFlagArgument`"

msgid ":exc:`~.commands.MissingFlagArgument`"
msgstr ":exc:`~.commands.MissingFlagArgument`"

msgid ":exc:`~.commands.TooManyFlags`"
msgstr ":exc:`~.commands.TooManyFlags`"

msgid ":exc:`~.commands.MissingRequiredFlag`"
msgstr ":exc:`~.commands.MissingRequiredFlag`"

msgid ":exc:`~.commands.BadUnionArgument`"
msgstr ":exc:`~.commands.BadUnionArgument`"

msgid ":exc:`~.commands.BadLiteralArgument`"
msgstr ":exc:`~.commands.BadLiteralArgument`"

msgid ":exc:`~.commands.ArgumentParsingError`"
msgstr ":exc:`~.commands.ArgumentParsingError`"

msgid ":exc:`~.commands.UnexpectedQuoteError`"
msgstr ":exc:`~.commands.UnexpectedQuoteError`"

msgid ":exc:`~.commands.InvalidEndOfQuotedStringError`"
msgstr ":exc:`~.commands.InvalidEndOfQuotedStringError`"

msgid ":exc:`~.commands.ExpectedClosingQuoteError`"
msgstr ":exc:`~.commands.ExpectedClosingQuoteError`"

msgid ":exc:`~.commands.CommandNotFound`"
msgstr ":exc:`~.commands.CommandNotFound`"

msgid ":exc:`~.commands.CheckFailure`"
msgstr ":exc:`~.commands.CheckFailure`"

msgid ":exc:`~.commands.CheckAnyFailure`"
msgstr ":exc:`~.commands.CheckAnyFailure`"

msgid ":exc:`~.commands.PrivateMessageOnly`"
msgstr ":exc:`~.commands.PrivateMessageOnly`"

msgid ":exc:`~.commands.NoPrivateMessage`"
msgstr ":exc:`~.commands.NoPrivateMessage`"

msgid ":exc:`~.commands.NotOwner`"
msgstr ":exc:`~.commands.NotOwner`"

msgid ":exc:`~.commands.MissingPermissions`"
msgstr ":exc:`~.commands.MissingPermissions`"

msgid ":exc:`~.commands.BotMissingPermissions`"
msgstr ":exc:`~.commands.BotMissingPermissions`"

msgid ":exc:`~.commands.MissingRole`"
msgstr ":exc:`~.commands.MissingRole`"

msgid ":exc:`~.commands.BotMissingRole`"
msgstr ":exc:`~.commands.BotMissingRole`"

msgid ":exc:`~.commands.MissingAnyRole`"
msgstr ":exc:`~.commands.MissingAnyRole`"

msgid ":exc:`~.commands.BotMissingAnyRole`"
msgstr ":exc:`~.commands.BotMissingAnyRole`"

msgid ":exc:`~.commands.NSFWChannelRequired`"
msgstr ":exc:`~.commands.NSFWChannelRequired`"

msgid ":exc:`~.commands.DisabledCommand`"
msgstr ":exc:`~.commands.DisabledCommand`"

msgid ":exc:`~.commands.CommandInvokeError`"
msgstr ":exc:`~.commands.CommandInvokeError`"

msgid ":exc:`~.commands.CommandOnCooldown`"
msgstr ":exc:`~.commands.CommandOnCooldown`"

msgid ":exc:`~.commands.MaxConcurrencyReached`"
msgstr ":exc:`~.commands.MaxConcurrencyReached`"

msgid ":exc:`~.ClientException`"
msgstr ":exc:`~.ClientException`"

msgid ":exc:`~.commands.CommandRegistrationError`"
msgstr ":exc:`~.commands.CommandRegistrationError`"

