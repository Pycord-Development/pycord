msgid ""
msgstr ""
"Project-Id-Version: Pycord Documentation\\n"
"POT-Creation-Date: 2024-05-23 07:30-0000\\n"
"PO-Revision-Date: 2024-05-23 07:30-0000\\n"
"Last-Translator: \\n"
"Language-Team: none\\n"
"MIME-Version: 1.0\\n"
"Content-Type: text/plain; charset=UTF-8\\n"
"Content-Transfer-Encoding: 8bit\\n"
"Plural-Forms: nplurals=4; plural=((n%10==1 && n%100!=11) ? 0 : ((n%10 >= 2 && n%10 <=4 && (n%100 < 12 || n%100 > 14)) ? 1 : ((n%10 == 0 || (n%10 >= 5 && n%10 <=9)) || (n%100 >= 11 && n%100 <= 14)) ? 2 : 3));\\n"
"X-Generator: Crowdin\\n"

msgid "Cogs"
msgstr "Коги"

msgid "The base class that all cogs must inherit from."
msgstr "Базовый класс, от которого должны наследоваться все коги."

msgid "A cog is a collection of commands, listeners, and optional state to help group commands together. More information on them can be found on the :ref:`ext_commands_cogs` page."
msgstr "Ког - это набор команд, слушателей и необязательных состояний, которые помогают сгруппировать команды. Более подробную информацию о них можно найти на странице :ref:`ext_commands_cogs`."

msgid "When inheriting from this class, the options shown in :class:`CogMeta` are equally valid here."
msgstr "При наследовании от этого класса опции, указанные в :class:`CogMeta`, одинаково актуальны и здесь."

msgid "Returns"
msgstr "Возвращает"

msgid "A :class:`list` of :class:`.ApplicationCommand`\\s that are defined inside this cog.  .. note::      This does not include subcommands."
msgstr ":class:`list` включающий в себя :class:`.ApplicationCommand`\\ы которые определены внутри этого кога.  .. note::      Сюда не входят подкоманды."

msgid "A :class:`list` of :class:`.ApplicationCommand`\\s that are defined inside this cog."
msgstr ":class:`list` включающий в себя :class:`.ApplicationCommand`\\ы которые определены внутри этого кога."

msgid "This does not include subcommands."
msgstr "Сюда не входят подкоманды."

msgid "Return type"
msgstr "Тип возврата"

msgid "List[:class:`.ApplicationCommand`]"
msgstr "List[:class:`.ApplicationCommand`]"

msgid "Returns the cog's specified name, not the class name."
msgstr "Возвращает указанное имя кога, а не имя класса."

msgid "Returns the cog's description, typically the cleaned docstring."
msgstr "Возвращает описание когда, обычно очищенный docstring."

msgid "An iterator that recursively walks through this cog's commands and subcommands."
msgstr "Итератор, который рекурсивно перебирает команды и подкоманды этого кога."

msgid "Yields"
msgstr "Выход"

msgid "Union[:class:`.Command`, :class:`.Group`] -- A command or group from the cog."
msgstr "Union[:class:`.Command`, :class:`.Group`] -- Команда или группа из кога."

msgid "Returns a :class:`list` of (name, function) listener pairs that are defined in this cog."
msgstr "Возвращает :class:`list` (имя, функция) слушателей, которые определены в этом коге."

msgid "The listeners defined in this cog."
msgstr "Слушатели, определенные в этом коге."

msgid "List[Tuple[:class:`str`, :ref:`coroutine <coroutine>`]]"
msgstr "List[Tuple[:class:`str`, :ref:`coroutine <coroutine>`]]"

msgid "A decorator that marks a function as a listener."
msgstr "Декоратор, который помечает функцию как слушателя."

msgid "This is the cog equivalent of :meth:`.Bot.listen`."
msgstr "Это эквивалентно :meth:`.Bot.listen`."

msgid "Parameters"
msgstr "Параметры"

msgid "The name of the event being listened to. If not provided, it defaults to the function's name."
msgstr "Имя прослушиваемого события. Если оно не указано, то по умолчанию используется имя функции."

msgid "If this listener should only be called once after each cog load. Defaults to false."
msgstr "Если этот слушатель должен вызываться только один раз после каждой загрузки кога."

msgid "Raises"
msgstr "Вызывает"

msgid "The function is not a coroutine function or a string was not passed as     the name."
msgstr "Функция не является короутинной функцией или в качестве имени не была передана строка."

msgid ":sphinx_autodoc_typehints_type:`\\:py\\:data\\:\\`\\~typing.Callable\\`\\\\ \\\\\\[\\\\\\[\\:py\\:class\\:\\`\\~typing.TypeVar\\`\\\\ \\\\\\(\\`\\`FuncT\\`\\`\\, bound\\= \\:py\\:data\\:\\`\\~typing.Callable\\`\\\\ \\\\\\[\\:py\\:data\\:\\`...\\<Ellipsis\\>\\`\\, \\:py\\:data\\:\\`\\~typing.Any\\`\\]\\)\\]\\, \\:py\\:class\\:\\`\\~typing.TypeVar\\`\\\\ \\\\\\(\\`\\`FuncT\\`\\`\\, bound\\= \\:py\\:data\\:\\`\\~typing.Callable\\`\\\\ \\\\\\[\\:py\\:data\\:\\`...\\<Ellipsis\\>\\`\\, \\:py\\:data\\:\\`\\~typing.Any\\`\\]\\)\\]`"
msgstr ":sphinx_autodoc_typehints_type:`\\:py\\:data\\:\\`\\~typing.Callable\\`\\\\ \\\\\\[\\\\\\[\\:py\\:class\\:\\`\\~typing.TypeVar\\`\\\\ \\\\\\(\\`\\`FuncT\\`\\`\\, bound\\= \\:py\\:data\\:\\`\\~typing.Callable\\`\\\\ \\\\\\[\\:py\\:data\\:\\`...\\<Ellipsis\\>\\`\\, \\:py\\:data\\:\\`\\~typing.Any\\`\\]\\)\\]\\, \\:py\\:class\\:\\`\\~typing.TypeVar\\`\\\\ \\\\\\(\\`\\`FuncT\\`\\`\\, bound\\= \\:py\\:data\\:\\`\\~typing.Callable\\`\\\\ \\\\\\[\\:py\\:data\\:\\`...\\<Ellipsis\\>\\`\\, \\:py\\:data\\:\\`\\~typing.Any\\`\\]\\)\\]`"

msgid "Checks whether the cog has an error handler. :rtype: :sphinx_autodoc_typehints_type:`\\:py\\:class\\:\\`bool\\``"
msgstr "Проверяет, есть ли у кога обработчик ошибок. :rtype: :sphinx_autodoc_typehints_type:`\\:py\\:class\\:\\`bool\\``"

msgid "A special method that is called when the cog gets removed."
msgstr "Специальный метод, который вызывается, когда ког удаляется."

msgid "This function **cannot** be a coroutine. It must be a regular function."
msgstr "Эта функция **не может** быть короутиной. Она должна быть обычной функцией."

msgid "Subclasses must replace this if they want special unloading behaviour."
msgstr "Подклассы должны заменить ее, если им нужно особое поведение при выгрузке кога."

msgid ":sphinx_autodoc_typehints_type:`\\:py\\:obj\\:\\`None\\``"
msgstr ":sphinx_autodoc_typehints_type:`\\:py\\:obj\\:\\`None\\``"

msgid "A special method that registers as a :meth:`.Bot.check_once` check."
msgstr "Специальный метод, который регистрируется как проверка :meth:`.Bot.check_once`."

msgid "This function **can** be a coroutine and must take a sole parameter, ``ctx``, to represent the :class:`.Context` or :class:`.ApplicationContext`."
msgstr "Эта функция **может** быть короутиной и должна принимать единственный параметр, ``ctx``, представляющий собой :class:`.Context` или :class:`.ApplicationContext`."

msgid "The invocation context."
msgstr "Контекст вызова."

msgid ":sphinx_autodoc_typehints_type:`\\:py\\:class\\:\\`bool\\``"
msgstr ":sphinx_autodoc_typehints_type:`\\:py\\:class\\:\\`bool\\``"

msgid "A special method that registers as a :meth:`.Bot.check` check."
msgstr "Специальный метод, который регистрируется как проверка:meth:`.Bot.check`."

msgid "A special method that registers as a :func:`~discord.ext.commands.check` for every command and subcommand in this cog."
msgstr "Специальный метод, который регистрируется как :func:`~discord.ext.commands.check` для каждой команды и подкоманды в этом коге."

msgid "A special method that is called whenever an error is dispatched inside this cog."
msgstr "Специальный метод, который вызывается всякий раз, когда внутри этого кога происходит ошибка."

msgid "This is similar to :func:`.on_command_error` except only applying to the commands inside this cog."
msgstr "Это похоже на :func:`.on_command_error`, только применяется к командам внутри этого кога."

msgid "This **must** be a coroutine."
msgstr "Это **должно** быть короутиной."

msgid "The invocation context where the error happened."
msgstr "Контекст вызова, в котором произошла ошибка."

msgid "The error that happened."
msgstr "Ошибка, которая произошла."

msgid "A special method that acts as a cog local pre-invoke hook."
msgstr "Специальный метод, который действует как локальный хук кога предварительного вызова."

msgid "This is similar to :meth:`.ApplicationCommand.before_invoke`."
msgstr "Это похоже на :meth:`.ApplicationCommand.before_invoke`."

msgid "A special method that acts as a cog local post-invoke hook."
msgstr "Специальный метод, который действует как локальный хук кога после вызова."

msgid "This is similar to :meth:`.ApplicationCommand.after_invoke`."
msgstr "Это похоже на :meth:`.ApplicationCommand.after_invoke`."

msgid "A metaclass for defining a cog."
msgstr "Метакласс для определения кога."

msgid "Note that you should probably not use this directly. It is exposed purely for documentation purposes along with making custom metaclasses to intermix with other metaclasses such as the :class:`abc.ABCMeta` metaclass."
msgstr "Обратите внимание, что вам, вероятно, не следует использовать его напрямую. Он используется исключительно в целях документации, а также для создания пользовательских метаклассов для смешивания с другими метаклассами, такими как метакласс :class:`abc.ABCMeta`."

msgid "For example, to create an abstract cog mixin class, the following would be done."
msgstr "Например, чтобы создать абстрактный класс cog mixin, нужно сделать следующее."

msgid "When passing an attribute of a metaclass that is documented below, note that you must pass it as a keyword-only argument to the class creation like the following example:"
msgstr "При передаче атрибута метакласса, который документирован ниже, обратите внимание, что вы должны передавать его как аргумент создания класса, содержащий только ключевое слово, как показано в следующем примере:"

msgid "The cog name. By default, it is the name of the class with no modification."
msgstr "Имя кога. По умолчанию это имя класса без изменений."

msgid "type"
msgstr "тип"

msgid ":class:`str`"
msgstr ":class:`str`"

msgid "The cog description. By default, it is the cleaned docstring of the class."
msgstr "Описание кога. По умолчанию это очищенный docstring класса."

msgid "A list of attributes to apply to every command inside this cog. The dictionary is passed into the :class:`Command` options at ``__init__``. If you specify attributes inside the command attribute in the class, it will override the one specified inside this attribute. For example:"
msgstr "Список атрибутов, применяемых к каждой команде внутри этого кога. Словарь передается в опции :class:`Command`` при ``__init__``. Если вы укажете атрибуты внутри атрибута command в классе, то он будет переопределять тот, который указан внутри этого атрибута. Например:"

msgid ":class:`dict`"
msgstr ":class:`dict`"

msgid "A shortcut to :attr:`.command_attrs`, what ``guild_ids`` should all application commands have in the cog. You can override this by setting ``guild_ids`` per command."
msgstr "Сокращение для :attr:`.command_attrs`, какие ``guild_ids`` должны быть у всех команд приложения в cog. Вы можете переопределить это, установив ``guild_ids`` для каждой команды."

msgid "Optional[List[:class:`int`]]"
msgstr "Optional[List[:class:`int`]]"

