msgid ""
msgstr ""
"Project-Id-Version: Pycord Documentation\\n"
"POT-Creation-Date: 2024-05-23 07:30-0000\\n"
"PO-Revision-Date: 2024-05-23 07:30-0000\\n"
"Last-Translator: \\n"
"Language-Team: none\\n"
"MIME-Version: 1.0\\n"
"Content-Type: text/plain; charset=UTF-8\\n"
"Content-Transfer-Encoding: 8bit\\n"
"Plural-Forms: nplurals=4; plural=((n%10==1 && n%100!=11) ? 0 : ((n%10 >= 2 && n%10 <=4 && (n%100 < 12 || n%100 > 14)) ? 1 : ((n%10 == 0 || (n%10 >= 5 && n%10 <=9)) || (n%100 >= 11 && n%100 <= 14)) ? 2 : 3));\\n"
"X-Generator: Crowdin\\n"

msgid "Async Iterator"
msgstr "Асинхронный Итератор"

msgid "Some API functions return an \"async iterator\". An async iterator is something that is capable of being used in an :ref:`async for statement <py:async for>`."
msgstr "Некоторые функции API возвращают \"асинхронный итератор\". Асинхронный итератор - это то, что может быть использовано в операторе :ref:`async for <py:async for>`."

msgid "These async iterators can be used as follows: ::"
msgstr "Эти асинхронные итераторы можно использовать следующим образом: ::"

msgid "Certain utilities make working with async iterators easier, detailed below."
msgstr "Некоторые утилиты облегчают работу с асинхронными итераторами, о них мы расскажем ниже."

msgid "Represents the \"AsyncIterator\" concept. Note that no such class exists, it is purely abstract."
msgstr "Представляет концепцию \"AsyncIterator\". Обратите внимание, что такого класса не существует, он является чисто абстрактным."

msgid "Iterates over the contents of the async iterator."
msgstr "Выполняет итерацию над содержимым асинхронного итератора."

msgid "|coro|"
msgstr "|coro|"

msgid "Advances the iterator by one, if possible. If no more items are found then this raises :exc:`NoMoreItems`."
msgstr "Продвигает итератор на один элемент, если это возможно. Если больше не найдено ни одного элемента, то возникает исключение :exc:`NoMoreItems`."

msgid "Similar to :func:`utils.get` except run over the async iterator."
msgstr "Аналогично :func:`utils.get`, только выполняется через асинхронный итератор."

msgid "Getting the last message by a user named 'Dave' or ``None``: ::"
msgstr "Получение последнего сообщения от пользователя с именем 'Dave' или ``None``: ::"

msgid "Similar to :func:`utils.find` except run over the async iterator."
msgstr "Аналогично :func:`utils.find`, только выполняется через асинхронный итератор."

msgid "Unlike :func:`utils.find`\\, the predicate provided can be a |coroutine_link|_."
msgstr "В отличие от :func:`utils.find`\\, предоставленный предикат может быть |coroutine_link|_."

msgid "Getting the last audit log with a reason or ``None``: ::"
msgstr "Получение последнего журнала аудита с указанием причины или ``None``: ::"

msgid "Parameters"
msgstr "Параметры"

msgid "The predicate to use. Could be a |coroutine_link|_."
msgstr "Предикат для использования. Может быть |coroutine_link|_."

msgid "Returns"
msgstr "Возвращает"

msgid "The first element that returns ``True`` for the predicate or ``None``."
msgstr "Первый элемент, который возвращает ``True`` для предиката или ``None``."

msgid "Flattens the async iterator into a :class:`list` with all the elements."
msgstr "Переводит асинхронный итератор в :class:`list` со всеми элементами."

msgid "A list of every element in the async iterator."
msgstr "Список каждого элемента в асинхронном итераторе."

msgid "Return type"
msgstr "Возвращаемый тип"

msgid "Collects items into chunks of up to a given maximum size. Another :class:`AsyncIterator` is returned which collects items into :class:`list`\\s of a given size. The maximum chunk size must be a positive integer."
msgstr "Собирает элементы в чанки до заданного максимального размера. Возвращается другой :class:`AsyncIterator`, который собирает элементы в :class:`list`\\ы заданного размера. Максимальный размер чанка должен быть целым положительным числом."

msgid "Collecting groups of users: ::"
msgstr "Сбор групп пользователей: ::"

msgid "The last chunk collected may not be as large as ``max_size``."
msgstr "Последний собранный чанк может быть не таким большим, как ``max_size``."

msgid "The size of individual chunks."
msgstr "Размер отдельных чанков."

msgid ":class:`AsyncIterator`"
msgstr ":class:`AsyncIterator`"

msgid "This is similar to the built-in :func:`map <py:map>` function. Another :class:`AsyncIterator` is returned that executes the function on every element it is iterating over. This function can either be a regular function or a |coroutine_link|_."
msgstr "Это похоже на встроенную функцию :func:`map <py:map>`. Возвращается другой :class:`AsyncIterator`, который выполняет функцию на каждом итерируемым элементе. Эта функция может быть либо обычной функцией, либо |coroutine_link|_."

msgid "Creating a content iterator: ::"
msgstr "Создание итератора содержимого: ::"

msgid "The function to call on every element. Could be a |coroutine_link|_."
msgstr "Функция для вызова на каждом элементе. Может быть |coroutine_link|_."

msgid "This is similar to the built-in :func:`filter <py:filter>` function. Another :class:`AsyncIterator` is returned that filters over the original async iterator. This predicate can be a regular function or a |coroutine_link|_."
msgstr "Это похоже на встроенную функцию :func:`filter <py:filter>`. Возвращается другой :class:`AsyncIterator`, который фильтрует исходный асинхронный итератор. Этот предикат может быть обычной функцией или |coroutine_link|_."

msgid "Getting messages by non-bot accounts: ::"
msgstr "Получение сообщений от учетных записей, не являющихся ботами: ::"

msgid "The predicate to call on every element. Could be a |coroutine_link|_."
msgstr "Предикат для вызова на каждом элементе. Может быть |coroutine_link|_."

