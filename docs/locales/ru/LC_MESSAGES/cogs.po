msgid ""
msgstr ""
"Project-Id-Version: Pycord Documentation\\n"
"POT-Creation-Date: 2024-05-23 07:30-0000\\n"
"PO-Revision-Date: 2024-05-23 07:30-0000\\n"
"Last-Translator: \\n"
"Language-Team: none\\n"
"MIME-Version: 1.0\\n"
"Content-Type: text/plain; charset=UTF-8\\n"
"Content-Transfer-Encoding: 8bit\\n"
"Plural-Forms: nplurals=4; plural=((n%10==1 && n%100!=11) ? 0 : ((n%10 >= 2 && n%10 <=4 && (n%100 < 12 || n%100 > 14)) ? 1 : ((n%10 == 0 || (n%10 >= 5 && n%10 <=9)) || (n%100 >= 11 && n%100 <= 14)) ? 2 : 3));\\n"
"X-Generator: Crowdin\\n"

msgid "Cogs"
msgstr "Cogs"

msgid "There comes a point in your bot's development when you want to organize a collection of commands, listeners, and some state into one class. Cogs allow you to do just that."
msgstr "В процессе разработки бота наступает момент, когда вы хотите организовать набор команд, слушателей и некоторых состояний в один класс. Cogs позволяют вам сделать именно это."

msgid "The gist:"
msgstr "Суть:"

msgid "Each cog is a Python class that subclasses :class:`.Cog`."
msgstr "Каждый cog - это класс Python, который является подклассом :class:`.Cog`."

msgid "Every command is marked with the :func:`discord.command` decorator or the corresponding shortcut command decorator."
msgstr "Каждая команда помечается декоратором :func:`discord.command` или соответствующим декоратором команды ярлыка."

msgid "Every listener is marked with the :meth:`.Cog.listener` decorator."
msgstr "Каждый слушатель помечается декоратором :meth:`.Cog.listener`."

msgid "Cogs are then registered with the :meth:`.Bot.add_cog` call."
msgstr "Затем Cogs регистрируются с помощью вызова :meth:`.Bot.add_cog`."

msgid "Cogs are subsequently removed with the :meth:`.Bot.remove_cog` call."
msgstr "Впоследствии Cogs удаляются с помощью вызова :meth:`.Bot.remove_cog`."

msgid "Quick Example"
msgstr "Быстрый пример"

msgid "This example cog defines a ``Greetings`` category for your commands, with a single slash command named ``hello`` as well as a listener to listen to an :ref:`Event <discord-api-events>`."
msgstr "Этот пример cog определяет категорию ``Приветствия'' для ваших команд, с командой с одним слешем под названием ``hello'', а также слушатель для прослушивания :ref:`Event <discord-api-events>`."

msgid "A couple of technical notes to take into consideration:"
msgstr "Несколько технических замечаний, которые следует принять во внимание:"

msgid "All listeners must be explicitly marked via decorator, :meth:`~.Cog.listener`."
msgstr "Все слушатели должны быть явно отмечены с помощью декоратора, :meth:`~.Cog.listener`."

msgid "The name of the cog is automatically derived from the class name but can be overridden."
msgstr "Имя Cog автоматически выводится из имени класса, но может быть переопределено."

msgid "All commands must now take a ``self`` parameter to allow usage of instance attributes that can be used to maintain state."
msgstr "Все команды теперь должны принимать параметр ``self'', чтобы позволить использовать атрибуты экземпляра, которые могут быть использованы для поддержания состояния."

msgid "Cog Registration"
msgstr "Регистрация Cog"

msgid "Once you have defined your cogs, you need to tell the bot to register the cogs to be used. We do this via the :meth:`~.Bot.add_cog` method."
msgstr "После того как вы определили Cogs, вам нужно сообщить боту, чтобы он зарегистрировал Cogs для использования. Мы делаем это с помощью метода :meth:`~.Bot.add_cog`."

msgid "This binds the cog to the bot, adding all commands and listeners to the bot automatically."
msgstr "Это связывает Cog с ботом, автоматически добавляя к нему все команды и слушателей."

msgid "Using Cogs"
msgstr "Использование Cogs"

msgid "Just as we remove a cog by its name, we can also retrieve it by its name as well. This allows us to use a cog as an inter-command communication protocol to share data. For example:"
msgstr "Как мы удаляем Cogs по его имени, так же мы можем и получить его по его имени. Это позволяет нам использовать Cogs в качестве протокола межкомандной связи для обмена данными. Например:"

