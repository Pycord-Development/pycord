msgid ""
msgstr ""
"Project-Id-Version: Pycord Documentation\\n"
"POT-Creation-Date: 2024-05-23 07:30-0000\\n"
"PO-Revision-Date: 2024-05-23 07:30-0000\\n"
"Last-Translator: \\n"
"Language-Team: none\\n"
"MIME-Version: 1.0\\n"
"Content-Type: text/plain; charset=UTF-8\\n"
"Content-Transfer-Encoding: 8bit\\n"
"Plural-Forms: nplurals=4; plural=((n%10==1 && n%100!=11) ? 0 : ((n%10 >= 2 && n%10 <=4 && (n%100 < 12 || n%100 > 14)) ? 1 : ((n%10 == 0 || (n%10 >= 5 && n%10 <=9)) || (n%100 >= 11 && n%100 <= 14)) ? 2 : 3));\\n"
"X-Generator: Crowdin\\n"

msgid "Frequently Asked Questions"
msgstr "Frequently Asked Questions"

msgid "This is a list of Frequently Asked Questions regarding using ``Pycord`` and its extension modules. Feel free to suggest a new question or submit one via pull requests."
msgstr "This is a list of Frequently Asked Questions regarding using ``Pycord`` and its extension modules. Feel free to suggest a new question or submit one via pull requests."

msgid "Coroutines"
msgstr "Coroutines"

msgid "Questions regarding coroutines and asyncio belong here."
msgstr "Questions regarding coroutines and asyncio belong here."

msgid "What is a coroutine?"
msgstr "What is a coroutine?"

msgid "A |coroutine_link|_ is a function that must be invoked with ``await`` or ``yield from``. When Python encounters an ``await`` it stops the function's execution at that point and works on other things until it comes back to that point and finishes off its work. This allows for your program to be doing multiple things at the same time without using threads or complicated multiprocessing."
msgstr "A |coroutine_link|_ is a function that must be invoked with ``await`` or ``yield from``. When Python encounters an ``await`` it stops the function's execution at that point and works on other things until it comes back to that point and finishes off its work. This allows for your program to be doing multiple things at the same time without using threads or complicated multiprocessing."

msgid "**If you forget to await a coroutine then the coroutine will not run. Never forget to await a coroutine.**"
msgstr "**If you forget to await a coroutine then the coroutine will not run. Never forget to await a coroutine.**"

msgid "Where can I use ``await``\\?"
msgstr "Where can I use ``await``\\?"

msgid "You can only use ``await`` inside ``async def`` functions and nowhere else."
msgstr "You can only use ``await`` inside ``async def`` functions and nowhere else."

msgid "What does \"blocking\" mean?"
msgstr "What does \"blocking\" mean?"

msgid "In asynchronous programming a blocking call is essentially all the parts of the function that are not ``await``. Do not despair however, because not all forms of blocking are bad! Using blocking calls is inevitable, but you must work to make sure that you don't excessively block functions. Remember, if you block for too long then your bot will freeze since it has not stopped the function's execution at that point to do other things."
msgstr "In asynchronous programming a blocking call is essentially all the parts of the function that are not ``await``. Do not despair however, because not all forms of blocking are bad! Using blocking calls is inevitable, but you must work to make sure that you don't excessively block functions. Remember, if you block for too long then your bot will freeze since it has not stopped the function's execution at that point to do other things."

msgid "If logging is enabled, this library will attempt to warn you that blocking is occurring with the message: ``Heartbeat blocked for more than N seconds.`` See :ref:`logging_setup` for details on enabling logging."
msgstr "If logging is enabled, this library will attempt to warn you that blocking is occurring with the message: ``Heartbeat blocked for more than N seconds.`` See :ref:`logging_setup` for details on enabling logging."

msgid "A common source of blocking for too long is something like :func:`time.sleep`. Don't do that. Use :func:`asyncio.sleep` instead. Similar to this example: ::"
msgstr "A common source of blocking for too long is something like :func:`time.sleep`. Don't do that. Use :func:`asyncio.sleep` instead. Similar to this example: ::"

msgid "Another common source of blocking for too long is using HTTP requests with the famous module :doc:`requests <req:index>`. While :doc:`requests <req:index>` is an amazing module for non-asynchronous programming, it is not a good choice for :mod:`asyncio` because certain requests can block the event loop too long. Instead, use the :doc:`aiohttp <aio:index>` library which is installed on the side with this library."
msgstr "Another common source of blocking for too long is using HTTP requests with the famous module :doc:`requests <req:index>`. While :doc:`requests <req:index>` is an amazing module for non-asynchronous programming, it is not a good choice for :mod:`asyncio` because certain requests can block the event loop too long. Instead, use the :doc:`aiohttp <aio:index>` library which is installed on the side with this library."

msgid "Consider the following example: ::"
msgstr "Consider the following example: ::"

msgid "General"
msgstr "General"

msgid "General questions regarding library usage belong here."
msgstr "General questions regarding library usage belong here."

msgid "Where can I find usage examples?"
msgstr "Where can I find usage examples?"

msgid "Example code can be found in the `examples folder <https://github.com/Pycord-Development/pycord/tree/master/examples>`_ in the repository."
msgstr "Example code can be found in the `examples folder <https://github.com/Pycord-Development/pycord/tree/master/examples>`_ in the repository."

msgid "How do I set the \"Playing\" status?"
msgstr "How do I set the \"Playing\" status?"

msgid "The ``activity`` keyword argument may be passed in the :class:`Client` constructor or :meth:`Client.change_presence`, given an :class:`Activity` object."
msgstr "The ``activity`` keyword argument may be passed in the :class:`Client` constructor or :meth:`Client.change_presence`, given an :class:`Activity` object."

msgid "The constructor may be used for static activities, while :meth:`Client.change_presence` may be used to update the activity at runtime."
msgstr "The constructor may be used for static activities, while :meth:`Client.change_presence` may be used to update the activity at runtime."

msgid "It is highly discouraged to use :meth:`Client.change_presence` or API calls in :func:`on_ready` as this event may be called many times while running, not just once."
msgstr "It is highly discouraged to use :meth:`Client.change_presence` or API calls in :func:`on_ready` as this event may be called many times while running, not just once."

msgid "There is a high chance of disconnecting if presences are changed right after connecting."
msgstr "There is a high chance of disconnecting if presences are changed right after connecting."

msgid "The status type (playing, listening, streaming, watching) can be set using the :class:`ActivityType` enum. For memory optimisation purposes, some activities are offered in slimmed-down versions:"
msgstr "The status type (playing, listening, streaming, watching) can be set using the :class:`ActivityType` enum. For memory optimisation purposes, some activities are offered in slimmed-down versions:"

msgid ":class:`Game`"
msgstr ":class:`Game`"

msgid ":class:`Streaming`"
msgstr ":class:`Streaming`"

msgid "Putting both of these pieces of info together, you get the following: ::"
msgstr "Putting both of these pieces of info together, you get the following: ::"

msgid "How do I send a message to a specific channel?"
msgstr "How do I send a message to a specific channel?"

msgid "You must fetch the channel directly and then call the appropriate method. Example: ::"
msgstr "You must fetch the channel directly and then call the appropriate method. Example: ::"

msgid "How do I send a DM?"
msgstr "How do I send a DM?"

msgid "Get the :class:`User` or :class:`Member` object and call :meth:`abc.Messageable.send`. For example: ::"
msgstr "Get the :class:`User` or :class:`Member` object and call :meth:`abc.Messageable.send`. For example: ::"

msgid "If you are responding to an event, such as :func:`on_message`, you already have the :class:`User` object via :attr:`Message.author`: ::"
msgstr "If you are responding to an event, such as :func:`on_message`, you already have the :class:`User` object via :attr:`Message.author`: ::"

msgid "How do I get the ID of a sent message?"
msgstr "How do I get the ID of a sent message?"

msgid ":meth:`abc.Messageable.send` returns the :class:`Message` that was sent. The ID of a message can be accessed via :attr:`Message.id`: ::"
msgstr ":meth:`abc.Messageable.send` returns the :class:`Message` that was sent. The ID of a message can be accessed via :attr:`Message.id`: ::"

msgid "How do I upload an image?"
msgstr "How do I upload an image?"

msgid "To upload something to Discord you have to use the :class:`File` object."
msgstr "To upload something to Discord you have to use the :class:`File` object."

msgid "A :class:`File` accepts two parameters, the file-like object (or file path) and the filename to pass to Discord when uploading."
msgstr "A :class:`File` accepts two parameters, the file-like object (or file path) and the filename to pass to Discord when uploading."

msgid "If you want to upload an image it's as simple as: ::"
msgstr "If you want to upload an image it's as simple as: ::"

msgid "If you have a file-like object you can do as follows: ::"
msgstr "If you have a file-like object you can do as follows: ::"

msgid "To upload multiple files, you can use the ``files`` keyword argument instead of ``file``\\: ::"
msgstr "To upload multiple files, you can use the ``files`` keyword argument instead of ``file``\\: ::"

msgid "If you want to upload something from a URL, you will have to use an HTTP request using :doc:`aiohttp <aio:index>` and then pass an :class:`io.BytesIO` instance to :class:`File` like so:"
msgstr "If you want to upload something from a URL, you will have to use an HTTP request using :doc:`aiohttp <aio:index>` and then pass an :class:`io.BytesIO` instance to :class:`File` like so:"

msgid "How can I add a reaction to a message?"
msgstr "How can I add a reaction to a message?"

msgid "You use the :meth:`Message.add_reaction` method."
msgstr "You use the :meth:`Message.add_reaction` method."

msgid "If you want to use unicode emoji, you must pass a valid unicode code point in a string. In your code, you can write this in a few different ways:"
msgstr "If you want to use unicode emoji, you must pass a valid unicode code point in a string. In your code, you can write this in a few different ways:"

msgid "``'👍'``"
msgstr "``'👍'``"

msgid "``'\\U0001F44D'``"
msgstr "``'\\U0001F44D'``"

msgid "``'\\N{THUMBS UP SIGN}'``"
msgstr "``'\\N{THUMBS UP SIGN}'``"

msgid "Quick example: ::"
msgstr "Quick example: ::"

msgid "In case you want to use emoji that come from a message, you already get their code points in the content without needing to do anything special. You **cannot** send ``':thumbsup:'`` style shorthands."
msgstr "In case you want to use emoji that come from a message, you already get their code points in the content without needing to do anything special. You **cannot** send ``':thumbsup:'`` style shorthands."

msgid "For custom emoji, you should pass an instance of :class:`Emoji`. You can also pass a ``'<:name:id>'`` string, but if you can use said emoji, you should be able to use :meth:`Client.get_emoji` to get an emoji via ID or use :func:`utils.find`/ :func:`utils.get` on :attr:`Client.emojis` or :attr:`Guild.emojis` collections."
msgstr "For custom emoji, you should pass an instance of :class:`Emoji`. You can also pass a ``'<:name:id>'`` string, but if you can use said emoji, you should be able to use :meth:`Client.get_emoji` to get an emoji via ID or use :func:`utils.find`/ :func:`utils.get` on :attr:`Client.emojis` or :attr:`Guild.emojis` collections."

msgid "The name and ID of a custom emoji can be found with the client by prefixing ``:custom_emoji:`` with a backslash. For example, sending the message ``\\:python3:`` with the client will result in ``<:python3:232720527448342530>``."
msgstr "The name and ID of a custom emoji can be found with the client by prefixing ``:custom_emoji:`` with a backslash. For example, sending the message ``\\:python3:`` with the client will result in ``<:python3:232720527448342530>``."

msgid "How do I pass a coroutine to the player's \"after\" function?"
msgstr "How do I pass a coroutine to the player's \"after\" function?"

msgid "The library's music player launches on a separate thread, ergo it does not execute inside a coroutine. This does not mean that it is not possible to call a coroutine in the ``after`` parameter. To do so you must pass a callable that wraps up a couple of aspects."
msgstr "The library's music player launches on a separate thread, ergo it does not execute inside a coroutine. This does not mean that it is not possible to call a coroutine in the ``after`` parameter. To do so you must pass a callable that wraps up a couple of aspects."

msgid "The first gotcha that you must be aware of is that calling a coroutine is not a thread-safe operation. Since we are technically in another thread, we must take caution in calling thread-safe operations so things do not bug out. Luckily for us, :mod:`asyncio` comes with a :func:`asyncio.run_coroutine_threadsafe` function that allows us to call a coroutine from another thread."
msgstr "The first gotcha that you must be aware of is that calling a coroutine is not a thread-safe operation. Since we are technically in another thread, we must take caution in calling thread-safe operations so things do not bug out. Luckily for us, :mod:`asyncio` comes with a :func:`asyncio.run_coroutine_threadsafe` function that allows us to call a coroutine from another thread."

msgid "However, this function returns a :class:`~concurrent.futures.Future` and to actually call it we have to fetch its result. Putting all of this together we can do the following: ::"
msgstr "However, this function returns a :class:`~concurrent.futures.Future` and to actually call it we have to fetch its result. Putting all of this together we can do the following: ::"

msgid "How do I run something in the background?"
msgstr "How do I run something in the background?"

msgid "`Check the background_task.py example. <https://github.com/Pycord-Development/pycord/blob/master/examples/background_task.py>`_"
msgstr "`Check the background_task.py example. <https://github.com/Pycord-Development/pycord/blob/master/examples/background_task.py>`_"

msgid "How do I get a specific model?"
msgstr "How do I get a specific model?"

msgid "There are multiple ways of doing this. If you have a specific model's ID then you can use one of the following functions:"
msgstr "There are multiple ways of doing this. If you have a specific model's ID then you can use one of the following functions:"

msgid ":meth:`Client.get_channel`"
msgstr ":meth:`Client.get_channel`"

msgid ":meth:`Client.get_message`"
msgstr ":meth:`Client.get_message`"

msgid ":meth:`Client.get_guild`"
msgstr ":meth:`Client.get_guild`"

msgid ":meth:`Client.get_user`"
msgstr ":meth:`Client.get_user`"

msgid ":meth:`Client.get_emoji`"
msgstr ":meth:`Client.get_emoji`"

msgid ":meth:`Guild.get_member`"
msgstr ":meth:`Guild.get_member`"

msgid ":meth:`Guild.get_channel`"
msgstr ":meth:`Guild.get_channel`"

msgid ":meth:`Guild.get_role`"
msgstr ":meth:`Guild.get_role`"

msgid "The following use an HTTP request:"
msgstr "The following use an HTTP request:"

msgid ":meth:`abc.Messageable.fetch_message`"
msgstr ":meth:`abc.Messageable.fetch_message`"

msgid ":meth:`Client.fetch_user`"
msgstr ":meth:`Client.fetch_user`"

msgid ":meth:`Client.fetch_guilds`"
msgstr ":meth:`Client.fetch_guilds`"

msgid ":meth:`Client.fetch_guild`"
msgstr ":meth:`Client.fetch_guild`"

msgid ":meth:`Guild.fetch_emoji`"
msgstr ":meth:`Guild.fetch_emoji`"

msgid ":meth:`Guild.fetch_emojis`"
msgstr ":meth:`Guild.fetch_emojis`"

msgid ":meth:`Guild.fetch_member`"
msgstr ":meth:`Guild.fetch_member`"

msgid "If the functions above do not help you, then use of :func:`utils.find` or :func:`utils.get` would serve some use in finding specific models."
msgstr "If the functions above do not help you, then use of :func:`utils.find` or :func:`utils.get` would serve some use in finding specific models."

msgid "How do I make a web request?"
msgstr "How do I make a web request?"

msgid "To make a request, you should use a non-blocking library. This library already uses and requires a 3rd party library for making requests, :doc:`aiohttp <aio:index>`."
msgstr "To make a request, you should use a non-blocking library. This library already uses and requires a 3rd party library for making requests, :doc:`aiohttp <aio:index>`."

msgid "See `aiohttp's full documentation <http://aiohttp.readthedocs.io/en/stable/>`_ for more information."
msgstr "See `aiohttp's full documentation <http://aiohttp.readthedocs.io/en/stable/>`_ for more information."

msgid "How do I use a local image file for an embed image?"
msgstr "How do I use a local image file for an embed image?"

msgid "Discord special-cases uploading an image attachment and using it within an embed so that it will not display separately, but instead in the embed's thumbnail, image, footer or author icon."
msgstr "Discord special-cases uploading an image attachment and using it within an embed so that it will not display separately, but instead in the embed's thumbnail, image, footer or author icon."

msgid "To do so, upload the image normally with :meth:`abc.Messageable.send`, and set the embed's image URL to ``attachment://image.png``, where ``image.png`` is the filename of the image you will send."
msgstr "To do so, upload the image normally with :meth:`abc.Messageable.send`, and set the embed's image URL to ``attachment://image.png``, where ``image.png`` is the filename of the image you will send."

msgid "Is there an event for audit log entries being created?"
msgstr "Is there an event for audit log entries being created?"

msgid "As of version 2.5, you can receive audit log entries with the :func:`on_audit_log_entry` event."
msgstr "As of version 2.5, you can receive audit log entries with the :func:`on_audit_log_entry` event."

msgid "Commands Extension"
msgstr "Commands Extension"

msgid "Questions regarding ``discord.ext.commands`` belong here."
msgstr "Questions regarding ``discord.ext.commands`` belong here."

msgid "Why does ``on_message`` make my commands stop working?"
msgstr "Why does ``on_message`` make my commands stop working?"

msgid "Overriding the default provided ``on_message`` forbids any extra commands from running. To fix this, add a ``bot.process_commands(message)`` line at the end of your ``on_message``. For example: ::"
msgstr "Overriding the default provided ``on_message`` forbids any extra commands from running. To fix this, add a ``bot.process_commands(message)`` line at the end of your ``on_message``. For example: ::"

msgid "Alternatively, you can place your ``on_message`` logic into a **listener**. In this setup, you should not manually call ``bot.process_commands()``. This also allows you to do multiple things asynchronously in response to a message. Example::"
msgstr "Alternatively, you can place your ``on_message`` logic into a **listener**. In this setup, you should not manually call ``bot.process_commands()``. This also allows you to do multiple things asynchronously in response to a message. Example::"

msgid "Why do my arguments require quotes?"
msgstr "Why do my arguments require quotes?"

msgid "In a simple command defined as: ::"
msgstr "In a simple command defined as: ::"

msgid "Calling it via ``?echo a b c`` will only fetch the first argument and disregard the rest. To fix this you should either call it via ``?echo \"a b c\"`` or change the signature to have \"consume rest\" behaviour. Example: ::"
msgstr "Calling it via ``?echo a b c`` will only fetch the first argument and disregard the rest. To fix this you should either call it via ``?echo \"a b c\"`` or change the signature to have \"consume rest\" behaviour. Example: ::"

msgid "This will allow you to use ``?echo a b c`` without needing the quotes."
msgstr "This will allow you to use ``?echo a b c`` without needing the quotes."

msgid "How do I get the original ``message``\\?"
msgstr "How do I get the original ``message``\\?"

msgid "The :class:`~ext.commands.Context` contains an attribute, :attr:`~.Context.message` to get the original message."
msgstr "The :class:`~ext.commands.Context` contains an attribute, :attr:`~.Context.message` to get the original message."

msgid "Example: ::"
msgstr "Example: ::"

msgid "How do I make a subcommand?"
msgstr "How do I make a subcommand?"

msgid "Use the :func:`~ext.commands.group` decorator. This will transform the callback into a :class:`~ext.commands.Group` which will allow you to add commands into the group operating as \"subcommands\". These groups can be arbitrarily nested as well."
msgstr "Use the :func:`~ext.commands.group` decorator. This will transform the callback into a :class:`~ext.commands.Group` which will allow you to add commands into the group operating as \"subcommands\". These groups can be arbitrarily nested as well."

msgid "This could then be used as ``?git push origin master``."
msgstr "This could then be used as ``?git push origin master``."

