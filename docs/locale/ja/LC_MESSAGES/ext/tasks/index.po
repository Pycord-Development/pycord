
msgid ""
msgstr ""
"Project-Id-Version:  discordpy\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-10-23 22:41-0400\n"
"PO-Revision-Date: 2020-10-24 02:41+0000\n"
"Last-Translator: \n"
"Language: ja_JP\n"
"Language-Team: Japanese\n"
"Plural-Forms: nplurals=1; plural=0\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.5.3\n"

#: ../../ext/tasks/index.rst:4
msgid "``discord.ext.tasks`` -- asyncio.Task helpers"
msgstr "``discord.ext.tasks`` -- asyncio.Task ヘルパー"

#: ../../ext/tasks/index.rst:8
msgid ""
"One of the most common operations when making a bot is having a loop run "
"in the background at a specified interval. This pattern is very common "
"but has a lot of things you need to look out for:"
msgstr "ボットを作成するときの最も一般的な操作の1つは、指定した間隔でバックグラウンドでループを実行させることです。このパターンは非常に一般的ですが、注意すべきことがたくさんあります。"

#: ../../ext/tasks/index.rst:10
msgid "How do I handle :exc:`asyncio.CancelledError`?"
msgstr ":exc:`asyncio.CancelledError` はどのように処理するべきですか？"

#: ../../ext/tasks/index.rst:11
msgid "What do I do if the internet goes out?"
msgstr "インターネット接続が切れた場合はどうするべきですか？"

#: ../../ext/tasks/index.rst:12
msgid "What is the maximum number of seconds I can sleep anyway?"
msgstr "スリープできる最大時間は何秒ですか？"

#: ../../ext/tasks/index.rst:14
msgid ""
"The goal of this pycord extension is to abstract all these worries "
"away from you."
msgstr "pycordの拡張機能の目的は、こういった苦労の種を抽象化することです。"

#: ../../ext/tasks/index.rst:17
msgid "Recipes"
msgstr "レシピ"

#: ../../ext/tasks/index.rst:19
msgid "A simple background task in a :class:`~discord.ext.commands.Cog`:"
msgstr ":class:`~discord.ext.commands.Cog` におけるシンプルなバックグラウンドタスク:"

#: ../../ext/tasks/index.rst:38
msgid "Adding an exception to handle during reconnect:"
msgstr "再接続中に処理する例外を追加します:"

#: ../../ext/tasks/index.rst:61
msgid "Looping a certain amount of times before exiting:"
msgstr "特定の回数ループさせる:"

#: ../../ext/tasks/index.rst:77
msgid "Waiting until the bot is ready before the loop starts:"
msgstr "ループが始まる前に、Botの準備が整うまで待機する: "

#: ../../ext/tasks/index.rst:102
msgid "Doing something during cancellation:"
msgstr "キャンセルする場合、その間に何らかの処理を行う:"

#: ../../ext/tasks/index.rst:136
msgid "API Reference"
msgstr "APIリファレンス"

#: discord.ext.tasks.Loop:1 of
msgid ""
"A background task helper that abstracts the loop and reconnection logic "
"for you."
msgstr "ループと再接続処理を抽象化するバックグラウンドタスクのヘルパー。"

#: discord.ext.tasks.Loop:3 of
msgid "The main interface to create this is through :func:`loop`."
msgstr ":func:`loop` はこれを作成するための主要なインタフェースです。"

#: discord.ext.tasks.Loop.current_loop:1 of
msgid "The current iteration of the loop."
msgstr ""

#: discord.ext.tasks.Loop.current_loop discord.ext.tasks.Loop.next_iteration of
msgid "type"
msgstr ""

#: discord.ext.tasks.Loop.current_loop:3 of
#, fuzzy
msgid ":class:`int`"
msgstr ":class:`asyncio.Task`"

#: discord.ext.tasks.Loop.next_iteration:1 of
msgid "When the next iteration of the loop will occur."
msgstr ""

#: discord.ext.tasks.Loop.next_iteration:5 of
msgid "Optional[:class:`datetime.datetime`]"
msgstr ""

#: discord.ext.tasks.Loop.start:1 of
msgid "Starts the internal task in the event loop."
msgstr ""

#: discord.ext.tasks.Loop.add_exception_type discord.ext.tasks.Loop.after_loop
#: discord.ext.tasks.Loop.before_loop discord.ext.tasks.Loop.change_interval
#: discord.ext.tasks.Loop.error discord.ext.tasks.Loop.remove_exception_type
#: discord.ext.tasks.Loop.restart discord.ext.tasks.Loop.start
#: discord.ext.tasks.loop of
msgid "Parameters"
msgstr "パラメーター"

#: discord.ext.tasks.Loop.start:3 of
msgid "The arguments to use."
msgstr ""

#: discord.ext.tasks.Loop.restart:9 discord.ext.tasks.Loop.start:4 of
msgid "The keyword arguments to use."
msgstr ""

#: discord.ext.tasks.Loop.add_exception_type discord.ext.tasks.Loop.after_loop
#: discord.ext.tasks.Loop.before_loop discord.ext.tasks.Loop.change_interval
#: discord.ext.tasks.Loop.error discord.ext.tasks.Loop.start
#: discord.ext.tasks.loop of
#, fuzzy
msgid "Raises"
msgstr "例外"

#: discord.ext.tasks.Loop.start:6 of
msgid "A task has already been launched and is running."
msgstr ""

#: discord.ext.tasks.Loop.remove_exception_type discord.ext.tasks.Loop.start of
msgid "Returns"
msgstr "戻り値"

#: discord.ext.tasks.Loop.start:8 of
msgid "The task that has been created."
msgstr "タスクが作成されました。"

#: discord.ext.tasks.Loop.remove_exception_type discord.ext.tasks.Loop.start of
msgid "Return type"
msgstr "戻り値の型"

#: discord.ext.tasks.Loop.start:9 of
msgid ":class:`asyncio.Task`"
msgstr ":class:`asyncio.Task`"

#: discord.ext.tasks.Loop.stop:1 of
msgid "Gracefully stops the task from running."
msgstr ""

#: discord.ext.tasks.Loop.stop:3 of
msgid ""
"Unlike :meth:`cancel`\\, this allows the task to finish its current "
"iteration before gracefully exiting."
msgstr ""

#: discord.ext.tasks.Loop.stop:8 of
msgid ""
"If the internal function raises an error that can be handled before "
"finishing then it will retry until it succeeds."
msgstr ""

#: discord.ext.tasks.Loop.stop:12 of
msgid ""
"If this is undesirable, either remove the error handling before stopping "
"via :meth:`clear_exception_types` or use :meth:`cancel` instead."
msgstr ""

#: discord.ext.tasks.Loop.cancel:1 of
msgid "Cancels the internal task, if it is running."
msgstr ""

#: discord.ext.tasks.Loop.restart:1 of
msgid "A convenience method to restart the internal task."
msgstr ""

#: discord.ext.tasks.Loop.restart:5 of
msgid ""
"Due to the way this function works, the task is not returned like "
":meth:`start`."
msgstr ""

#: discord.ext.tasks.Loop.restart:8 of
msgid "The arguments to to use."
msgstr ""

#: discord.ext.tasks.Loop.add_exception_type:1 of
#, fuzzy
msgid "Adds exception types to be handled during the reconnect logic."
msgstr "再接続中に処理する例外を追加します:"

#: discord.ext.tasks.Loop.add_exception_type:3 of
msgid ""
"By default the exception types handled are those handled by "
":meth:`discord.Client.connect`\\, which includes a lot of internet "
"disconnection errors."
msgstr ""

#: discord.ext.tasks.Loop.add_exception_type:7 of
msgid ""
"This function is useful if you're interacting with a 3rd party library "
"that raises its own set of exceptions."
msgstr ""

#: discord.ext.tasks.Loop.add_exception_type:10
#: discord.ext.tasks.Loop.remove_exception_type:3 of
msgid "An argument list of exception classes to handle."
msgstr ""

#: discord.ext.tasks.Loop.add_exception_type:13 of
msgid ""
"An exception passed is either not a class or not inherited from "
":class:`BaseException`."
msgstr ""

#: discord.ext.tasks.Loop.clear_exception_types:1 of
msgid "Removes all exception types that are handled."
msgstr ""

#: discord.ext.tasks.Loop.clear_exception_types:5 of
msgid "This operation obviously cannot be undone!"
msgstr ""

#: discord.ext.tasks.Loop.remove_exception_type:1 of
#, fuzzy
msgid "Removes exception types from being handled during the reconnect logic."
msgstr "再接続中に処理する例外を追加します:"

#: discord.ext.tasks.Loop.remove_exception_type:6 of
msgid "Whether all exceptions were successfully removed."
msgstr ""

#: discord.ext.tasks.Loop.remove_exception_type:7 of
msgid ":class:`bool`"
msgstr ""

#: discord.ext.tasks.Loop.get_task:1 of
msgid ""
"Optional[:class:`asyncio.Task`]: Fetches the internal task or ``None`` if"
" there isn't one running."
msgstr ""

#: discord.ext.tasks.Loop.is_being_cancelled:1 of
msgid "Whether the task is being cancelled."
msgstr ""

#: discord.ext.tasks.Loop.failed:1 of
msgid ":class:`bool`: Whether the internal task has failed."
msgstr ""

#: discord.ext.tasks.Loop.is_running:1 of
msgid ":class:`bool`: Check if the task is currently running."
msgstr ""

#: discord.ext.tasks.Loop.before_loop:1 of
msgid ""
"A decorator that registers a coroutine to be called before the loop "
"starts running."
msgstr ""

#: discord.ext.tasks.Loop.before_loop:3 of
msgid ""
"This is useful if you want to wait for some bot state before the loop "
"starts, such as :meth:`discord.Client.wait_until_ready`."
msgstr ""

#: discord.ext.tasks.Loop.after_loop:3 discord.ext.tasks.Loop.before_loop:6 of
msgid "The coroutine must take no arguments (except ``self`` in a class context)."
msgstr ""

#: discord.ext.tasks.Loop.before_loop:8 of
msgid "The coroutine to register before the loop runs."
msgstr ""

#: discord.ext.tasks.Loop.after_loop:14 discord.ext.tasks.Loop.before_loop:11
#: discord.ext.tasks.Loop.error:13 discord.ext.tasks.loop:22 of
msgid "The function was not a coroutine."
msgstr ""

#: discord.ext.tasks.Loop.after_loop:1 of
msgid ""
"A decorator that register a coroutine to be called after the loop "
"finished running."
msgstr ""

#: discord.ext.tasks.Loop.after_loop:7 of
msgid ""
"This coroutine is called even during cancellation. If it is desirable to "
"tell apart whether something was cancelled or not, check to see whether "
":meth:`is_being_cancelled` is ``True`` or not."
msgstr ""

#: discord.ext.tasks.Loop.after_loop:11 of
msgid "The coroutine to register after the loop finishes."
msgstr ""

#: discord.ext.tasks.Loop.error:1 of
msgid ""
"A decorator that registers a coroutine to be called if the task "
"encounters an unhandled exception."
msgstr ""

#: discord.ext.tasks.Loop.error:3 of
msgid ""
"The coroutine must take only one argument the exception raised (except "
"``self`` in a class context)."
msgstr ""

#: discord.ext.tasks.Loop.error:5 of
msgid ""
"By default this prints to :data:`sys.stderr` however it could be "
"overridden to have a different implementation."
msgstr ""

#: discord.ext.tasks.Loop.error:10 of
msgid "The coroutine to register in the event of an unhandled exception."
msgstr ""

#: discord.ext.tasks.Loop.change_interval:1 of
msgid "Changes the interval for the sleep time."
msgstr ""

#: discord.ext.tasks.Loop.change_interval:5 of
msgid ""
"This only applies on the next loop iteration. If it is desirable for the "
"change of interval to be applied right away, cancel the task with "
":meth:`cancel`."
msgstr ""

#: discord.ext.tasks.Loop.change_interval:10 discord.ext.tasks.loop:4 of
msgid "The number of seconds between every iteration."
msgstr ""

#: discord.ext.tasks.Loop.change_interval:12 discord.ext.tasks.loop:6 of
msgid "The number of minutes between every iteration."
msgstr ""

#: discord.ext.tasks.Loop.change_interval:14 discord.ext.tasks.loop:8 of
msgid "The number of hours between every iteration."
msgstr ""

#: discord.ext.tasks.Loop.change_interval:17 discord.ext.tasks.loop:21 of
msgid "An invalid value was given."
msgstr ""

#: discord.ext.tasks.loop:1 of
msgid ""
"A decorator that schedules a task in the background for you with optional"
" reconnect logic. The decorator returns a :class:`Loop`."
msgstr ""

#: discord.ext.tasks.loop:10 of
msgid "The number of loops to do, ``None`` if it should be an infinite loop."
msgstr ""

#: discord.ext.tasks.loop:13 of
msgid ""
"Whether to handle errors and restart the task using an exponential back-"
"off algorithm similar to the one used in :meth:`discord.Client.connect`."
msgstr ""

#: discord.ext.tasks.loop:17 of
msgid ""
"The loop to use to register the task, if not given defaults to "
":func:`asyncio.get_event_loop`."
msgstr ""

#~ msgid ":class:`int` -- The current iteration of the loop."
#~ msgstr ""

#~ msgid ":exc:`RuntimeError` -- A task has already been launched and is running."
#~ msgstr ""

#~ msgid "Adds an exception type to be handled during the reconnect logic."
#~ msgstr ""

#~ msgid "The exception class to handle."
#~ msgstr ""

#~ msgid ""
#~ ":exc:`TypeError` -- The exception passed "
#~ "is either not a class or not "
#~ "inherited from :class:`BaseException`."
#~ msgstr ""

#~ msgid ""
#~ "Removes an exception type from being "
#~ "handled during the reconnect logic."
#~ msgstr ""

#~ msgid "Whether it was successfully removed."
#~ msgstr ""

#~ msgid ":exc:`TypeError` -- The function was not a coroutine."
#~ msgstr ""

#~ msgid ":exc:`ValueError` -- An invalid value was given."
#~ msgstr ""

#~ msgid ""
#~ "A decorator that schedules a task "
#~ "in the background for you with "
#~ "optional reconnect logic."
#~ msgstr ""

#~ msgid "The loop helper that handles the background task."
#~ msgstr ""

#~ msgid ":class:`Loop`"
#~ msgstr ""

